
4x4keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800451c  0800451c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800451c  0800451c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000084  080045a8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080045a8  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa9d  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002198  00000000  00000000  0002fb4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001020  00000000  00000000  00031ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  00032d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019626  00000000  00000000  00033c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c05f  00000000  00000000  0004d29e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e48c  00000000  00000000  000592fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  000e7804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080043a8 	.word	0x080043a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080043a8 	.word	0x080043a8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <scan_Rx>:
#include <stdio.h>
#include <string.h>
#include "keypad.h"

char scan_Rx(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016a:	48ba      	ldr	r0, [pc, #744]	; (8000454 <scan_Rx+0x2f4>)
 800016c:	f001 fb5d 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000176:	48b8      	ldr	r0, [pc, #736]	; (8000458 <scan_Rx+0x2f8>)
 8000178:	f001 fb57 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000182:	48b5      	ldr	r0, [pc, #724]	; (8000458 <scan_Rx+0x2f8>)
 8000184:	f001 fb51 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2180      	movs	r1, #128	; 0x80
 800018c:	48b3      	ldr	r0, [pc, #716]	; (800045c <scan_Rx+0x2fc>)
 800018e:	f001 fb4c 	bl	800182a <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000192:	2110      	movs	r1, #16
 8000194:	48af      	ldr	r0, [pc, #700]	; (8000454 <scan_Rx+0x2f4>)
 8000196:	f001 fb31 	bl	80017fc <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d109      	bne.n	80001b4 <scan_Rx+0x54>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80001a0:	bf00      	nop
 80001a2:	2110      	movs	r1, #16
 80001a4:	48ab      	ldr	r0, [pc, #684]	; (8000454 <scan_Rx+0x2f4>)
 80001a6:	f001 fb29 	bl	80017fc <HAL_GPIO_ReadPin>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0f8      	beq.n	80001a2 <scan_Rx+0x42>
		return '1';
 80001b0:	2331      	movs	r3, #49	; 0x31
 80001b2:	e14c      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80001b4:	2120      	movs	r1, #32
 80001b6:	48a7      	ldr	r0, [pc, #668]	; (8000454 <scan_Rx+0x2f4>)
 80001b8:	f001 fb20 	bl	80017fc <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d109      	bne.n	80001d6 <scan_Rx+0x76>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80001c2:	bf00      	nop
 80001c4:	2120      	movs	r1, #32
 80001c6:	48a3      	ldr	r0, [pc, #652]	; (8000454 <scan_Rx+0x2f4>)
 80001c8:	f001 fb18 	bl	80017fc <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f8      	beq.n	80001c4 <scan_Rx+0x64>
		return '2';
 80001d2:	2332      	movs	r3, #50	; 0x32
 80001d4:	e13b      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80001d6:	2108      	movs	r1, #8
 80001d8:	489e      	ldr	r0, [pc, #632]	; (8000454 <scan_Rx+0x2f4>)
 80001da:	f001 fb0f 	bl	80017fc <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d109      	bne.n	80001f8 <scan_Rx+0x98>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80001e4:	bf00      	nop
 80001e6:	2108      	movs	r1, #8
 80001e8:	489a      	ldr	r0, [pc, #616]	; (8000454 <scan_Rx+0x2f4>)
 80001ea:	f001 fb07 	bl	80017fc <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f8      	beq.n	80001e6 <scan_Rx+0x86>
		return '3';
 80001f4:	2333      	movs	r3, #51	; 0x33
 80001f6:	e12a      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	4896      	ldr	r0, [pc, #600]	; (8000458 <scan_Rx+0x2f8>)
 80001fe:	f001 fafd 	bl	80017fc <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d10a      	bne.n	800021e <scan_Rx+0xbe>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000208:	bf00      	nop
 800020a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020e:	4892      	ldr	r0, [pc, #584]	; (8000458 <scan_Rx+0x2f8>)
 8000210:	f001 faf4 	bl	80017fc <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f7      	beq.n	800020a <scan_Rx+0xaa>
		return 'A';
 800021a:	2341      	movs	r3, #65	; 0x41
 800021c:	e117      	b.n	800044e <scan_Rx+0x2ee>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000224:	488b      	ldr	r0, [pc, #556]	; (8000454 <scan_Rx+0x2f4>)
 8000226:	f001 fb00 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000230:	4889      	ldr	r0, [pc, #548]	; (8000458 <scan_Rx+0x2f8>)
 8000232:	f001 fafa 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023c:	4886      	ldr	r0, [pc, #536]	; (8000458 <scan_Rx+0x2f8>)
 800023e:	f001 faf4 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	4885      	ldr	r0, [pc, #532]	; (800045c <scan_Rx+0x2fc>)
 8000248:	f001 faef 	bl	800182a <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 800024c:	2110      	movs	r1, #16
 800024e:	4881      	ldr	r0, [pc, #516]	; (8000454 <scan_Rx+0x2f4>)
 8000250:	f001 fad4 	bl	80017fc <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d109      	bne.n	800026e <scan_Rx+0x10e>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800025a:	bf00      	nop
 800025c:	2110      	movs	r1, #16
 800025e:	487d      	ldr	r0, [pc, #500]	; (8000454 <scan_Rx+0x2f4>)
 8000260:	f001 facc 	bl	80017fc <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f8      	beq.n	800025c <scan_Rx+0xfc>
		return '4';
 800026a:	2334      	movs	r3, #52	; 0x34
 800026c:	e0ef      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 800026e:	2120      	movs	r1, #32
 8000270:	4878      	ldr	r0, [pc, #480]	; (8000454 <scan_Rx+0x2f4>)
 8000272:	f001 fac3 	bl	80017fc <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d109      	bne.n	8000290 <scan_Rx+0x130>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800027c:	bf00      	nop
 800027e:	2120      	movs	r1, #32
 8000280:	4874      	ldr	r0, [pc, #464]	; (8000454 <scan_Rx+0x2f4>)
 8000282:	f001 fabb 	bl	80017fc <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f8      	beq.n	800027e <scan_Rx+0x11e>
		return '5';
 800028c:	2335      	movs	r3, #53	; 0x35
 800028e:	e0de      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000290:	2108      	movs	r1, #8
 8000292:	4870      	ldr	r0, [pc, #448]	; (8000454 <scan_Rx+0x2f4>)
 8000294:	f001 fab2 	bl	80017fc <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d109      	bne.n	80002b2 <scan_Rx+0x152>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800029e:	bf00      	nop
 80002a0:	2108      	movs	r1, #8
 80002a2:	486c      	ldr	r0, [pc, #432]	; (8000454 <scan_Rx+0x2f4>)
 80002a4:	f001 faaa 	bl	80017fc <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f8      	beq.n	80002a0 <scan_Rx+0x140>
		return '6';
 80002ae:	2336      	movs	r3, #54	; 0x36
 80002b0:	e0cd      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80002b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b6:	4868      	ldr	r0, [pc, #416]	; (8000458 <scan_Rx+0x2f8>)
 80002b8:	f001 faa0 	bl	80017fc <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d10a      	bne.n	80002d8 <scan_Rx+0x178>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80002c2:	bf00      	nop
 80002c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c8:	4863      	ldr	r0, [pc, #396]	; (8000458 <scan_Rx+0x2f8>)
 80002ca:	f001 fa97 	bl	80017fc <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f7      	beq.n	80002c4 <scan_Rx+0x164>
		return 'B';
 80002d4:	2342      	movs	r3, #66	; 0x42
 80002d6:	e0ba      	b.n	800044e <scan_Rx+0x2ee>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002de:	485d      	ldr	r0, [pc, #372]	; (8000454 <scan_Rx+0x2f4>)
 80002e0:	f001 faa3 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	485b      	ldr	r0, [pc, #364]	; (8000458 <scan_Rx+0x2f8>)
 80002ec:	f001 fa9d 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	4858      	ldr	r0, [pc, #352]	; (8000458 <scan_Rx+0x2f8>)
 80002f8:	f001 fa97 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2180      	movs	r1, #128	; 0x80
 8000300:	4856      	ldr	r0, [pc, #344]	; (800045c <scan_Rx+0x2fc>)
 8000302:	f001 fa92 	bl	800182a <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000306:	2110      	movs	r1, #16
 8000308:	4852      	ldr	r0, [pc, #328]	; (8000454 <scan_Rx+0x2f4>)
 800030a:	f001 fa77 	bl	80017fc <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <scan_Rx+0x1c8>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000314:	bf00      	nop
 8000316:	2110      	movs	r1, #16
 8000318:	484e      	ldr	r0, [pc, #312]	; (8000454 <scan_Rx+0x2f4>)
 800031a:	f001 fa6f 	bl	80017fc <HAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f8      	beq.n	8000316 <scan_Rx+0x1b6>
		return '7';
 8000324:	2337      	movs	r3, #55	; 0x37
 8000326:	e092      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000328:	2120      	movs	r1, #32
 800032a:	484a      	ldr	r0, [pc, #296]	; (8000454 <scan_Rx+0x2f4>)
 800032c:	f001 fa66 	bl	80017fc <HAL_GPIO_ReadPin>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d109      	bne.n	800034a <scan_Rx+0x1ea>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000336:	bf00      	nop
 8000338:	2120      	movs	r1, #32
 800033a:	4846      	ldr	r0, [pc, #280]	; (8000454 <scan_Rx+0x2f4>)
 800033c:	f001 fa5e 	bl	80017fc <HAL_GPIO_ReadPin>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <scan_Rx+0x1d8>
		return '8';
 8000346:	2338      	movs	r3, #56	; 0x38
 8000348:	e081      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 800034a:	2108      	movs	r1, #8
 800034c:	4841      	ldr	r0, [pc, #260]	; (8000454 <scan_Rx+0x2f4>)
 800034e:	f001 fa55 	bl	80017fc <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d109      	bne.n	800036c <scan_Rx+0x20c>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000358:	bf00      	nop
 800035a:	2108      	movs	r1, #8
 800035c:	483d      	ldr	r0, [pc, #244]	; (8000454 <scan_Rx+0x2f4>)
 800035e:	f001 fa4d 	bl	80017fc <HAL_GPIO_ReadPin>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f8      	beq.n	800035a <scan_Rx+0x1fa>
		return '9';
 8000368:	2339      	movs	r3, #57	; 0x39
 800036a:	e070      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 800036c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000370:	4839      	ldr	r0, [pc, #228]	; (8000458 <scan_Rx+0x2f8>)
 8000372:	f001 fa43 	bl	80017fc <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10a      	bne.n	8000392 <scan_Rx+0x232>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800037c:	bf00      	nop
 800037e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000382:	4835      	ldr	r0, [pc, #212]	; (8000458 <scan_Rx+0x2f8>)
 8000384:	f001 fa3a 	bl	80017fc <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f7      	beq.n	800037e <scan_Rx+0x21e>
		return 'C';
 800038e:	2343      	movs	r3, #67	; 0x43
 8000390:	e05d      	b.n	800044e <scan_Rx+0x2ee>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000398:	482e      	ldr	r0, [pc, #184]	; (8000454 <scan_Rx+0x2f4>)
 800039a:	f001 fa46 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a4:	482c      	ldr	r0, [pc, #176]	; (8000458 <scan_Rx+0x2f8>)
 80003a6:	f001 fa40 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	4829      	ldr	r0, [pc, #164]	; (8000458 <scan_Rx+0x2f8>)
 80003b2:	f001 fa3a 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	4828      	ldr	r0, [pc, #160]	; (800045c <scan_Rx+0x2fc>)
 80003bc:	f001 fa35 	bl	800182a <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80003c0:	2110      	movs	r1, #16
 80003c2:	4824      	ldr	r0, [pc, #144]	; (8000454 <scan_Rx+0x2f4>)
 80003c4:	f001 fa1a 	bl	80017fc <HAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d109      	bne.n	80003e2 <scan_Rx+0x282>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80003ce:	bf00      	nop
 80003d0:	2110      	movs	r1, #16
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <scan_Rx+0x2f4>)
 80003d4:	f001 fa12 	bl	80017fc <HAL_GPIO_ReadPin>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f8      	beq.n	80003d0 <scan_Rx+0x270>
		return '0';
 80003de:	2330      	movs	r3, #48	; 0x30
 80003e0:	e035      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80003e2:	2120      	movs	r1, #32
 80003e4:	481b      	ldr	r0, [pc, #108]	; (8000454 <scan_Rx+0x2f4>)
 80003e6:	f001 fa09 	bl	80017fc <HAL_GPIO_ReadPin>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d109      	bne.n	8000404 <scan_Rx+0x2a4>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80003f0:	bf00      	nop
 80003f2:	2120      	movs	r1, #32
 80003f4:	4817      	ldr	r0, [pc, #92]	; (8000454 <scan_Rx+0x2f4>)
 80003f6:	f001 fa01 	bl	80017fc <HAL_GPIO_ReadPin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f8      	beq.n	80003f2 <scan_Rx+0x292>
		return '-';
 8000400:	232d      	movs	r3, #45	; 0x2d
 8000402:	e024      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000404:	2108      	movs	r1, #8
 8000406:	4813      	ldr	r0, [pc, #76]	; (8000454 <scan_Rx+0x2f4>)
 8000408:	f001 f9f8 	bl	80017fc <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d109      	bne.n	8000426 <scan_Rx+0x2c6>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000412:	bf00      	nop
 8000414:	2108      	movs	r1, #8
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <scan_Rx+0x2f4>)
 8000418:	f001 f9f0 	bl	80017fc <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f8      	beq.n	8000414 <scan_Rx+0x2b4>
		return '#';
 8000422:	2323      	movs	r3, #35	; 0x23
 8000424:	e013      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <scan_Rx+0x2f8>)
 800042c:	f001 f9e6 	bl	80017fc <HAL_GPIO_ReadPin>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d10a      	bne.n	800044c <scan_Rx+0x2ec>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000436:	bf00      	nop
 8000438:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <scan_Rx+0x2f8>)
 800043e:	f001 f9dd 	bl	80017fc <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f7      	beq.n	8000438 <scan_Rx+0x2d8>
		return '*';
 8000448:	232a      	movs	r3, #42	; 0x2a
 800044a:	e000      	b.n	800044e <scan_Rx+0x2ee>
	}

	return 255;
 800044c:	23ff      	movs	r3, #255	; 0xff
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40010c00 	.word	0x40010c00
 8000458:	40010800 	.word	0x40010800
 800045c:	40011000 	.word	0x40011000

08000460 <checkPassword>:
/*
 * pw 		 : pw that user press
 * setted_pw : door-lock password
 */
char checkPassword(const char *pw, const char *setted_pw)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
	printf("checkPassword called\n");
 800046a:	480b      	ldr	r0, [pc, #44]	; (8000498 <checkPassword+0x38>)
 800046c:	f003 f8be 	bl	80035ec <puts>
	if(!strcmp(pw, setted_pw))
 8000470:	6839      	ldr	r1, [r7, #0]
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f7ff fe6a 	bl	800014c <strcmp>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d103      	bne.n	8000486 <checkPassword+0x26>
	{
		printf("Access Success\n");//오늘 처음 알았는데 문자열 마지막에 \n 추가 안해주면  Tera Term에서 인식 못함....
 800047e:	4807      	ldr	r0, [pc, #28]	; (800049c <checkPassword+0x3c>)
 8000480:	f003 f8b4 	bl	80035ec <puts>
 8000484:	e002      	b.n	800048c <checkPassword+0x2c>
	}else
	{
		printf("Access Denied\n");
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <checkPassword+0x40>)
 8000488:	f003 f8b0 	bl	80035ec <puts>
	}
}
 800048c:	bf00      	nop
 800048e:	4618      	mov	r0, r3
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	080043c0 	.word	0x080043c0
 800049c:	080043d8 	.word	0x080043d8
 80004a0:	080043e8 	.word	0x080043e8

080004a4 <set_remain_time_progress>:

void set_remain_time_progress(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < remain_time; i++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	e009      	b.n	80004c4 <set_remain_time_progress+0x20>
	{
	  HD44780_SetCursor(i, 1);
 80004b0:	2101      	movs	r1, #1
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f8ba 	bl	800062c <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(0xFF);
 80004b8:	20ff      	movs	r0, #255	; 0xff
 80004ba:	f000 f927 	bl	800070c <HD44780_PrintSpecialChar>
	for(int i = 0; i < remain_time; i++)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b09      	cmp	r3, #9
 80004c8:	ddf2      	ble.n	80004b0 <set_remain_time_progress+0xc>
	}
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <unset_remain_time_progress>:

void unset_remain_time_progress(short rt)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	80fb      	strh	r3, [r7, #6]
  HD44780_SetCursor(rt, 1);
 80004dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e0:	2101      	movs	r1, #1
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f8a2 	bl	800062c <HD44780_SetCursor>
  HD44780_PrintSpecialChar(0x20);
 80004e8:	2020      	movs	r0, #32
 80004ea:	f000 f90f 	bl	800070c <HD44780_PrintSpecialChar>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000502:	4a38      	ldr	r2, [pc, #224]	; (80005e4 <HD44780_Init+0xec>)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000508:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <HD44780_Init+0xf0>)
 800050a:	2208      	movs	r2, #8
 800050c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800050e:	4b37      	ldr	r3, [pc, #220]	; (80005ec <HD44780_Init+0xf4>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000514:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <HD44780_Init+0xec>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d907      	bls.n	800052c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800051c:	4b33      	ldr	r3, [pc, #204]	; (80005ec <HD44780_Init+0xf4>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b31      	ldr	r3, [pc, #196]	; (80005ec <HD44780_Init+0xf4>)
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	e006      	b.n	800053a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800052c:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <HD44780_Init+0xf4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <HD44780_Init+0xf4>)
 8000538:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800053a:	f000 f991 	bl	8000860 <DelayInit>
  HAL_Delay(50);
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fed2 	bl	80012e8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <HD44780_Init+0xf0>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f94f 	bl	80007ec <ExpanderWrite>
  HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000552:	f000 fec9 	bl	80012e8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000556:	2030      	movs	r0, #48	; 0x30
 8000558:	f000 f936 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 800055c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000560:	f000 f9a6 	bl	80008b0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000564:	2030      	movs	r0, #48	; 0x30
 8000566:	f000 f92f 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 800056a:	f241 1094 	movw	r0, #4500	; 0x1194
 800056e:	f000 f99f 	bl	80008b0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000572:	2030      	movs	r0, #48	; 0x30
 8000574:	f000 f928 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 8000578:	f241 1094 	movw	r0, #4500	; 0x1194
 800057c:	f000 f998 	bl	80008b0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000580:	2020      	movs	r0, #32
 8000582:	f000 f921 	bl	80007c8 <Write4Bits>
  DelayUS(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f000 f992 	bl	80008b0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HD44780_Init+0xf4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0320 	orr.w	r3, r3, #32
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f8d9 	bl	800074e <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HD44780_Init+0xf8>)
 800059e:	2204      	movs	r2, #4
 80005a0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005a2:	f000 f875 	bl	8000690 <HD44780_Display>
  HD44780_Clear();
 80005a6:	f000 f82b 	bl	8000600 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HD44780_Init+0xfc>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HD44780_Init+0xfc>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f8c7 	bl	800074e <SendCommand>
  DelayUS(4500);
 80005c0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005c4:	f000 f974 	bl	80008b0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005c8:	490b      	ldr	r1, [pc, #44]	; (80005f8 <HD44780_Init+0x100>)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f876 	bl	80006bc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005d0:	490a      	ldr	r1, [pc, #40]	; (80005fc <HD44780_Init+0x104>)
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 f872 	bl	80006bc <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005d8:	f000 f81d 	bl	8000616 <HD44780_Home>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000ae 	.word	0x200000ae
 80005e8:	200000b0 	.word	0x200000b0
 80005ec:	200000ac 	.word	0x200000ac
 80005f0:	200000af 	.word	0x200000af
 80005f4:	200000ad 	.word	0x200000ad
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008

08000600 <HD44780_Clear>:

void HD44780_Clear()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);	// LCD_CLEARDISPLAY = 0x01
 8000604:	2001      	movs	r0, #1
 8000606:	f000 f8a2 	bl	800074e <SendCommand>
  DelayUS(2000);
 800060a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800060e:	f000 f94f 	bl	80008b0 <DelayUS>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}

08000616 <HD44780_Home>:

void HD44780_Home()
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800061a:	2002      	movs	r0, #2
 800061c:	f000 f897 	bl	800074e <SendCommand>
  DelayUS(2000);
 8000620:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000624:	f000 f944 	bl	80008b0 <DelayUS>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b087      	sub	sp, #28
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HD44780_SetCursor+0x5c>)
 800063e:	f107 0408 	add.w	r4, r7, #8
 8000642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <HD44780_SetCursor+0x60>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	429a      	cmp	r2, r3
 8000650:	d303      	bcc.n	800065a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HD44780_SetCursor+0x60>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3b01      	subs	r3, #1
 8000658:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	f107 0218 	add.w	r2, r7, #24
 8000662:	4413      	add	r3, r2
 8000664:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4413      	add	r3, r2
 800066e:	b2db      	uxtb	r3, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000676:	b25b      	sxtb	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f867 	bl	800074e <SendCommand>
}
 8000680:	bf00      	nop
 8000682:	371c      	adds	r7, #28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	080043f8 	.word	0x080043f8
 800068c:	200000ae 	.word	0x200000ae

08000690 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HD44780_Display+0x28>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HD44780_Display+0x28>)
 80006a0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HD44780_Display+0x28>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f84e 	bl	800074e <SendCommand>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000af 	.word	0x200000af

080006bc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f835 	bl	800074e <SendCommand>
  for (int i=0; i<8; i++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e009      	b.n	80006fe <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f839 	bl	800076a <SendChar>
  for (int i=0; i<8; i++)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b07      	cmp	r3, #7
 8000702:	ddf2      	ble.n	80006ea <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f826 	bl	800076a <SendChar>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800072e:	e006      	b.n	800073e <HD44780_PrintStr+0x18>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f816 	bl	800076a <SendChar>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f4      	bne.n	8000730 <HD44780_PrintStr+0xa>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f812 	bl	8000786 <Send>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <SendChar>:

static void SendChar(uint8_t ch)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2101      	movs	r1, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f804 	bl	8000786 <Send>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	460a      	mov	r2, r1
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4613      	mov	r3, r2
 8000794:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;		// 0
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f023 030f 	bic.w	r3, r3, #15
 800079c:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;	// decimal : 16, hexadecimal : 0x20 = 20H
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f80b 	bl	80007c8 <Write4Bits>
  Write4Bits((lownib)|mode);
 80007b2:	7bba      	ldrb	r2, [r7, #14]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f804 	bl	80007c8 <Write4Bits>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f809 	bl	80007ec <ExpanderWrite>
  PulseEnable(value);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f821 	bl	8000824 <PulseEnable>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight; // 0 | 0x08
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ExpanderWrite+0x30>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	230a      	movs	r3, #10
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	214e      	movs	r1, #78	; 0x4e
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <ExpanderWrite+0x34>)
 8000810:	f001 f97e 	bl	8001b10 <HAL_I2C_Master_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000b0 	.word	0x200000b0
 8000820:	200000b4 	.word	0x200000b4

08000824 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd8 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f837 	bl	80008b0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffce 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 8000850:	2014      	movs	r0, #20
 8000852:	f000 f82d 	bl	80008b0 <DelayUS>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <DelayInit>:

static void DelayInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <DelayInit+0x48>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <DelayInit+0x48>)
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800086e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <DelayInit+0x48>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <DelayInit+0x48>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800087a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <DelayInit+0x4c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <DelayInit+0x4c>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <DelayInit+0x4c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <DelayInit+0x4c>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <DelayInit+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800089a:	bf00      	nop
  __ASM volatile ("NOP");
 800089c:	bf00      	nop
  __ASM volatile ("NOP");
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000edf0 	.word	0xe000edf0
 80008ac:	e0001000 	.word	0xe0001000

080008b0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <DelayUS+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <DelayUS+0x44>)
 80008be:	fba2 2303 	umull	r2, r3, r2, r3
 80008c2:	0c9a      	lsrs	r2, r3, #18
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <DelayUS+0x48>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <DelayUS+0x48>)
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f6      	bhi.n	80008d2 <DelayUS+0x22>
}
 80008e4:	bf00      	nop
 80008e6:	371c      	adds	r7, #28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000014 	.word	0x20000014
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	e0001000 	.word	0xe0001000

080008fc <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b0a      	cmp	r3, #10
 8000908:	d106      	bne.n	8000918 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 800090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090e:	2201      	movs	r2, #1
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <__io_putchar+0x34>)
 8000912:	4808      	ldr	r0, [pc, #32]	; (8000934 <__io_putchar+0x38>)
 8000914:	f002 fc59 	bl	80031ca <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000918:	1d39      	adds	r1, r7, #4
 800091a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091e:	2201      	movs	r2, #1
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <__io_putchar+0x38>)
 8000922:	f002 fc52 	bl	80031ca <HAL_UART_Transmit>

	return ch;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08004408 	.word	0x08004408
 8000934:	20000154 	.word	0x20000154

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fc71 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f8b7 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 f99d 	bl	8000c84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800094a:	f000 f971 	bl	8000c30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800094e:	f000 f8f3 	bl	8000b38 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000952:	f000 f91f 	bl	8000b94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  char* str = "Enter Password";
 8000956:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <main+0x160>)
 8000958:	623b      	str	r3, [r7, #32]
  short checkStrRemoved = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  char btn_key;									// a character that user press([1~9], [A-D])
  char input_key[2] = "\0";
 800095e:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <main+0x164>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	83bb      	strh	r3, [r7, #28]
  char pw[MAX_CHAR_SIZE] = "\0";					// password that has input_numkey
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <main+0x164>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	81bb      	strh	r3, [r7, #12]
 800096a:	f107 030e 	add.w	r3, r7, #14
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	819a      	strh	r2, [r3, #12]
  short unlock = 0;								// check that if user press any buttons
 8000978:	2300      	movs	r3, #0
 800097a:	85bb      	strh	r3, [r7, #44]	; 0x2c

  char password[PW_MAX_SIZE] = "123456\0";		// door-lock password
 800097c:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <main+0x168>)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000984:	6018      	str	r0, [r3, #0]
 8000986:	3304      	adds	r3, #4
 8000988:	8019      	strh	r1, [r3, #0]
 800098a:	3302      	adds	r3, #2
 800098c:	0c0a      	lsrs	r2, r1, #16
 800098e:	701a      	strb	r2, [r3, #0]

  HD44780_Init(2);
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fdb1 	bl	80004f8 <HD44780_Init>
  HD44780_PrintStr(str);
 8000996:	6a38      	ldr	r0, [r7, #32]
 8000998:	f7ff fec5 	bl	8000726 <HD44780_PrintStr>


  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800099c:	4841      	ldr	r0, [pc, #260]	; (8000aa4 <main+0x16c>)
 800099e:	f002 f829 	bl	80029f4 <HAL_TIM_Base_Start_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <main+0x74>
  {
	  /* Starting Error */
	  Error_Handler();
 80009a8:	f000 fa52 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  short pw_idx = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (1)
  {
	  /* check corret btn_key */
	  while( (btn_key = scan_Rx()) == 255 ) ;
 80009b0:	bf00      	nop
 80009b2:	f7ff fbd5 	bl	8000160 <scan_Rx>
 80009b6:	4603      	mov	r3, r0
 80009b8:	77fb      	strb	r3, [r7, #31]
 80009ba:	7ffb      	ldrb	r3, [r7, #31]
 80009bc:	2bff      	cmp	r3, #255	; 0xff
 80009be:	d0f8      	beq.n	80009b2 <main+0x7a>

	  /* set checkStrRemoved when condition is true */
	  if((btn_key != -1) && (checkStrRemoved == 0x00) )
 80009c0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <main+0x94>
	  {
		  checkStrRemoved = 0x01;
 80009c8:	2301      	movs	r3, #1
 80009ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  }

	  /* if "Enter Password" string is removed */
	  if(checkStrRemoved == 0x01)
 80009cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d116      	bne.n	8000a02 <main+0xca>
	  {
		  HD44780_Clear();
 80009d4:	f7ff fe14 	bl	8000600 <HD44780_Clear>
		  checkStrRemoved = -1;
 80009d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		  unlock = 0x01;
 80009de:	2301      	movs	r3, #1
 80009e0:	85bb      	strh	r3, [r7, #44]	; 0x2c

		  for(int k = 0; k < 10; k++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
 80009e6:	e007      	b.n	80009f8 <main+0xc0>
		  {
			  unset_remain_time_progress(k);
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fd70 	bl	80004d2 <unset_remain_time_progress>
		  for(int k = 0; k < 10; k++)
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	3301      	adds	r3, #1
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	2b09      	cmp	r3, #9
 80009fc:	ddf4      	ble.n	80009e8 <main+0xb0>
		  }
		  set_remain_time_progress();
 80009fe:	f7ff fd51 	bl	80004a4 <set_remain_time_progress>
	  }

	  /* print keypad value into i2c lcd */
	  if(unlock)
 8000a02:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d03f      	beq.n	8000a8a <main+0x152>
	  {
		  input_key[0] = btn_key;
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	773b      	strb	r3, [r7, #28]

		  if(!strcmp(input_key, "-"))
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4925      	ldr	r1, [pc, #148]	; (8000aa8 <main+0x170>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fb99 	bl	800014c <strcmp>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d104      	bne.n	8000a2a <main+0xf2>
		  {
			  HD44780_Clear();
 8000a20:	f7ff fdee 	bl	8000600 <HD44780_Clear>
			  pw_idx = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	857b      	strh	r3, [r7, #42]	; 0x2a

			  continue;
 8000a28:	e035      	b.n	8000a96 <main+0x15e>
		  }

		  if(!strcmp(input_key, "*"))
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	491f      	ldr	r1, [pc, #124]	; (8000aac <main+0x174>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fb8b 	bl	800014c <strcmp>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <main+0x114>
		  {
			  checkPassword(pw, password);
 8000a3c:	1d3a      	adds	r2, r7, #4
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fd0b 	bl	8000460 <checkPassword>
 8000a4a:	e01e      	b.n	8000a8a <main+0x152>
		  }else
		  {
			  if(pw_idx < MAX_CHAR_SIZE)
 8000a4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	dc1a      	bgt.n	8000a8a <main+0x152>
			  {
				  pw[pw_idx] = btn_key;
 8000a54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a58:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a5c:	4413      	add	r3, r2
 8000a5e:	7ffa      	ldrb	r2, [r7, #31]
 8000a60:	f803 2c24 	strb.w	r2, [r3, #-36]
				  printf("pw_idx : %2d   key : %s\n", pw_idx, input_key);
 8000a64:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a68:	f107 021c 	add.w	r2, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <main+0x178>)
 8000a70:	f002 fd48 	bl	8003504 <iprintf>
				  HD44780_SetCursor(pw_idx, 0);
 8000a74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fdd6 	bl	800062c <HD44780_SetCursor>
				  HD44780_PrintStr(input_key);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fe4e 	bl	8000726 <HD44780_PrintStr>
			  }
		  }
	  }
	  pw_idx++;
 8000a8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	3301      	adds	r3, #1
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	857b      	strh	r3, [r7, #42]	; 0x2a
	  while( (btn_key = scan_Rx()) == 255 ) ;
 8000a96:	e78c      	b.n	80009b2 <main+0x7a>
 8000a98:	0800440c 	.word	0x0800440c
 8000a9c:	08004440 	.word	0x08004440
 8000aa0:	08004444 	.word	0x08004444
 8000aa4:	20000108 	.word	0x20000108
 8000aa8:	0800441c 	.word	0x0800441c
 8000aac:	08004420 	.word	0x08004420
 8000ab0:	08004424 	.word	0x08004424

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	; 0x40
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	2228      	movs	r2, #40	; 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fd16 	bl	80034f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fb11 	bl	800211c <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b00:	f000 f9a6 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fd7c 	bl	800261c <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b2a:	f000 f991 	bl	8000e50 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3740      	adds	r7, #64	; 0x40
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C1_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C1_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b76:	f000 fe93 	bl	80018a0 <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 f966 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000b4 	.word	0x200000b4
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <MX_TIM3_Init+0x98>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bb8:	223f      	movs	r2, #63	; 0x3f
 8000bba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd6:	4814      	ldr	r0, [pc, #80]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bd8:	f001 febc 	bl	8002954 <HAL_TIM_Base_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 f935 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bf4:	f002 f858 	bl	8002ca8 <HAL_TIM_ConfigClockSource>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 f927 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000c10:	f002 fa1e 	bl	8003050 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c1a:	f000 f919 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000108 	.word	0x20000108
 8000c2c:	40000400 	.word	0x40000400

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c68:	f002 fa62 	bl	8003130 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f8ed 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000154 	.word	0x20000154
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a4e      	ldr	r2, [pc, #312]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a42      	ldr	r2, [pc, #264]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a3c      	ldr	r2, [pc, #240]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <MX_GPIO_Init+0x154>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|R2_Pin|R3_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000cfe:	4837      	ldr	r0, [pc, #220]	; (8000ddc <MX_GPIO_Init+0x158>)
 8000d00:	f000 fd93 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0a:	4835      	ldr	r0, [pc, #212]	; (8000de0 <MX_GPIO_Init+0x15c>)
 8000d0c:	f000 fd8d 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4833      	ldr	r0, [pc, #204]	; (8000de4 <MX_GPIO_Init+0x160>)
 8000d16:	f000 fd88 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <MX_GPIO_Init+0x164>)
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <MX_GPIO_Init+0x160>)
 8000d30:	f000 fc0a 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin R2_Pin R3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|R2_Pin|R3_Pin;
 8000d34:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4823      	ldr	r0, [pc, #140]	; (8000ddc <MX_GPIO_Init+0x158>)
 8000d4e:	f000 fbfb 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 8000d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481d      	ldr	r0, [pc, #116]	; (8000de0 <MX_GPIO_Init+0x15c>)
 8000d6c:	f000 fbec 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_Pin */
  GPIO_InitStruct.Pin = R4_Pin;
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R4_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4817      	ldr	r0, [pc, #92]	; (8000de4 <MX_GPIO_Init+0x160>)
 8000d88:	f000 fbde 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480e      	ldr	r0, [pc, #56]	; (8000ddc <MX_GPIO_Init+0x158>)
 8000da2:	f000 fbd1 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin|C2_Pin;
 8000da6:	2338      	movs	r3, #56	; 0x38
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4619      	mov	r1, r3
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <MX_GPIO_Init+0x15c>)
 8000dba:	f000 fbc5 	bl	8001548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2028      	movs	r0, #40	; 0x28
 8000dc4:	f000 fb89 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc8:	2028      	movs	r0, #40	; 0x28
 8000dca:	f000 fba2 	bl	8001512 <HAL_NVIC_EnableIRQ>

}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40011000 	.word	0x40011000
 8000de8:	10110000 	.word	0x10110000

08000dec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	gTimerCnt++;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dfc:	6013      	str	r3, [r2, #0]
	if(gTimerCnt == 1000)
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e06:	d118      	bne.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		gTimerCnt = 0;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
		printf("Interrupt!!\n");
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e10:	f002 fbec 	bl	80035ec <puts>
		if(remain_time_start_idx >= 0)
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db09      	blt.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			unset_remain_time_progress(remain_time_start_idx--);
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1e5a      	subs	r2, r3, #1
 8000e22:	490a      	ldr	r1, [pc, #40]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e24:	600a      	str	r2, [r1, #0]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fb52 	bl	80004d2 <unset_remain_time_progress>
		{
			remain_time_start_idx = 9;
			set_remain_time_progress();
		}
	}
}
 8000e2e:	e004      	b.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x4e>
			remain_time_start_idx = 9;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e32:	2209      	movs	r2, #9
 8000e34:	601a      	str	r2, [r3, #0]
			set_remain_time_progress();
 8000e36:	f7ff fb35 	bl	80004a4 <set_remain_time_progress>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000150 	.word	0x20000150
 8000e48:	0800444c 	.word	0x0800444c
 8000e4c:	20000010 	.word	0x20000010

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_MspInit+0x60>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_MspInit+0x60>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_I2C_MspInit+0x90>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d132      	bne.n	8000f46 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <HAL_I2C_MspInit+0x94>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <HAL_I2C_MspInit+0x94>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_I2C_MspInit+0x94>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ef8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efe:	2312      	movs	r3, #18
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4812      	ldr	r0, [pc, #72]	; (8000f58 <HAL_I2C_MspInit+0x98>)
 8000f0e:	f000 fb1b 	bl	8001548 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_I2C_MspInit+0x9c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <HAL_I2C_MspInit+0x9c>)
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_I2C_MspInit+0x94>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_I2C_MspInit+0x94>)
 8000f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_I2C_MspInit+0x94>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40005400 	.word	0x40005400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	40010000 	.word	0x40010000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_TIM_Base_MspInit+0x44>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d113      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201d      	movs	r0, #29
 8000f90:	f000 faa3 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f94:	201d      	movs	r0, #29
 8000f96:	f000 fabc 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_UART_MspInit+0x70>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d123      	bne.n	8001014 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <HAL_UART_MspInit+0x74>)
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <HAL_UART_MspInit+0x74>)
 8000fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd6:	61d3      	str	r3, [r2, #28]
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x74>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x74>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_UART_MspInit+0x74>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_UART_MspInit+0x74>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x78>)
 8001010:	f000 fa9a 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40004400 	.word	0x40004400
 8001020:	40021000 	.word	0x40021000
 8001024:	40010800 	.word	0x40010800

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <HardFault_Handler+0x4>

0800103a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <MemManage_Handler+0x4>

08001040 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <BusFault_Handler+0x4>

08001046 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <UsageFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f91c 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM3_IRQHandler+0x10>)
 8001082:	f001 fd09 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000108 	.word	0x20000108

08001090 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001094:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001098:	f000 fbe0 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
	}

return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fc01 	bl	80008fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x12>
	}
	return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001138:	605a      	str	r2, [r3, #4]
	return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
	return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x50>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x16>
		heap_end = &end;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <_sbrk+0x50>)
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <_sbrk+0x54>)
 8001188:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <_sbrk+0x50>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <_sbrk+0x50>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	466a      	mov	r2, sp
 800119a:	4293      	cmp	r3, r2
 800119c:	d907      	bls.n	80011ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800119e:	f002 f97f 	bl	80034a0 <__errno>
 80011a2:	4602      	mov	r2, r0
 80011a4:	230c      	movs	r3, #12
 80011a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	e006      	b.n	80011bc <_sbrk+0x48>
	}

	heap_end += incr;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <_sbrk+0x50>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <_sbrk+0x50>)
 80011b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000a0 	.word	0x200000a0
 80011c8:	200001a0 	.word	0x200001a0

080011cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fe:	f7ff ffe5 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f002 f953 	bl	80034ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001206:	f7ff fb97 	bl	8000938 <main>
  bx lr
 800120a:	4770      	bx	lr
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001214:	08004524 	.word	0x08004524
  ldr r2, =_sbss
 8001218:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800121c:	200001a0 	.word	0x200001a0

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x28>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x28>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f945 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fe0c 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f95d 	bl	800152e <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 f925 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000014 	.word	0x20000014
 80012a8:	2000001c 	.word	0x2000001c
 80012ac:	20000018 	.word	0x20000018

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_IncTick+0x20>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	2000001c 	.word	0x2000001c
 80012d0:	20000198 	.word	0x20000198

080012d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000198 	.word	0x20000198

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff fff0 	bl	80012d4 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_Delay+0x40>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffe0 	bl	80012d4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000001c 	.word	0x2000001c

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4906      	ldr	r1, [pc, #24]	; (80013c4 <__NVIC_EnableIRQ+0x34>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff90 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff2d 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff42 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff90 	bl	800141c <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5f 	bl	80013c8 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff35 	bl	8001390 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	e127      	b.n	80017ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800155c:	2201      	movs	r2, #1
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 8116 	bne.w	80017a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b12      	cmp	r3, #18
 8001580:	d034      	beq.n	80015ec <HAL_GPIO_Init+0xa4>
 8001582:	2b12      	cmp	r3, #18
 8001584:	d80d      	bhi.n	80015a2 <HAL_GPIO_Init+0x5a>
 8001586:	2b02      	cmp	r3, #2
 8001588:	d02b      	beq.n	80015e2 <HAL_GPIO_Init+0x9a>
 800158a:	2b02      	cmp	r3, #2
 800158c:	d804      	bhi.n	8001598 <HAL_GPIO_Init+0x50>
 800158e:	2b00      	cmp	r3, #0
 8001590:	d031      	beq.n	80015f6 <HAL_GPIO_Init+0xae>
 8001592:	2b01      	cmp	r3, #1
 8001594:	d01c      	beq.n	80015d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001596:	e048      	b.n	800162a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001598:	2b03      	cmp	r3, #3
 800159a:	d043      	beq.n	8001624 <HAL_GPIO_Init+0xdc>
 800159c:	2b11      	cmp	r3, #17
 800159e:	d01b      	beq.n	80015d8 <HAL_GPIO_Init+0x90>
          break;
 80015a0:	e043      	b.n	800162a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015a2:	4a89      	ldr	r2, [pc, #548]	; (80017c8 <HAL_GPIO_Init+0x280>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d026      	beq.n	80015f6 <HAL_GPIO_Init+0xae>
 80015a8:	4a87      	ldr	r2, [pc, #540]	; (80017c8 <HAL_GPIO_Init+0x280>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d806      	bhi.n	80015bc <HAL_GPIO_Init+0x74>
 80015ae:	4a87      	ldr	r2, [pc, #540]	; (80017cc <HAL_GPIO_Init+0x284>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d020      	beq.n	80015f6 <HAL_GPIO_Init+0xae>
 80015b4:	4a86      	ldr	r2, [pc, #536]	; (80017d0 <HAL_GPIO_Init+0x288>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01d      	beq.n	80015f6 <HAL_GPIO_Init+0xae>
          break;
 80015ba:	e036      	b.n	800162a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015bc:	4a85      	ldr	r2, [pc, #532]	; (80017d4 <HAL_GPIO_Init+0x28c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0xae>
 80015c2:	4a85      	ldr	r2, [pc, #532]	; (80017d8 <HAL_GPIO_Init+0x290>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d016      	beq.n	80015f6 <HAL_GPIO_Init+0xae>
 80015c8:	4a84      	ldr	r2, [pc, #528]	; (80017dc <HAL_GPIO_Init+0x294>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0xae>
          break;
 80015ce:	e02c      	b.n	800162a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e028      	b.n	800162a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	3304      	adds	r3, #4
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e023      	b.n	800162a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	3308      	adds	r3, #8
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e01e      	b.n	800162a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	330c      	adds	r3, #12
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e019      	b.n	800162a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015fe:	2304      	movs	r3, #4
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e012      	b.n	800162a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	611a      	str	r2, [r3, #16]
          break;
 8001616:	e008      	b.n	800162a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	615a      	str	r2, [r3, #20]
          break;
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2bff      	cmp	r3, #255	; 0xff
 800162e:	d801      	bhi.n	8001634 <HAL_GPIO_Init+0xec>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	e001      	b.n	8001638 <HAL_GPIO_Init+0xf0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3304      	adds	r3, #4
 8001638:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2bff      	cmp	r3, #255	; 0xff
 800163e:	d802      	bhi.n	8001646 <HAL_GPIO_Init+0xfe>
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x104>
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	3b08      	subs	r3, #8
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	210f      	movs	r1, #15
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	401a      	ands	r2, r3
 800165e:	6a39      	ldr	r1, [r7, #32]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	431a      	orrs	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8096 	beq.w	80017a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800167a:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <HAL_GPIO_Init+0x298>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <HAL_GPIO_Init+0x298>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6193      	str	r3, [r2, #24]
 8001686:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <HAL_GPIO_Init+0x298>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001692:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <HAL_GPIO_Init+0x29c>)
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4b      	ldr	r2, [pc, #300]	; (80017e8 <HAL_GPIO_Init+0x2a0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x19e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <HAL_GPIO_Init+0x2a4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x19a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_GPIO_Init+0x2a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x196>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a48      	ldr	r2, [pc, #288]	; (80017f4 <HAL_GPIO_Init+0x2ac>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x192>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x1a0>
 80016da:	2304      	movs	r3, #4
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x1a0>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x1a0>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x1a0>
 80016e6:	2300      	movs	r3, #0
 80016e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f8:	493a      	ldr	r1, [pc, #232]	; (80017e4 <HAL_GPIO_Init+0x29c>)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4938      	ldr	r1, [pc, #224]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001720:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	43db      	mvns	r3, r3
 8001728:	4933      	ldr	r1, [pc, #204]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 800172a:	4013      	ands	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	492e      	ldr	r1, [pc, #184]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	43db      	mvns	r3, r3
 8001750:	4929      	ldr	r1, [pc, #164]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001752:	4013      	ands	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	4924      	ldr	r1, [pc, #144]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	43db      	mvns	r3, r3
 8001778:	491f      	ldr	r1, [pc, #124]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 800177a:	4013      	ands	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	491a      	ldr	r1, [pc, #104]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	60cb      	str	r3, [r1, #12]
 8001796:	e006      	b.n	80017a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	43db      	mvns	r3, r3
 80017a0:	4915      	ldr	r1, [pc, #84]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f aed0 	bne.w	800155c <HAL_GPIO_Init+0x14>
  }
}
 80017bc:	bf00      	nop
 80017be:	372c      	adds	r7, #44	; 0x2c
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	10210000 	.word	0x10210000
 80017cc:	10110000 	.word	0x10110000
 80017d0:	10120000 	.word	0x10120000
 80017d4:	10310000 	.word	0x10310000
 80017d8:	10320000 	.word	0x10320000
 80017dc:	10220000 	.word	0x10220000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	40010c00 	.word	0x40010c00
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40011400 	.word	0x40011400
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183a:	787b      	ldrb	r3, [r7, #1]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001840:	887a      	ldrh	r2, [r7, #2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001846:	e003      	b.n	8001850 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	611a      	str	r2, [r3, #16]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f806 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e11f      	b.n	8001af2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fafa 	bl	8000ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2224      	movs	r2, #36	; 0x24
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001904:	f000 ffe0 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4a7b      	ldr	r2, [pc, #492]	; (8001afc <HAL_I2C_Init+0x25c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d807      	bhi.n	8001924 <HAL_I2C_Init+0x84>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a7a      	ldr	r2, [pc, #488]	; (8001b00 <HAL_I2C_Init+0x260>)
 8001918:	4293      	cmp	r3, r2
 800191a:	bf94      	ite	ls
 800191c:	2301      	movls	r3, #1
 800191e:	2300      	movhi	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e006      	b.n	8001932 <HAL_I2C_Init+0x92>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a77      	ldr	r2, [pc, #476]	; (8001b04 <HAL_I2C_Init+0x264>)
 8001928:	4293      	cmp	r3, r2
 800192a:	bf94      	ite	ls
 800192c:	2301      	movls	r3, #1
 800192e:	2300      	movhi	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0db      	b.n	8001af2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4a72      	ldr	r2, [pc, #456]	; (8001b08 <HAL_I2C_Init+0x268>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a64      	ldr	r2, [pc, #400]	; (8001afc <HAL_I2C_Init+0x25c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d802      	bhi.n	8001974 <HAL_I2C_Init+0xd4>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	e009      	b.n	8001988 <HAL_I2C_Init+0xe8>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4a63      	ldr	r2, [pc, #396]	; (8001b0c <HAL_I2C_Init+0x26c>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	3301      	adds	r3, #1
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	430b      	orrs	r3, r1
 800198e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800199a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4956      	ldr	r1, [pc, #344]	; (8001afc <HAL_I2C_Init+0x25c>)
 80019a4:	428b      	cmp	r3, r1
 80019a6:	d80d      	bhi.n	80019c4 <HAL_I2C_Init+0x124>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e59      	subs	r1, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	2b04      	cmp	r3, #4
 80019be:	bf38      	it	cc
 80019c0:	2304      	movcc	r3, #4
 80019c2:	e04f      	b.n	8001a64 <HAL_I2C_Init+0x1c4>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d111      	bne.n	80019f0 <HAL_I2C_Init+0x150>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e58      	subs	r0, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	e012      	b.n	8001a16 <HAL_I2C_Init+0x176>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e58      	subs	r0, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	0099      	lsls	r1, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Init+0x17e>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e022      	b.n	8001a64 <HAL_I2C_Init+0x1c4>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10e      	bne.n	8001a44 <HAL_I2C_Init+0x1a4>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e58      	subs	r0, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6859      	ldr	r1, [r3, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	440b      	add	r3, r1
 8001a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a42:	e00f      	b.n	8001a64 <HAL_I2C_Init+0x1c4>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e58      	subs	r0, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	0099      	lsls	r1, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	6809      	ldr	r1, [r1, #0]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6911      	ldr	r1, [r2, #16]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68d2      	ldr	r2, [r2, #12]
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	000186a0 	.word	0x000186a0
 8001b00:	001e847f 	.word	0x001e847f
 8001b04:	003d08ff 	.word	0x003d08ff
 8001b08:	431bde83 	.word	0x431bde83
 8001b0c:	10624dd3 	.word	0x10624dd3

08001b10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
 8001b20:	4613      	mov	r3, r2
 8001b22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff fbd6 	bl	80012d4 <HAL_GetTick>
 8001b28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	f040 80e0 	bne.w	8001cf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2319      	movs	r3, #25
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4970      	ldr	r1, [pc, #448]	; (8001d04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f964 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e0d3      	b.n	8001cfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_I2C_Master_Transmit+0x50>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e0cc      	b.n	8001cfa <HAL_I2C_Master_Transmit+0x1ea>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d007      	beq.n	8001b86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2221      	movs	r2, #33	; 0x21
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	893a      	ldrh	r2, [r7, #8]
 8001bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4a50      	ldr	r2, [pc, #320]	; (8001d08 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bc8:	8979      	ldrh	r1, [r7, #10]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	6a3a      	ldr	r2, [r7, #32]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f89c 	bl	8001d0c <I2C_MasterRequestWrite>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08d      	b.n	8001cfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bf4:	e066      	b.n	8001cc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	6a39      	ldr	r1, [r7, #32]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f9de 	bl	8001fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d107      	bne.n	8001c1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e06b      	b.n	8001cfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d11b      	bne.n	8001c98 <HAL_I2C_Master_Transmit+0x188>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d017      	beq.n	8001c98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	6a39      	ldr	r1, [r7, #32]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f9ce 	bl	800203e <I2C_WaitOnBTFFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d107      	bne.n	8001cc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e01a      	b.n	8001cfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d194      	bne.n	8001bf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	00100002 	.word	0x00100002
 8001d08:	ffff0000 	.word	0xffff0000

08001d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d006      	beq.n	8001d36 <I2C_MasterRequestWrite+0x2a>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d003      	beq.n	8001d36 <I2C_MasterRequestWrite+0x2a>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d34:	d108      	bne.n	8001d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e00b      	b.n	8001d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	2b12      	cmp	r3, #18
 8001d4e:	d107      	bne.n	8001d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f84f 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d86:	d103      	bne.n	8001d90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e035      	b.n	8001e00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d9c:	d108      	bne.n	8001db0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d9e:	897b      	ldrh	r3, [r7, #10]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	e01b      	b.n	8001de8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001db0:	897b      	ldrh	r3, [r7, #10]
 8001db2:	11db      	asrs	r3, r3, #7
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f003 0306 	and.w	r3, r3, #6
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f063 030f 	orn	r3, r3, #15
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	490e      	ldr	r1, [pc, #56]	; (8001e08 <I2C_MasterRequestWrite+0xfc>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f875 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e010      	b.n	8001e00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dde:	897b      	ldrh	r3, [r7, #10]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <I2C_MasterRequestWrite+0x100>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f865 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	00010008 	.word	0x00010008
 8001e0c:	00010002 	.word	0x00010002

08001e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e20:	e025      	b.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d021      	beq.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2a:	f7ff fa53 	bl	80012d4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d302      	bcc.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d116      	bne.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e023      	b.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10d      	bne.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	e00c      	b.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d0b6      	beq.n	8001e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ecc:	e051      	b.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001edc:	d123      	bne.n	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ef6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e046      	b.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d021      	beq.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff f9d1 	bl	80012d4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d116      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e020      	b.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4013      	ands	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	e00b      	b.n	8001fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d18d      	bne.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fc8:	e02d      	b.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f878 	bl	80020c0 <I2C_IsAcknowledgeFailed>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02d      	b.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d021      	beq.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f977 	bl	80012d4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d116      	bne.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e007      	b.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d1ca      	bne.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800204a:	e02d      	b.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f837 	bl	80020c0 <I2C_IsAcknowledgeFailed>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e02d      	b.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d021      	beq.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002064:	f7ff f936 	bl	80012d4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	429a      	cmp	r2, r3
 8002072:	d302      	bcc.n	800207a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d116      	bne.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e007      	b.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d1ca      	bne.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d11b      	bne.n	8002110 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0204 	orr.w	r2, r3, #4
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e26c      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002148:	4b8f      	ldr	r3, [pc, #572]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
 8002154:	4b8c      	ldr	r3, [pc, #560]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x12c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e246      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x76>
 8002184:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7f      	ldr	r2, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7a      	ldr	r2, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b78      	ldr	r3, [pc, #480]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xbc>
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a71      	ldr	r2, [pc, #452]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6e      	ldr	r2, [pc, #440]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff f86c 	bl	80012d4 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff f868 	bl	80012d4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1fa      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe4>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff f858 	bl	80012d4 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff f854 	bl	80012d4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1e6      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x10c>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
 800226e:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1ba      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4939      	ldr	r1, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff f80d 	bl	80012d4 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff f809 	bl	80012d4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e19b      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4927      	ldr	r1, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe ffec 	bl	80012d4 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe ffe8 	bl	80012d4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e17a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03a      	beq.n	80023a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7fe ffcc 	bl	80012d4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7fe ffc8 	bl	80012d4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e15a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f000 fada 	bl	8002918 <RCC_Delay>
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7fe ffb2 	bl	80012d4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7fe ffae 	bl	80012d4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d908      	bls.n	8002394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e140      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	42420000 	.word	0x42420000
 8002390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b9e      	ldr	r3, [pc, #632]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e9      	bne.n	8002374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a6 	beq.w	80024fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b97      	ldr	r3, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a93      	ldr	r2, [pc, #588]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b8e      	ldr	r3, [pc, #568]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b8b      	ldr	r3, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe ff6f 	bl	80012d4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7fe ff6b 	bl	80012d4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0fd      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x312>
 8002420:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a7a      	ldr	r2, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x334>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x356>
 8002458:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a69      	ldr	r2, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002472:	4b67      	ldr	r3, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a66      	ldr	r2, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b64      	ldr	r3, [pc, #400]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a63      	ldr	r2, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe ff1f 	bl	80012d4 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe ff1b 	bl	80012d4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ab      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b57      	ldr	r3, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x37e>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe ff09 	bl	80012d4 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe ff05 	bl	80012d4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e095      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8081 	beq.w	8002606 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d061      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d146      	bne.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7fe fed9 	bl	80012d4 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fed5 	bl	80012d4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e067      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	492d      	ldr	r1, [pc, #180]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a19      	ldr	r1, [r3, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	430b      	orrs	r3, r1
 8002572:	4927      	ldr	r1, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fea9 	bl	80012d4 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fea5 	bl	80012d4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e037      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x46a>
 80025a4:	e02f      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fe92 	bl	80012d4 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fe8e 	bl	80012d4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e020      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x498>
 80025d2:	e018      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e013      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	40007000 	.word	0x40007000
 8002618:	42420060 	.word	0x42420060

0800261c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d0      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800269a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d040      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d115      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e073      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4936      	ldr	r1, [pc, #216]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fde2 	bl	80012d4 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe fdde 	bl	80012d4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e053      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d210      	bcs.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4601      	mov	r1, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	fa21 f303 	lsr.w	r3, r1, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1cc>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fd40 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	0800446c 	.word	0x0800446c
 80027e8:	20000014 	.word	0x20000014
 80027ec:	20000018 	.word	0x20000018

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b490      	push	{r4, r7}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027f8:	1d3c      	adds	r4, r7, #4
 80027fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x40>
 800282a:	2b08      	cmp	r3, #8
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x46>
 800282e:	e02d      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002832:	623b      	str	r3, [r7, #32]
      break;
 8002834:	e02d      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002842:	4413      	add	r3, r2
 8002844:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002848:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	0c5b      	lsrs	r3, r3, #17
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002862:	4413      	add	r3, r2
 8002864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800286e:	fb02 f203 	mul.w	r2, r2, r3
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
 800287a:	e004      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	623b      	str	r3, [r7, #32]
      break;
 800288a:	e002      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800288e:	623b      	str	r3, [r7, #32]
      break;
 8002890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002892:	6a3b      	ldr	r3, [r7, #32]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bc90      	pop	{r4, r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	08004458 	.word	0x08004458
 80028a4:	08004468 	.word	0x08004468
 80028a8:	40021000 	.word	0x40021000
 80028ac:	007a1200 	.word	0x007a1200
 80028b0:	003d0900 	.word	0x003d0900

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000014 	.word	0x20000014

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028cc:	f7ff fff2 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d0:	4601      	mov	r1, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4a03      	ldr	r2, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	0800447c 	.word	0x0800447c

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f4:	f7ff ffde 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028f8:	4601      	mov	r1, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0adb      	lsrs	r3, r3, #11
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	0800447c 	.word	0x0800447c

08002918 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <RCC_Delay+0x34>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <RCC_Delay+0x38>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0a5b      	lsrs	r3, r3, #9
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002934:	bf00      	nop
  }
  while (Delay --);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f9      	bne.n	8002934 <RCC_Delay+0x1c>
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000014 	.word	0x20000014
 8002950:	10624dd3 	.word	0x10624dd3

08002954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e041      	b.n	80029ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe faf0 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 fa64 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d001      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e03a      	b.n	8002a82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIM_Base_Start_IT+0x98>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x58>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d009      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x58>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x58>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d111      	bne.n	8002a70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d010      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	e007      	b.n	8002a80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0202 	mvn.w	r2, #2
 8002ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f9a4 	bl	8002e28 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f997 	bl	8002e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f9a6 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0204 	mvn.w	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f97a 	bl	8002e28 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f96d 	bl	8002e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f97c 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f950 	bl	8002e28 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f943 	bl	8002e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f952 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f926 	bl	8002e28 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f919 	bl	8002e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f928 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0201 	mvn.w	r2, #1
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe f8e8 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa6b 	bl	800311e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8ec 	bl	8002e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0220 	mvn.w	r2, #32
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa36 	bl	800310c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x18>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0a6      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x166>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d067      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x120>
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d80b      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x6c>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d073      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0x140>
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d802      	bhi.n	8002d0a <HAL_TIM_ConfigClockSource+0x62>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d06f      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d08:	e078      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d06c      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0x140>
 8002d0e:	2b30      	cmp	r3, #48	; 0x30
 8002d10:	d06a      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d12:	e073      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d14:	2b70      	cmp	r3, #112	; 0x70
 8002d16:	d00d      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0x8c>
 8002d18:	2b70      	cmp	r3, #112	; 0x70
 8002d1a:	d804      	bhi.n	8002d26 <HAL_TIM_ConfigClockSource+0x7e>
 8002d1c:	2b50      	cmp	r3, #80	; 0x50
 8002d1e:	d033      	beq.n	8002d88 <HAL_TIM_ConfigClockSource+0xe0>
 8002d20:	2b60      	cmp	r3, #96	; 0x60
 8002d22:	d041      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d24:	e06a      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d066      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x152>
 8002d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d30:	d017      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d32:	e063      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f000 f965 	bl	8003012 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]
      break;
 8002d60:	e04c      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f000 f94e 	bl	8003012 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d84:	609a      	str	r2, [r3, #8]
      break;
 8002d86:	e039      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f000 f8c5 	bl	8002f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2150      	movs	r1, #80	; 0x50
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 f91c 	bl	8002fde <TIM_ITRx_SetConfig>
      break;
 8002da6:	e029      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	461a      	mov	r2, r3
 8002db6:	f000 f8e3 	bl	8002f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2160      	movs	r1, #96	; 0x60
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f90c 	bl	8002fde <TIM_ITRx_SetConfig>
      break;
 8002dc6:	e019      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f000 f8a5 	bl	8002f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2140      	movs	r1, #64	; 0x40
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f8fc 	bl	8002fde <TIM_ITRx_SetConfig>
      break;
 8002de6:	e009      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f000 f8f3 	bl	8002fde <TIM_ITRx_SetConfig>
        break;
 8002df8:	e000      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
	...

08002e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <TIM_Base_SetConfig+0xb8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <TIM_Base_SetConfig+0x30>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7e:	d007      	beq.n	8002e90 <TIM_Base_SetConfig+0x30>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <TIM_Base_SetConfig+0xbc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0x30>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <TIM_Base_SetConfig+0xc0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d108      	bne.n	8002ea2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <TIM_Base_SetConfig+0xb8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <TIM_Base_SetConfig+0x62>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb0:	d007      	beq.n	8002ec2 <TIM_Base_SetConfig+0x62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <TIM_Base_SetConfig+0xbc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d003      	beq.n	8002ec2 <TIM_Base_SetConfig+0x62>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <TIM_Base_SetConfig+0xc0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <TIM_Base_SetConfig+0xb8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d103      	bne.n	8002f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	615a      	str	r2, [r3, #20]
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800

08002f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0201 	bic.w	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 030a 	bic.w	r3, r3, #10
 8002f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	621a      	str	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 0210 	bic.w	r2, r3, #16
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	031b      	lsls	r3, r3, #12
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	621a      	str	r2, [r3, #32]
}
 8002fd4:	bf00      	nop
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f043 0307 	orr.w	r3, r3, #7
 8003000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	609a      	str	r2, [r3, #8]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003012:	b480      	push	{r7}
 8003014:	b087      	sub	sp, #28
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800302c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	021a      	lsls	r2, r3, #8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	431a      	orrs	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4313      	orrs	r3, r2
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	609a      	str	r2, [r3, #8]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003064:	2302      	movs	r3, #2
 8003066:	e046      	b.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d009      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10c      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800

0800310c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e03f      	b.n	80031c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd ff28 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f905 	bl	8003384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b08a      	sub	sp, #40	; 0x28
 80031ce:	af02      	add	r7, sp, #8
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d17c      	bne.n	80032e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_UART_Transmit+0x2c>
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e075      	b.n	80032e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_UART_Transmit+0x3e>
 8003204:	2302      	movs	r3, #2
 8003206:	e06e      	b.n	80032e6 <HAL_UART_Transmit+0x11c>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2221      	movs	r2, #33	; 0x21
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800321e:	f7fe f859 	bl	80012d4 <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003238:	d108      	bne.n	800324c <HAL_UART_Transmit+0x82>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	e003      	b.n	8003254 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003250:	2300      	movs	r3, #0
 8003252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800325c:	e02a      	b.n	80032b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f840 	bl	80032ee <UART_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e036      	b.n	80032e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10b      	bne.n	8003296 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800328c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	3302      	adds	r3, #2
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	e007      	b.n	80032a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3301      	adds	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1cf      	bne.n	800325e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	2140      	movs	r1, #64	; 0x40
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f810 	bl	80032ee <UART_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e006      	b.n	80032e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fe:	e02c      	b.n	800335a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d028      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x30>
 800330e:	f7fd ffe1 	bl	80012d4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	429a      	cmp	r2, r3
 800331c:	d21d      	bcs.n	800335a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800332c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e00f      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	429a      	cmp	r2, r3
 8003376:	d0c3      	beq.n	8003300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033be:	f023 030c 	bic.w	r3, r3, #12
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	430b      	orrs	r3, r1
 80033ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2c      	ldr	r2, [pc, #176]	; (8003498 <UART_SetConfig+0x114>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d103      	bne.n	80033f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033ec:	f7ff fa80 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	e002      	b.n	80033fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7ff fa68 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 80033f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	4a22      	ldr	r2, [pc, #136]	; (800349c <UART_SetConfig+0x118>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	0119      	lsls	r1, r3, #4
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <UART_SetConfig+0x118>)
 8003432:	fba3 0302 	umull	r0, r3, r3, r2
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2064      	movs	r0, #100	; 0x64
 800343a:	fb00 f303 	mul.w	r3, r0, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	3332      	adds	r3, #50	; 0x32
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <UART_SetConfig+0x118>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003450:	4419      	add	r1, r3
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009a      	lsls	r2, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fbb2 f2f3 	udiv	r2, r2, r3
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <UART_SetConfig+0x118>)
 800346a:	fba3 0302 	umull	r0, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2064      	movs	r0, #100	; 0x64
 8003472:	fb00 f303 	mul.w	r3, r0, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	3332      	adds	r3, #50	; 0x32
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <UART_SetConfig+0x118>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	f003 020f 	and.w	r2, r3, #15
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	440a      	add	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40013800 	.word	0x40013800
 800349c:	51eb851f 	.word	0x51eb851f

080034a0 <__errno>:
 80034a0:	4b01      	ldr	r3, [pc, #4]	; (80034a8 <__errno+0x8>)
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000020 	.word	0x20000020

080034ac <__libc_init_array>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2500      	movs	r5, #0
 80034b0:	4e0c      	ldr	r6, [pc, #48]	; (80034e4 <__libc_init_array+0x38>)
 80034b2:	4c0d      	ldr	r4, [pc, #52]	; (80034e8 <__libc_init_array+0x3c>)
 80034b4:	1ba4      	subs	r4, r4, r6
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	42a5      	cmp	r5, r4
 80034ba:	d109      	bne.n	80034d0 <__libc_init_array+0x24>
 80034bc:	f000 ff74 	bl	80043a8 <_init>
 80034c0:	2500      	movs	r5, #0
 80034c2:	4e0a      	ldr	r6, [pc, #40]	; (80034ec <__libc_init_array+0x40>)
 80034c4:	4c0a      	ldr	r4, [pc, #40]	; (80034f0 <__libc_init_array+0x44>)
 80034c6:	1ba4      	subs	r4, r4, r6
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	42a5      	cmp	r5, r4
 80034cc:	d105      	bne.n	80034da <__libc_init_array+0x2e>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034d4:	4798      	blx	r3
 80034d6:	3501      	adds	r5, #1
 80034d8:	e7ee      	b.n	80034b8 <__libc_init_array+0xc>
 80034da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034de:	4798      	blx	r3
 80034e0:	3501      	adds	r5, #1
 80034e2:	e7f2      	b.n	80034ca <__libc_init_array+0x1e>
 80034e4:	0800451c 	.word	0x0800451c
 80034e8:	0800451c 	.word	0x0800451c
 80034ec:	0800451c 	.word	0x0800451c
 80034f0:	08004520 	.word	0x08004520

080034f4 <memset>:
 80034f4:	4603      	mov	r3, r0
 80034f6:	4402      	add	r2, r0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d100      	bne.n	80034fe <memset+0xa>
 80034fc:	4770      	bx	lr
 80034fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003502:	e7f9      	b.n	80034f8 <memset+0x4>

08003504 <iprintf>:
 8003504:	b40f      	push	{r0, r1, r2, r3}
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <iprintf+0x2c>)
 8003508:	b513      	push	{r0, r1, r4, lr}
 800350a:	681c      	ldr	r4, [r3, #0]
 800350c:	b124      	cbz	r4, 8003518 <iprintf+0x14>
 800350e:	69a3      	ldr	r3, [r4, #24]
 8003510:	b913      	cbnz	r3, 8003518 <iprintf+0x14>
 8003512:	4620      	mov	r0, r4
 8003514:	f000 fa22 	bl	800395c <__sinit>
 8003518:	ab05      	add	r3, sp, #20
 800351a:	9a04      	ldr	r2, [sp, #16]
 800351c:	68a1      	ldr	r1, [r4, #8]
 800351e:	4620      	mov	r0, r4
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	f000 fbd7 	bl	8003cd4 <_vfiprintf_r>
 8003526:	b002      	add	sp, #8
 8003528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800352c:	b004      	add	sp, #16
 800352e:	4770      	bx	lr
 8003530:	20000020 	.word	0x20000020

08003534 <_puts_r>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	460e      	mov	r6, r1
 8003538:	4605      	mov	r5, r0
 800353a:	b118      	cbz	r0, 8003544 <_puts_r+0x10>
 800353c:	6983      	ldr	r3, [r0, #24]
 800353e:	b90b      	cbnz	r3, 8003544 <_puts_r+0x10>
 8003540:	f000 fa0c 	bl	800395c <__sinit>
 8003544:	69ab      	ldr	r3, [r5, #24]
 8003546:	68ac      	ldr	r4, [r5, #8]
 8003548:	b913      	cbnz	r3, 8003550 <_puts_r+0x1c>
 800354a:	4628      	mov	r0, r5
 800354c:	f000 fa06 	bl	800395c <__sinit>
 8003550:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <_puts_r+0xac>)
 8003552:	429c      	cmp	r4, r3
 8003554:	d117      	bne.n	8003586 <_puts_r+0x52>
 8003556:	686c      	ldr	r4, [r5, #4]
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	071b      	lsls	r3, r3, #28
 800355c:	d51d      	bpl.n	800359a <_puts_r+0x66>
 800355e:	6923      	ldr	r3, [r4, #16]
 8003560:	b1db      	cbz	r3, 800359a <_puts_r+0x66>
 8003562:	3e01      	subs	r6, #1
 8003564:	68a3      	ldr	r3, [r4, #8]
 8003566:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800356a:	3b01      	subs	r3, #1
 800356c:	60a3      	str	r3, [r4, #8]
 800356e:	b9e9      	cbnz	r1, 80035ac <_puts_r+0x78>
 8003570:	2b00      	cmp	r3, #0
 8003572:	da2e      	bge.n	80035d2 <_puts_r+0x9e>
 8003574:	4622      	mov	r2, r4
 8003576:	210a      	movs	r1, #10
 8003578:	4628      	mov	r0, r5
 800357a:	f000 f83f 	bl	80035fc <__swbuf_r>
 800357e:	3001      	adds	r0, #1
 8003580:	d011      	beq.n	80035a6 <_puts_r+0x72>
 8003582:	200a      	movs	r0, #10
 8003584:	e011      	b.n	80035aa <_puts_r+0x76>
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <_puts_r+0xb0>)
 8003588:	429c      	cmp	r4, r3
 800358a:	d101      	bne.n	8003590 <_puts_r+0x5c>
 800358c:	68ac      	ldr	r4, [r5, #8]
 800358e:	e7e3      	b.n	8003558 <_puts_r+0x24>
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <_puts_r+0xb4>)
 8003592:	429c      	cmp	r4, r3
 8003594:	bf08      	it	eq
 8003596:	68ec      	ldreq	r4, [r5, #12]
 8003598:	e7de      	b.n	8003558 <_puts_r+0x24>
 800359a:	4621      	mov	r1, r4
 800359c:	4628      	mov	r0, r5
 800359e:	f000 f87f 	bl	80036a0 <__swsetup_r>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d0dd      	beq.n	8003562 <_puts_r+0x2e>
 80035a6:	f04f 30ff 	mov.w	r0, #4294967295
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da04      	bge.n	80035ba <_puts_r+0x86>
 80035b0:	69a2      	ldr	r2, [r4, #24]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	dc06      	bgt.n	80035c4 <_puts_r+0x90>
 80035b6:	290a      	cmp	r1, #10
 80035b8:	d004      	beq.n	80035c4 <_puts_r+0x90>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	6022      	str	r2, [r4, #0]
 80035c0:	7019      	strb	r1, [r3, #0]
 80035c2:	e7cf      	b.n	8003564 <_puts_r+0x30>
 80035c4:	4622      	mov	r2, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 f818 	bl	80035fc <__swbuf_r>
 80035cc:	3001      	adds	r0, #1
 80035ce:	d1c9      	bne.n	8003564 <_puts_r+0x30>
 80035d0:	e7e9      	b.n	80035a6 <_puts_r+0x72>
 80035d2:	200a      	movs	r0, #10
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	6022      	str	r2, [r4, #0]
 80035da:	7018      	strb	r0, [r3, #0]
 80035dc:	e7e5      	b.n	80035aa <_puts_r+0x76>
 80035de:	bf00      	nop
 80035e0:	080044a8 	.word	0x080044a8
 80035e4:	080044c8 	.word	0x080044c8
 80035e8:	08004488 	.word	0x08004488

080035ec <puts>:
 80035ec:	4b02      	ldr	r3, [pc, #8]	; (80035f8 <puts+0xc>)
 80035ee:	4601      	mov	r1, r0
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	f7ff bf9f 	b.w	8003534 <_puts_r>
 80035f6:	bf00      	nop
 80035f8:	20000020 	.word	0x20000020

080035fc <__swbuf_r>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	460e      	mov	r6, r1
 8003600:	4614      	mov	r4, r2
 8003602:	4605      	mov	r5, r0
 8003604:	b118      	cbz	r0, 800360e <__swbuf_r+0x12>
 8003606:	6983      	ldr	r3, [r0, #24]
 8003608:	b90b      	cbnz	r3, 800360e <__swbuf_r+0x12>
 800360a:	f000 f9a7 	bl	800395c <__sinit>
 800360e:	4b21      	ldr	r3, [pc, #132]	; (8003694 <__swbuf_r+0x98>)
 8003610:	429c      	cmp	r4, r3
 8003612:	d12a      	bne.n	800366a <__swbuf_r+0x6e>
 8003614:	686c      	ldr	r4, [r5, #4]
 8003616:	69a3      	ldr	r3, [r4, #24]
 8003618:	60a3      	str	r3, [r4, #8]
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	071a      	lsls	r2, r3, #28
 800361e:	d52e      	bpl.n	800367e <__swbuf_r+0x82>
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	b363      	cbz	r3, 800367e <__swbuf_r+0x82>
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	b2f6      	uxtb	r6, r6
 800362a:	1ac0      	subs	r0, r0, r3
 800362c:	6963      	ldr	r3, [r4, #20]
 800362e:	4637      	mov	r7, r6
 8003630:	4283      	cmp	r3, r0
 8003632:	dc04      	bgt.n	800363e <__swbuf_r+0x42>
 8003634:	4621      	mov	r1, r4
 8003636:	4628      	mov	r0, r5
 8003638:	f000 f926 	bl	8003888 <_fflush_r>
 800363c:	bb28      	cbnz	r0, 800368a <__swbuf_r+0x8e>
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	3001      	adds	r0, #1
 8003642:	3b01      	subs	r3, #1
 8003644:	60a3      	str	r3, [r4, #8]
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	6022      	str	r2, [r4, #0]
 800364c:	701e      	strb	r6, [r3, #0]
 800364e:	6963      	ldr	r3, [r4, #20]
 8003650:	4283      	cmp	r3, r0
 8003652:	d004      	beq.n	800365e <__swbuf_r+0x62>
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	07db      	lsls	r3, r3, #31
 8003658:	d519      	bpl.n	800368e <__swbuf_r+0x92>
 800365a:	2e0a      	cmp	r6, #10
 800365c:	d117      	bne.n	800368e <__swbuf_r+0x92>
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 f911 	bl	8003888 <_fflush_r>
 8003666:	b190      	cbz	r0, 800368e <__swbuf_r+0x92>
 8003668:	e00f      	b.n	800368a <__swbuf_r+0x8e>
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <__swbuf_r+0x9c>)
 800366c:	429c      	cmp	r4, r3
 800366e:	d101      	bne.n	8003674 <__swbuf_r+0x78>
 8003670:	68ac      	ldr	r4, [r5, #8]
 8003672:	e7d0      	b.n	8003616 <__swbuf_r+0x1a>
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <__swbuf_r+0xa0>)
 8003676:	429c      	cmp	r4, r3
 8003678:	bf08      	it	eq
 800367a:	68ec      	ldreq	r4, [r5, #12]
 800367c:	e7cb      	b.n	8003616 <__swbuf_r+0x1a>
 800367e:	4621      	mov	r1, r4
 8003680:	4628      	mov	r0, r5
 8003682:	f000 f80d 	bl	80036a0 <__swsetup_r>
 8003686:	2800      	cmp	r0, #0
 8003688:	d0cc      	beq.n	8003624 <__swbuf_r+0x28>
 800368a:	f04f 37ff 	mov.w	r7, #4294967295
 800368e:	4638      	mov	r0, r7
 8003690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003692:	bf00      	nop
 8003694:	080044a8 	.word	0x080044a8
 8003698:	080044c8 	.word	0x080044c8
 800369c:	08004488 	.word	0x08004488

080036a0 <__swsetup_r>:
 80036a0:	4b32      	ldr	r3, [pc, #200]	; (800376c <__swsetup_r+0xcc>)
 80036a2:	b570      	push	{r4, r5, r6, lr}
 80036a4:	681d      	ldr	r5, [r3, #0]
 80036a6:	4606      	mov	r6, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	b125      	cbz	r5, 80036b6 <__swsetup_r+0x16>
 80036ac:	69ab      	ldr	r3, [r5, #24]
 80036ae:	b913      	cbnz	r3, 80036b6 <__swsetup_r+0x16>
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 f953 	bl	800395c <__sinit>
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <__swsetup_r+0xd0>)
 80036b8:	429c      	cmp	r4, r3
 80036ba:	d10f      	bne.n	80036dc <__swsetup_r+0x3c>
 80036bc:	686c      	ldr	r4, [r5, #4]
 80036be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	0715      	lsls	r5, r2, #28
 80036c6:	d42c      	bmi.n	8003722 <__swsetup_r+0x82>
 80036c8:	06d0      	lsls	r0, r2, #27
 80036ca:	d411      	bmi.n	80036f0 <__swsetup_r+0x50>
 80036cc:	2209      	movs	r2, #9
 80036ce:	6032      	str	r2, [r6, #0]
 80036d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295
 80036da:	e03e      	b.n	800375a <__swsetup_r+0xba>
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <__swsetup_r+0xd4>)
 80036de:	429c      	cmp	r4, r3
 80036e0:	d101      	bne.n	80036e6 <__swsetup_r+0x46>
 80036e2:	68ac      	ldr	r4, [r5, #8]
 80036e4:	e7eb      	b.n	80036be <__swsetup_r+0x1e>
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <__swsetup_r+0xd8>)
 80036e8:	429c      	cmp	r4, r3
 80036ea:	bf08      	it	eq
 80036ec:	68ec      	ldreq	r4, [r5, #12]
 80036ee:	e7e6      	b.n	80036be <__swsetup_r+0x1e>
 80036f0:	0751      	lsls	r1, r2, #29
 80036f2:	d512      	bpl.n	800371a <__swsetup_r+0x7a>
 80036f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036f6:	b141      	cbz	r1, 800370a <__swsetup_r+0x6a>
 80036f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036fc:	4299      	cmp	r1, r3
 80036fe:	d002      	beq.n	8003706 <__swsetup_r+0x66>
 8003700:	4630      	mov	r0, r6
 8003702:	f000 fa19 	bl	8003b38 <_free_r>
 8003706:	2300      	movs	r3, #0
 8003708:	6363      	str	r3, [r4, #52]	; 0x34
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003710:	81a3      	strh	r3, [r4, #12]
 8003712:	2300      	movs	r3, #0
 8003714:	6063      	str	r3, [r4, #4]
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	81a3      	strh	r3, [r4, #12]
 8003722:	6923      	ldr	r3, [r4, #16]
 8003724:	b94b      	cbnz	r3, 800373a <__swsetup_r+0x9a>
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800372c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003730:	d003      	beq.n	800373a <__swsetup_r+0x9a>
 8003732:	4621      	mov	r1, r4
 8003734:	4630      	mov	r0, r6
 8003736:	f000 f9bf 	bl	8003ab8 <__smakebuf_r>
 800373a:	89a2      	ldrh	r2, [r4, #12]
 800373c:	f012 0301 	ands.w	r3, r2, #1
 8003740:	d00c      	beq.n	800375c <__swsetup_r+0xbc>
 8003742:	2300      	movs	r3, #0
 8003744:	60a3      	str	r3, [r4, #8]
 8003746:	6963      	ldr	r3, [r4, #20]
 8003748:	425b      	negs	r3, r3
 800374a:	61a3      	str	r3, [r4, #24]
 800374c:	6923      	ldr	r3, [r4, #16]
 800374e:	b953      	cbnz	r3, 8003766 <__swsetup_r+0xc6>
 8003750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003754:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003758:	d1ba      	bne.n	80036d0 <__swsetup_r+0x30>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	0792      	lsls	r2, r2, #30
 800375e:	bf58      	it	pl
 8003760:	6963      	ldrpl	r3, [r4, #20]
 8003762:	60a3      	str	r3, [r4, #8]
 8003764:	e7f2      	b.n	800374c <__swsetup_r+0xac>
 8003766:	2000      	movs	r0, #0
 8003768:	e7f7      	b.n	800375a <__swsetup_r+0xba>
 800376a:	bf00      	nop
 800376c:	20000020 	.word	0x20000020
 8003770:	080044a8 	.word	0x080044a8
 8003774:	080044c8 	.word	0x080044c8
 8003778:	08004488 	.word	0x08004488

0800377c <__sflush_r>:
 800377c:	898a      	ldrh	r2, [r1, #12]
 800377e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003782:	4605      	mov	r5, r0
 8003784:	0710      	lsls	r0, r2, #28
 8003786:	460c      	mov	r4, r1
 8003788:	d458      	bmi.n	800383c <__sflush_r+0xc0>
 800378a:	684b      	ldr	r3, [r1, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	dc05      	bgt.n	800379c <__sflush_r+0x20>
 8003790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	dc02      	bgt.n	800379c <__sflush_r+0x20>
 8003796:	2000      	movs	r0, #0
 8003798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800379c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800379e:	2e00      	cmp	r6, #0
 80037a0:	d0f9      	beq.n	8003796 <__sflush_r+0x1a>
 80037a2:	2300      	movs	r3, #0
 80037a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037a8:	682f      	ldr	r7, [r5, #0]
 80037aa:	6a21      	ldr	r1, [r4, #32]
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	d032      	beq.n	8003816 <__sflush_r+0x9a>
 80037b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	075a      	lsls	r2, r3, #29
 80037b6:	d505      	bpl.n	80037c4 <__sflush_r+0x48>
 80037b8:	6863      	ldr	r3, [r4, #4]
 80037ba:	1ac0      	subs	r0, r0, r3
 80037bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037be:	b10b      	cbz	r3, 80037c4 <__sflush_r+0x48>
 80037c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037c2:	1ac0      	subs	r0, r0, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	4602      	mov	r2, r0
 80037c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ca:	6a21      	ldr	r1, [r4, #32]
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b0      	blx	r6
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	d106      	bne.n	80037e4 <__sflush_r+0x68>
 80037d6:	6829      	ldr	r1, [r5, #0]
 80037d8:	291d      	cmp	r1, #29
 80037da:	d848      	bhi.n	800386e <__sflush_r+0xf2>
 80037dc:	4a29      	ldr	r2, [pc, #164]	; (8003884 <__sflush_r+0x108>)
 80037de:	40ca      	lsrs	r2, r1
 80037e0:	07d6      	lsls	r6, r2, #31
 80037e2:	d544      	bpl.n	800386e <__sflush_r+0xf2>
 80037e4:	2200      	movs	r2, #0
 80037e6:	6062      	str	r2, [r4, #4]
 80037e8:	6922      	ldr	r2, [r4, #16]
 80037ea:	04d9      	lsls	r1, r3, #19
 80037ec:	6022      	str	r2, [r4, #0]
 80037ee:	d504      	bpl.n	80037fa <__sflush_r+0x7e>
 80037f0:	1c42      	adds	r2, r0, #1
 80037f2:	d101      	bne.n	80037f8 <__sflush_r+0x7c>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b903      	cbnz	r3, 80037fa <__sflush_r+0x7e>
 80037f8:	6560      	str	r0, [r4, #84]	; 0x54
 80037fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037fc:	602f      	str	r7, [r5, #0]
 80037fe:	2900      	cmp	r1, #0
 8003800:	d0c9      	beq.n	8003796 <__sflush_r+0x1a>
 8003802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003806:	4299      	cmp	r1, r3
 8003808:	d002      	beq.n	8003810 <__sflush_r+0x94>
 800380a:	4628      	mov	r0, r5
 800380c:	f000 f994 	bl	8003b38 <_free_r>
 8003810:	2000      	movs	r0, #0
 8003812:	6360      	str	r0, [r4, #52]	; 0x34
 8003814:	e7c0      	b.n	8003798 <__sflush_r+0x1c>
 8003816:	2301      	movs	r3, #1
 8003818:	4628      	mov	r0, r5
 800381a:	47b0      	blx	r6
 800381c:	1c41      	adds	r1, r0, #1
 800381e:	d1c8      	bne.n	80037b2 <__sflush_r+0x36>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0c5      	beq.n	80037b2 <__sflush_r+0x36>
 8003826:	2b1d      	cmp	r3, #29
 8003828:	d001      	beq.n	800382e <__sflush_r+0xb2>
 800382a:	2b16      	cmp	r3, #22
 800382c:	d101      	bne.n	8003832 <__sflush_r+0xb6>
 800382e:	602f      	str	r7, [r5, #0]
 8003830:	e7b1      	b.n	8003796 <__sflush_r+0x1a>
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	e7ad      	b.n	8003798 <__sflush_r+0x1c>
 800383c:	690f      	ldr	r7, [r1, #16]
 800383e:	2f00      	cmp	r7, #0
 8003840:	d0a9      	beq.n	8003796 <__sflush_r+0x1a>
 8003842:	0793      	lsls	r3, r2, #30
 8003844:	bf18      	it	ne
 8003846:	2300      	movne	r3, #0
 8003848:	680e      	ldr	r6, [r1, #0]
 800384a:	bf08      	it	eq
 800384c:	694b      	ldreq	r3, [r1, #20]
 800384e:	eba6 0807 	sub.w	r8, r6, r7
 8003852:	600f      	str	r7, [r1, #0]
 8003854:	608b      	str	r3, [r1, #8]
 8003856:	f1b8 0f00 	cmp.w	r8, #0
 800385a:	dd9c      	ble.n	8003796 <__sflush_r+0x1a>
 800385c:	4643      	mov	r3, r8
 800385e:	463a      	mov	r2, r7
 8003860:	6a21      	ldr	r1, [r4, #32]
 8003862:	4628      	mov	r0, r5
 8003864:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003866:	47b0      	blx	r6
 8003868:	2800      	cmp	r0, #0
 800386a:	dc06      	bgt.n	800387a <__sflush_r+0xfe>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	e78e      	b.n	8003798 <__sflush_r+0x1c>
 800387a:	4407      	add	r7, r0
 800387c:	eba8 0800 	sub.w	r8, r8, r0
 8003880:	e7e9      	b.n	8003856 <__sflush_r+0xda>
 8003882:	bf00      	nop
 8003884:	20400001 	.word	0x20400001

08003888 <_fflush_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	4605      	mov	r5, r0
 800388e:	460c      	mov	r4, r1
 8003890:	b1db      	cbz	r3, 80038ca <_fflush_r+0x42>
 8003892:	b118      	cbz	r0, 800389c <_fflush_r+0x14>
 8003894:	6983      	ldr	r3, [r0, #24]
 8003896:	b90b      	cbnz	r3, 800389c <_fflush_r+0x14>
 8003898:	f000 f860 	bl	800395c <__sinit>
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <_fflush_r+0x48>)
 800389e:	429c      	cmp	r4, r3
 80038a0:	d109      	bne.n	80038b6 <_fflush_r+0x2e>
 80038a2:	686c      	ldr	r4, [r5, #4]
 80038a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a8:	b17b      	cbz	r3, 80038ca <_fflush_r+0x42>
 80038aa:	4621      	mov	r1, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b2:	f7ff bf63 	b.w	800377c <__sflush_r>
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <_fflush_r+0x4c>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d101      	bne.n	80038c0 <_fflush_r+0x38>
 80038bc:	68ac      	ldr	r4, [r5, #8]
 80038be:	e7f1      	b.n	80038a4 <_fflush_r+0x1c>
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <_fflush_r+0x50>)
 80038c2:	429c      	cmp	r4, r3
 80038c4:	bf08      	it	eq
 80038c6:	68ec      	ldreq	r4, [r5, #12]
 80038c8:	e7ec      	b.n	80038a4 <_fflush_r+0x1c>
 80038ca:	2000      	movs	r0, #0
 80038cc:	bd38      	pop	{r3, r4, r5, pc}
 80038ce:	bf00      	nop
 80038d0:	080044a8 	.word	0x080044a8
 80038d4:	080044c8 	.word	0x080044c8
 80038d8:	08004488 	.word	0x08004488

080038dc <std>:
 80038dc:	2300      	movs	r3, #0
 80038de:	b510      	push	{r4, lr}
 80038e0:	4604      	mov	r4, r0
 80038e2:	e9c0 3300 	strd	r3, r3, [r0]
 80038e6:	6083      	str	r3, [r0, #8]
 80038e8:	8181      	strh	r1, [r0, #12]
 80038ea:	6643      	str	r3, [r0, #100]	; 0x64
 80038ec:	81c2      	strh	r2, [r0, #14]
 80038ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038f2:	6183      	str	r3, [r0, #24]
 80038f4:	4619      	mov	r1, r3
 80038f6:	2208      	movs	r2, #8
 80038f8:	305c      	adds	r0, #92	; 0x5c
 80038fa:	f7ff fdfb 	bl	80034f4 <memset>
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <std+0x38>)
 8003900:	6224      	str	r4, [r4, #32]
 8003902:	6263      	str	r3, [r4, #36]	; 0x24
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <std+0x3c>)
 8003906:	62a3      	str	r3, [r4, #40]	; 0x28
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <std+0x40>)
 800390a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <std+0x44>)
 800390e:	6323      	str	r3, [r4, #48]	; 0x30
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	08004231 	.word	0x08004231
 8003918:	08004253 	.word	0x08004253
 800391c:	0800428b 	.word	0x0800428b
 8003920:	080042af 	.word	0x080042af

08003924 <_cleanup_r>:
 8003924:	4901      	ldr	r1, [pc, #4]	; (800392c <_cleanup_r+0x8>)
 8003926:	f000 b885 	b.w	8003a34 <_fwalk_reent>
 800392a:	bf00      	nop
 800392c:	08003889 	.word	0x08003889

08003930 <__sfmoreglue>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	2568      	movs	r5, #104	; 0x68
 8003934:	1e4a      	subs	r2, r1, #1
 8003936:	4355      	muls	r5, r2
 8003938:	460e      	mov	r6, r1
 800393a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800393e:	f000 f947 	bl	8003bd0 <_malloc_r>
 8003942:	4604      	mov	r4, r0
 8003944:	b140      	cbz	r0, 8003958 <__sfmoreglue+0x28>
 8003946:	2100      	movs	r1, #0
 8003948:	e9c0 1600 	strd	r1, r6, [r0]
 800394c:	300c      	adds	r0, #12
 800394e:	60a0      	str	r0, [r4, #8]
 8003950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003954:	f7ff fdce 	bl	80034f4 <memset>
 8003958:	4620      	mov	r0, r4
 800395a:	bd70      	pop	{r4, r5, r6, pc}

0800395c <__sinit>:
 800395c:	6983      	ldr	r3, [r0, #24]
 800395e:	b510      	push	{r4, lr}
 8003960:	4604      	mov	r4, r0
 8003962:	bb33      	cbnz	r3, 80039b2 <__sinit+0x56>
 8003964:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003968:	6503      	str	r3, [r0, #80]	; 0x50
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <__sinit+0x58>)
 800396c:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <__sinit+0x5c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6282      	str	r2, [r0, #40]	; 0x28
 8003972:	4298      	cmp	r0, r3
 8003974:	bf04      	itt	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	6183      	streq	r3, [r0, #24]
 800397a:	f000 f81f 	bl	80039bc <__sfp>
 800397e:	6060      	str	r0, [r4, #4]
 8003980:	4620      	mov	r0, r4
 8003982:	f000 f81b 	bl	80039bc <__sfp>
 8003986:	60a0      	str	r0, [r4, #8]
 8003988:	4620      	mov	r0, r4
 800398a:	f000 f817 	bl	80039bc <__sfp>
 800398e:	2200      	movs	r2, #0
 8003990:	60e0      	str	r0, [r4, #12]
 8003992:	2104      	movs	r1, #4
 8003994:	6860      	ldr	r0, [r4, #4]
 8003996:	f7ff ffa1 	bl	80038dc <std>
 800399a:	2201      	movs	r2, #1
 800399c:	2109      	movs	r1, #9
 800399e:	68a0      	ldr	r0, [r4, #8]
 80039a0:	f7ff ff9c 	bl	80038dc <std>
 80039a4:	2202      	movs	r2, #2
 80039a6:	2112      	movs	r1, #18
 80039a8:	68e0      	ldr	r0, [r4, #12]
 80039aa:	f7ff ff97 	bl	80038dc <std>
 80039ae:	2301      	movs	r3, #1
 80039b0:	61a3      	str	r3, [r4, #24]
 80039b2:	bd10      	pop	{r4, pc}
 80039b4:	08004484 	.word	0x08004484
 80039b8:	08003925 	.word	0x08003925

080039bc <__sfp>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <__sfp+0x70>)
 80039c0:	4607      	mov	r7, r0
 80039c2:	681e      	ldr	r6, [r3, #0]
 80039c4:	69b3      	ldr	r3, [r6, #24]
 80039c6:	b913      	cbnz	r3, 80039ce <__sfp+0x12>
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7ff ffc7 	bl	800395c <__sinit>
 80039ce:	3648      	adds	r6, #72	; 0x48
 80039d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	d503      	bpl.n	80039e0 <__sfp+0x24>
 80039d8:	6833      	ldr	r3, [r6, #0]
 80039da:	b133      	cbz	r3, 80039ea <__sfp+0x2e>
 80039dc:	6836      	ldr	r6, [r6, #0]
 80039de:	e7f7      	b.n	80039d0 <__sfp+0x14>
 80039e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039e4:	b16d      	cbz	r5, 8003a02 <__sfp+0x46>
 80039e6:	3468      	adds	r4, #104	; 0x68
 80039e8:	e7f4      	b.n	80039d4 <__sfp+0x18>
 80039ea:	2104      	movs	r1, #4
 80039ec:	4638      	mov	r0, r7
 80039ee:	f7ff ff9f 	bl	8003930 <__sfmoreglue>
 80039f2:	6030      	str	r0, [r6, #0]
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d1f1      	bne.n	80039dc <__sfp+0x20>
 80039f8:	230c      	movs	r3, #12
 80039fa:	4604      	mov	r4, r0
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4620      	mov	r0, r4
 8003a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <__sfp+0x74>)
 8003a04:	6665      	str	r5, [r4, #100]	; 0x64
 8003a06:	e9c4 5500 	strd	r5, r5, [r4]
 8003a0a:	60a5      	str	r5, [r4, #8]
 8003a0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003a10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003a14:	2208      	movs	r2, #8
 8003a16:	4629      	mov	r1, r5
 8003a18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a1c:	f7ff fd6a 	bl	80034f4 <memset>
 8003a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a28:	e7e9      	b.n	80039fe <__sfp+0x42>
 8003a2a:	bf00      	nop
 8003a2c:	08004484 	.word	0x08004484
 8003a30:	ffff0001 	.word	0xffff0001

08003a34 <_fwalk_reent>:
 8003a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a38:	4680      	mov	r8, r0
 8003a3a:	4689      	mov	r9, r1
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a42:	b914      	cbnz	r4, 8003a4a <_fwalk_reent+0x16>
 8003a44:	4630      	mov	r0, r6
 8003a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003a4e:	3f01      	subs	r7, #1
 8003a50:	d501      	bpl.n	8003a56 <_fwalk_reent+0x22>
 8003a52:	6824      	ldr	r4, [r4, #0]
 8003a54:	e7f5      	b.n	8003a42 <_fwalk_reent+0xe>
 8003a56:	89ab      	ldrh	r3, [r5, #12]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d907      	bls.n	8003a6c <_fwalk_reent+0x38>
 8003a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a60:	3301      	adds	r3, #1
 8003a62:	d003      	beq.n	8003a6c <_fwalk_reent+0x38>
 8003a64:	4629      	mov	r1, r5
 8003a66:	4640      	mov	r0, r8
 8003a68:	47c8      	blx	r9
 8003a6a:	4306      	orrs	r6, r0
 8003a6c:	3568      	adds	r5, #104	; 0x68
 8003a6e:	e7ee      	b.n	8003a4e <_fwalk_reent+0x1a>

08003a70 <__swhatbuf_r>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	460e      	mov	r6, r1
 8003a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a78:	b096      	sub	sp, #88	; 0x58
 8003a7a:	2900      	cmp	r1, #0
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	da07      	bge.n	8003a92 <__swhatbuf_r+0x22>
 8003a82:	2300      	movs	r3, #0
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	89b3      	ldrh	r3, [r6, #12]
 8003a88:	061a      	lsls	r2, r3, #24
 8003a8a:	d410      	bmi.n	8003aae <__swhatbuf_r+0x3e>
 8003a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a90:	e00e      	b.n	8003ab0 <__swhatbuf_r+0x40>
 8003a92:	466a      	mov	r2, sp
 8003a94:	f000 fc32 	bl	80042fc <_fstat_r>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	dbf2      	blt.n	8003a82 <__swhatbuf_r+0x12>
 8003a9c:	9a01      	ldr	r2, [sp, #4]
 8003a9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003aa6:	425a      	negs	r2, r3
 8003aa8:	415a      	adcs	r2, r3
 8003aaa:	602a      	str	r2, [r5, #0]
 8003aac:	e7ee      	b.n	8003a8c <__swhatbuf_r+0x1c>
 8003aae:	2340      	movs	r3, #64	; 0x40
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	b016      	add	sp, #88	; 0x58
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}

08003ab8 <__smakebuf_r>:
 8003ab8:	898b      	ldrh	r3, [r1, #12]
 8003aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003abc:	079d      	lsls	r5, r3, #30
 8003abe:	4606      	mov	r6, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	d507      	bpl.n	8003ad4 <__smakebuf_r+0x1c>
 8003ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	6123      	str	r3, [r4, #16]
 8003acc:	2301      	movs	r3, #1
 8003ace:	6163      	str	r3, [r4, #20]
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	ab01      	add	r3, sp, #4
 8003ad6:	466a      	mov	r2, sp
 8003ad8:	f7ff ffca 	bl	8003a70 <__swhatbuf_r>
 8003adc:	9900      	ldr	r1, [sp, #0]
 8003ade:	4605      	mov	r5, r0
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f000 f875 	bl	8003bd0 <_malloc_r>
 8003ae6:	b948      	cbnz	r0, 8003afc <__smakebuf_r+0x44>
 8003ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aec:	059a      	lsls	r2, r3, #22
 8003aee:	d4ef      	bmi.n	8003ad0 <__smakebuf_r+0x18>
 8003af0:	f023 0303 	bic.w	r3, r3, #3
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	e7e3      	b.n	8003ac4 <__smakebuf_r+0xc>
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <__smakebuf_r+0x7c>)
 8003afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	6020      	str	r0, [r4, #0]
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	9b00      	ldr	r3, [sp, #0]
 8003b0c:	6120      	str	r0, [r4, #16]
 8003b0e:	6163      	str	r3, [r4, #20]
 8003b10:	9b01      	ldr	r3, [sp, #4]
 8003b12:	b15b      	cbz	r3, 8003b2c <__smakebuf_r+0x74>
 8003b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 fc01 	bl	8004320 <_isatty_r>
 8003b1e:	b128      	cbz	r0, 8003b2c <__smakebuf_r+0x74>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	431d      	orrs	r5, r3
 8003b30:	81a5      	strh	r5, [r4, #12]
 8003b32:	e7cd      	b.n	8003ad0 <__smakebuf_r+0x18>
 8003b34:	08003925 	.word	0x08003925

08003b38 <_free_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	2900      	cmp	r1, #0
 8003b3e:	d043      	beq.n	8003bc8 <_free_r+0x90>
 8003b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b44:	1f0c      	subs	r4, r1, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bfb8      	it	lt
 8003b4a:	18e4      	addlt	r4, r4, r3
 8003b4c:	f000 fc18 	bl	8004380 <__malloc_lock>
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <_free_r+0x94>)
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	4610      	mov	r0, r2
 8003b56:	b933      	cbnz	r3, 8003b66 <_free_r+0x2e>
 8003b58:	6063      	str	r3, [r4, #4]
 8003b5a:	6014      	str	r4, [r2, #0]
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b62:	f000 bc0e 	b.w	8004382 <__malloc_unlock>
 8003b66:	42a3      	cmp	r3, r4
 8003b68:	d90b      	bls.n	8003b82 <_free_r+0x4a>
 8003b6a:	6821      	ldr	r1, [r4, #0]
 8003b6c:	1862      	adds	r2, r4, r1
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	bf01      	itttt	eq
 8003b72:	681a      	ldreq	r2, [r3, #0]
 8003b74:	685b      	ldreq	r3, [r3, #4]
 8003b76:	1852      	addeq	r2, r2, r1
 8003b78:	6022      	streq	r2, [r4, #0]
 8003b7a:	6063      	str	r3, [r4, #4]
 8003b7c:	6004      	str	r4, [r0, #0]
 8003b7e:	e7ed      	b.n	8003b5c <_free_r+0x24>
 8003b80:	4613      	mov	r3, r2
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	b10a      	cbz	r2, 8003b8a <_free_r+0x52>
 8003b86:	42a2      	cmp	r2, r4
 8003b88:	d9fa      	bls.n	8003b80 <_free_r+0x48>
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	1858      	adds	r0, r3, r1
 8003b8e:	42a0      	cmp	r0, r4
 8003b90:	d10b      	bne.n	8003baa <_free_r+0x72>
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	4401      	add	r1, r0
 8003b96:	1858      	adds	r0, r3, r1
 8003b98:	4282      	cmp	r2, r0
 8003b9a:	6019      	str	r1, [r3, #0]
 8003b9c:	d1de      	bne.n	8003b5c <_free_r+0x24>
 8003b9e:	6810      	ldr	r0, [r2, #0]
 8003ba0:	6852      	ldr	r2, [r2, #4]
 8003ba2:	4401      	add	r1, r0
 8003ba4:	6019      	str	r1, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	e7d8      	b.n	8003b5c <_free_r+0x24>
 8003baa:	d902      	bls.n	8003bb2 <_free_r+0x7a>
 8003bac:	230c      	movs	r3, #12
 8003bae:	602b      	str	r3, [r5, #0]
 8003bb0:	e7d4      	b.n	8003b5c <_free_r+0x24>
 8003bb2:	6820      	ldr	r0, [r4, #0]
 8003bb4:	1821      	adds	r1, r4, r0
 8003bb6:	428a      	cmp	r2, r1
 8003bb8:	bf01      	itttt	eq
 8003bba:	6811      	ldreq	r1, [r2, #0]
 8003bbc:	6852      	ldreq	r2, [r2, #4]
 8003bbe:	1809      	addeq	r1, r1, r0
 8003bc0:	6021      	streq	r1, [r4, #0]
 8003bc2:	6062      	str	r2, [r4, #4]
 8003bc4:	605c      	str	r4, [r3, #4]
 8003bc6:	e7c9      	b.n	8003b5c <_free_r+0x24>
 8003bc8:	bd38      	pop	{r3, r4, r5, pc}
 8003bca:	bf00      	nop
 8003bcc:	200000a4 	.word	0x200000a4

08003bd0 <_malloc_r>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	1ccd      	adds	r5, r1, #3
 8003bd4:	f025 0503 	bic.w	r5, r5, #3
 8003bd8:	3508      	adds	r5, #8
 8003bda:	2d0c      	cmp	r5, #12
 8003bdc:	bf38      	it	cc
 8003bde:	250c      	movcc	r5, #12
 8003be0:	2d00      	cmp	r5, #0
 8003be2:	4606      	mov	r6, r0
 8003be4:	db01      	blt.n	8003bea <_malloc_r+0x1a>
 8003be6:	42a9      	cmp	r1, r5
 8003be8:	d903      	bls.n	8003bf2 <_malloc_r+0x22>
 8003bea:	230c      	movs	r3, #12
 8003bec:	6033      	str	r3, [r6, #0]
 8003bee:	2000      	movs	r0, #0
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
 8003bf2:	f000 fbc5 	bl	8004380 <__malloc_lock>
 8003bf6:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <_malloc_r+0xac>)
 8003bf8:	6814      	ldr	r4, [r2, #0]
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	b991      	cbnz	r1, 8003c24 <_malloc_r+0x54>
 8003bfe:	4c20      	ldr	r4, [pc, #128]	; (8003c80 <_malloc_r+0xb0>)
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	b91b      	cbnz	r3, 8003c0c <_malloc_r+0x3c>
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 fb03 	bl	8004210 <_sbrk_r>
 8003c0a:	6020      	str	r0, [r4, #0]
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f000 fafe 	bl	8004210 <_sbrk_r>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d124      	bne.n	8003c62 <_malloc_r+0x92>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	f000 fbb0 	bl	8004382 <__malloc_unlock>
 8003c22:	e7e4      	b.n	8003bee <_malloc_r+0x1e>
 8003c24:	680b      	ldr	r3, [r1, #0]
 8003c26:	1b5b      	subs	r3, r3, r5
 8003c28:	d418      	bmi.n	8003c5c <_malloc_r+0x8c>
 8003c2a:	2b0b      	cmp	r3, #11
 8003c2c:	d90f      	bls.n	8003c4e <_malloc_r+0x7e>
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	18cc      	adds	r4, r1, r3
 8003c32:	50cd      	str	r5, [r1, r3]
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 fba4 	bl	8004382 <__malloc_unlock>
 8003c3a:	f104 000b 	add.w	r0, r4, #11
 8003c3e:	1d23      	adds	r3, r4, #4
 8003c40:	f020 0007 	bic.w	r0, r0, #7
 8003c44:	1ac3      	subs	r3, r0, r3
 8003c46:	d0d3      	beq.n	8003bf0 <_malloc_r+0x20>
 8003c48:	425a      	negs	r2, r3
 8003c4a:	50e2      	str	r2, [r4, r3]
 8003c4c:	e7d0      	b.n	8003bf0 <_malloc_r+0x20>
 8003c4e:	684b      	ldr	r3, [r1, #4]
 8003c50:	428c      	cmp	r4, r1
 8003c52:	bf16      	itet	ne
 8003c54:	6063      	strne	r3, [r4, #4]
 8003c56:	6013      	streq	r3, [r2, #0]
 8003c58:	460c      	movne	r4, r1
 8003c5a:	e7eb      	b.n	8003c34 <_malloc_r+0x64>
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	6849      	ldr	r1, [r1, #4]
 8003c60:	e7cc      	b.n	8003bfc <_malloc_r+0x2c>
 8003c62:	1cc4      	adds	r4, r0, #3
 8003c64:	f024 0403 	bic.w	r4, r4, #3
 8003c68:	42a0      	cmp	r0, r4
 8003c6a:	d005      	beq.n	8003c78 <_malloc_r+0xa8>
 8003c6c:	1a21      	subs	r1, r4, r0
 8003c6e:	4630      	mov	r0, r6
 8003c70:	f000 face 	bl	8004210 <_sbrk_r>
 8003c74:	3001      	adds	r0, #1
 8003c76:	d0cf      	beq.n	8003c18 <_malloc_r+0x48>
 8003c78:	6025      	str	r5, [r4, #0]
 8003c7a:	e7db      	b.n	8003c34 <_malloc_r+0x64>
 8003c7c:	200000a4 	.word	0x200000a4
 8003c80:	200000a8 	.word	0x200000a8

08003c84 <__sfputc_r>:
 8003c84:	6893      	ldr	r3, [r2, #8]
 8003c86:	b410      	push	{r4}
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	6093      	str	r3, [r2, #8]
 8003c8e:	da07      	bge.n	8003ca0 <__sfputc_r+0x1c>
 8003c90:	6994      	ldr	r4, [r2, #24]
 8003c92:	42a3      	cmp	r3, r4
 8003c94:	db01      	blt.n	8003c9a <__sfputc_r+0x16>
 8003c96:	290a      	cmp	r1, #10
 8003c98:	d102      	bne.n	8003ca0 <__sfputc_r+0x1c>
 8003c9a:	bc10      	pop	{r4}
 8003c9c:	f7ff bcae 	b.w	80035fc <__swbuf_r>
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	1c58      	adds	r0, r3, #1
 8003ca4:	6010      	str	r0, [r2, #0]
 8003ca6:	7019      	strb	r1, [r3, #0]
 8003ca8:	4608      	mov	r0, r1
 8003caa:	bc10      	pop	{r4}
 8003cac:	4770      	bx	lr

08003cae <__sfputs_r>:
 8003cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	460f      	mov	r7, r1
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	18d5      	adds	r5, r2, r3
 8003cb8:	42ac      	cmp	r4, r5
 8003cba:	d101      	bne.n	8003cc0 <__sfputs_r+0x12>
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e007      	b.n	8003cd0 <__sfputs_r+0x22>
 8003cc0:	463a      	mov	r2, r7
 8003cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f7ff ffdc 	bl	8003c84 <__sfputc_r>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d1f3      	bne.n	8003cb8 <__sfputs_r+0xa>
 8003cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cd4 <_vfiprintf_r>:
 8003cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd8:	460c      	mov	r4, r1
 8003cda:	b09d      	sub	sp, #116	; 0x74
 8003cdc:	4617      	mov	r7, r2
 8003cde:	461d      	mov	r5, r3
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	b118      	cbz	r0, 8003cec <_vfiprintf_r+0x18>
 8003ce4:	6983      	ldr	r3, [r0, #24]
 8003ce6:	b90b      	cbnz	r3, 8003cec <_vfiprintf_r+0x18>
 8003ce8:	f7ff fe38 	bl	800395c <__sinit>
 8003cec:	4b7c      	ldr	r3, [pc, #496]	; (8003ee0 <_vfiprintf_r+0x20c>)
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	d158      	bne.n	8003da4 <_vfiprintf_r+0xd0>
 8003cf2:	6874      	ldr	r4, [r6, #4]
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	0718      	lsls	r0, r3, #28
 8003cf8:	d55e      	bpl.n	8003db8 <_vfiprintf_r+0xe4>
 8003cfa:	6923      	ldr	r3, [r4, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05b      	beq.n	8003db8 <_vfiprintf_r+0xe4>
 8003d00:	2300      	movs	r3, #0
 8003d02:	9309      	str	r3, [sp, #36]	; 0x24
 8003d04:	2320      	movs	r3, #32
 8003d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d0a:	2330      	movs	r3, #48	; 0x30
 8003d0c:	f04f 0b01 	mov.w	fp, #1
 8003d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d14:	9503      	str	r5, [sp, #12]
 8003d16:	46b8      	mov	r8, r7
 8003d18:	4645      	mov	r5, r8
 8003d1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d1e:	b10b      	cbz	r3, 8003d24 <_vfiprintf_r+0x50>
 8003d20:	2b25      	cmp	r3, #37	; 0x25
 8003d22:	d154      	bne.n	8003dce <_vfiprintf_r+0xfa>
 8003d24:	ebb8 0a07 	subs.w	sl, r8, r7
 8003d28:	d00b      	beq.n	8003d42 <_vfiprintf_r+0x6e>
 8003d2a:	4653      	mov	r3, sl
 8003d2c:	463a      	mov	r2, r7
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4630      	mov	r0, r6
 8003d32:	f7ff ffbc 	bl	8003cae <__sfputs_r>
 8003d36:	3001      	adds	r0, #1
 8003d38:	f000 80c2 	beq.w	8003ec0 <_vfiprintf_r+0x1ec>
 8003d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d3e:	4453      	add	r3, sl
 8003d40:	9309      	str	r3, [sp, #36]	; 0x24
 8003d42:	f898 3000 	ldrb.w	r3, [r8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80ba 	beq.w	8003ec0 <_vfiprintf_r+0x1ec>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	9307      	str	r3, [sp, #28]
 8003d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d60:	46a8      	mov	r8, r5
 8003d62:	2205      	movs	r2, #5
 8003d64:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003d68:	485e      	ldr	r0, [pc, #376]	; (8003ee4 <_vfiprintf_r+0x210>)
 8003d6a:	f000 fafb 	bl	8004364 <memchr>
 8003d6e:	9b04      	ldr	r3, [sp, #16]
 8003d70:	bb78      	cbnz	r0, 8003dd2 <_vfiprintf_r+0xfe>
 8003d72:	06d9      	lsls	r1, r3, #27
 8003d74:	bf44      	itt	mi
 8003d76:	2220      	movmi	r2, #32
 8003d78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d7c:	071a      	lsls	r2, r3, #28
 8003d7e:	bf44      	itt	mi
 8003d80:	222b      	movmi	r2, #43	; 0x2b
 8003d82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d86:	782a      	ldrb	r2, [r5, #0]
 8003d88:	2a2a      	cmp	r2, #42	; 0x2a
 8003d8a:	d02a      	beq.n	8003de2 <_vfiprintf_r+0x10e>
 8003d8c:	46a8      	mov	r8, r5
 8003d8e:	2000      	movs	r0, #0
 8003d90:	250a      	movs	r5, #10
 8003d92:	9a07      	ldr	r2, [sp, #28]
 8003d94:	4641      	mov	r1, r8
 8003d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d9a:	3b30      	subs	r3, #48	; 0x30
 8003d9c:	2b09      	cmp	r3, #9
 8003d9e:	d969      	bls.n	8003e74 <_vfiprintf_r+0x1a0>
 8003da0:	b360      	cbz	r0, 8003dfc <_vfiprintf_r+0x128>
 8003da2:	e024      	b.n	8003dee <_vfiprintf_r+0x11a>
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <_vfiprintf_r+0x214>)
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d101      	bne.n	8003dae <_vfiprintf_r+0xda>
 8003daa:	68b4      	ldr	r4, [r6, #8]
 8003dac:	e7a2      	b.n	8003cf4 <_vfiprintf_r+0x20>
 8003dae:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <_vfiprintf_r+0x218>)
 8003db0:	429c      	cmp	r4, r3
 8003db2:	bf08      	it	eq
 8003db4:	68f4      	ldreq	r4, [r6, #12]
 8003db6:	e79d      	b.n	8003cf4 <_vfiprintf_r+0x20>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f7ff fc70 	bl	80036a0 <__swsetup_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d09d      	beq.n	8003d00 <_vfiprintf_r+0x2c>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	b01d      	add	sp, #116	; 0x74
 8003dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dce:	46a8      	mov	r8, r5
 8003dd0:	e7a2      	b.n	8003d18 <_vfiprintf_r+0x44>
 8003dd2:	4a44      	ldr	r2, [pc, #272]	; (8003ee4 <_vfiprintf_r+0x210>)
 8003dd4:	4645      	mov	r5, r8
 8003dd6:	1a80      	subs	r0, r0, r2
 8003dd8:	fa0b f000 	lsl.w	r0, fp, r0
 8003ddc:	4318      	orrs	r0, r3
 8003dde:	9004      	str	r0, [sp, #16]
 8003de0:	e7be      	b.n	8003d60 <_vfiprintf_r+0x8c>
 8003de2:	9a03      	ldr	r2, [sp, #12]
 8003de4:	1d11      	adds	r1, r2, #4
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	9103      	str	r1, [sp, #12]
 8003dea:	2a00      	cmp	r2, #0
 8003dec:	db01      	blt.n	8003df2 <_vfiprintf_r+0x11e>
 8003dee:	9207      	str	r2, [sp, #28]
 8003df0:	e004      	b.n	8003dfc <_vfiprintf_r+0x128>
 8003df2:	4252      	negs	r2, r2
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	9207      	str	r2, [sp, #28]
 8003dfa:	9304      	str	r3, [sp, #16]
 8003dfc:	f898 3000 	ldrb.w	r3, [r8]
 8003e00:	2b2e      	cmp	r3, #46	; 0x2e
 8003e02:	d10e      	bne.n	8003e22 <_vfiprintf_r+0x14e>
 8003e04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003e08:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0a:	d138      	bne.n	8003e7e <_vfiprintf_r+0x1aa>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	f108 0802 	add.w	r8, r8, #2
 8003e12:	1d1a      	adds	r2, r3, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	9203      	str	r2, [sp, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bfb8      	it	lt
 8003e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e20:	9305      	str	r3, [sp, #20]
 8003e22:	4d33      	ldr	r5, [pc, #204]	; (8003ef0 <_vfiprintf_r+0x21c>)
 8003e24:	2203      	movs	r2, #3
 8003e26:	f898 1000 	ldrb.w	r1, [r8]
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 fa9a 	bl	8004364 <memchr>
 8003e30:	b140      	cbz	r0, 8003e44 <_vfiprintf_r+0x170>
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	1b40      	subs	r0, r0, r5
 8003e36:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	f108 0801 	add.w	r8, r8, #1
 8003e40:	4303      	orrs	r3, r0
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	f898 1000 	ldrb.w	r1, [r8]
 8003e48:	2206      	movs	r2, #6
 8003e4a:	482a      	ldr	r0, [pc, #168]	; (8003ef4 <_vfiprintf_r+0x220>)
 8003e4c:	f108 0701 	add.w	r7, r8, #1
 8003e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e54:	f000 fa86 	bl	8004364 <memchr>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d037      	beq.n	8003ecc <_vfiprintf_r+0x1f8>
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <_vfiprintf_r+0x224>)
 8003e5e:	bb1b      	cbnz	r3, 8003ea8 <_vfiprintf_r+0x1d4>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	3307      	adds	r3, #7
 8003e64:	f023 0307 	bic.w	r3, r3, #7
 8003e68:	3308      	adds	r3, #8
 8003e6a:	9303      	str	r3, [sp, #12]
 8003e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6e:	444b      	add	r3, r9
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
 8003e72:	e750      	b.n	8003d16 <_vfiprintf_r+0x42>
 8003e74:	fb05 3202 	mla	r2, r5, r2, r3
 8003e78:	2001      	movs	r0, #1
 8003e7a:	4688      	mov	r8, r1
 8003e7c:	e78a      	b.n	8003d94 <_vfiprintf_r+0xc0>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	250a      	movs	r5, #10
 8003e82:	4619      	mov	r1, r3
 8003e84:	f108 0801 	add.w	r8, r8, #1
 8003e88:	9305      	str	r3, [sp, #20]
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e90:	3a30      	subs	r2, #48	; 0x30
 8003e92:	2a09      	cmp	r2, #9
 8003e94:	d903      	bls.n	8003e9e <_vfiprintf_r+0x1ca>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0c3      	beq.n	8003e22 <_vfiprintf_r+0x14e>
 8003e9a:	9105      	str	r1, [sp, #20]
 8003e9c:	e7c1      	b.n	8003e22 <_vfiprintf_r+0x14e>
 8003e9e:	fb05 2101 	mla	r1, r5, r1, r2
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4680      	mov	r8, r0
 8003ea6:	e7f0      	b.n	8003e8a <_vfiprintf_r+0x1b6>
 8003ea8:	ab03      	add	r3, sp, #12
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	4622      	mov	r2, r4
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <_vfiprintf_r+0x228>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ebc:	4681      	mov	r9, r0
 8003ebe:	d1d5      	bne.n	8003e6c <_vfiprintf_r+0x198>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	065b      	lsls	r3, r3, #25
 8003ec4:	f53f af7e 	bmi.w	8003dc4 <_vfiprintf_r+0xf0>
 8003ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eca:	e77d      	b.n	8003dc8 <_vfiprintf_r+0xf4>
 8003ecc:	ab03      	add	r3, sp, #12
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <_vfiprintf_r+0x228>)
 8003ed4:	a904      	add	r1, sp, #16
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f000 f888 	bl	8003fec <_printf_i>
 8003edc:	e7ec      	b.n	8003eb8 <_vfiprintf_r+0x1e4>
 8003ede:	bf00      	nop
 8003ee0:	080044a8 	.word	0x080044a8
 8003ee4:	080044e8 	.word	0x080044e8
 8003ee8:	080044c8 	.word	0x080044c8
 8003eec:	08004488 	.word	0x08004488
 8003ef0:	080044ee 	.word	0x080044ee
 8003ef4:	080044f2 	.word	0x080044f2
 8003ef8:	00000000 	.word	0x00000000
 8003efc:	08003caf 	.word	0x08003caf

08003f00 <_printf_common>:
 8003f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	4691      	mov	r9, r2
 8003f06:	461f      	mov	r7, r3
 8003f08:	688a      	ldr	r2, [r1, #8]
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	4606      	mov	r6, r0
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	bfb8      	it	lt
 8003f12:	4613      	movlt	r3, r2
 8003f14:	f8c9 3000 	str.w	r3, [r9]
 8003f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f22:	b112      	cbz	r2, 8003f2a <_printf_common+0x2a>
 8003f24:	3301      	adds	r3, #1
 8003f26:	f8c9 3000 	str.w	r3, [r9]
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	0699      	lsls	r1, r3, #26
 8003f2e:	bf42      	ittt	mi
 8003f30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f34:	3302      	addmi	r3, #2
 8003f36:	f8c9 3000 	strmi.w	r3, [r9]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	f015 0506 	ands.w	r5, r5, #6
 8003f40:	d107      	bne.n	8003f52 <_printf_common+0x52>
 8003f42:	f104 0a19 	add.w	sl, r4, #25
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	f8d9 2000 	ldr.w	r2, [r9]
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	42ab      	cmp	r3, r5
 8003f50:	dc29      	bgt.n	8003fa6 <_printf_common+0xa6>
 8003f52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	3300      	adds	r3, #0
 8003f5a:	bf18      	it	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	0692      	lsls	r2, r2, #26
 8003f60:	d42e      	bmi.n	8003fc0 <_printf_common+0xc0>
 8003f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f66:	4639      	mov	r1, r7
 8003f68:	4630      	mov	r0, r6
 8003f6a:	47c0      	blx	r8
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d021      	beq.n	8003fb4 <_printf_common+0xb4>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	68e5      	ldr	r5, [r4, #12]
 8003f74:	f003 0306 	and.w	r3, r3, #6
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	bf18      	it	ne
 8003f7c:	2500      	movne	r5, #0
 8003f7e:	f8d9 2000 	ldr.w	r2, [r9]
 8003f82:	f04f 0900 	mov.w	r9, #0
 8003f86:	bf08      	it	eq
 8003f88:	1aad      	subeq	r5, r5, r2
 8003f8a:	68a3      	ldr	r3, [r4, #8]
 8003f8c:	6922      	ldr	r2, [r4, #16]
 8003f8e:	bf08      	it	eq
 8003f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f94:	4293      	cmp	r3, r2
 8003f96:	bfc4      	itt	gt
 8003f98:	1a9b      	subgt	r3, r3, r2
 8003f9a:	18ed      	addgt	r5, r5, r3
 8003f9c:	341a      	adds	r4, #26
 8003f9e:	454d      	cmp	r5, r9
 8003fa0:	d11a      	bne.n	8003fd8 <_printf_common+0xd8>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e008      	b.n	8003fb8 <_printf_common+0xb8>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4652      	mov	r2, sl
 8003faa:	4639      	mov	r1, r7
 8003fac:	4630      	mov	r0, r6
 8003fae:	47c0      	blx	r8
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d103      	bne.n	8003fbc <_printf_common+0xbc>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbc:	3501      	adds	r5, #1
 8003fbe:	e7c2      	b.n	8003f46 <_printf_common+0x46>
 8003fc0:	2030      	movs	r0, #48	; 0x30
 8003fc2:	18e1      	adds	r1, r4, r3
 8003fc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fce:	4422      	add	r2, r4
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fd6:	e7c4      	b.n	8003f62 <_printf_common+0x62>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4639      	mov	r1, r7
 8003fde:	4630      	mov	r0, r6
 8003fe0:	47c0      	blx	r8
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d0e6      	beq.n	8003fb4 <_printf_common+0xb4>
 8003fe6:	f109 0901 	add.w	r9, r9, #1
 8003fea:	e7d8      	b.n	8003f9e <_printf_common+0x9e>

08003fec <_printf_i>:
 8003fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ff0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	7e09      	ldrb	r1, [r1, #24]
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	296e      	cmp	r1, #110	; 0x6e
 8003ffc:	4617      	mov	r7, r2
 8003ffe:	4606      	mov	r6, r0
 8004000:	4698      	mov	r8, r3
 8004002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004004:	f000 80b3 	beq.w	800416e <_printf_i+0x182>
 8004008:	d822      	bhi.n	8004050 <_printf_i+0x64>
 800400a:	2963      	cmp	r1, #99	; 0x63
 800400c:	d036      	beq.n	800407c <_printf_i+0x90>
 800400e:	d80a      	bhi.n	8004026 <_printf_i+0x3a>
 8004010:	2900      	cmp	r1, #0
 8004012:	f000 80b9 	beq.w	8004188 <_printf_i+0x19c>
 8004016:	2958      	cmp	r1, #88	; 0x58
 8004018:	f000 8083 	beq.w	8004122 <_printf_i+0x136>
 800401c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004020:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004024:	e032      	b.n	800408c <_printf_i+0xa0>
 8004026:	2964      	cmp	r1, #100	; 0x64
 8004028:	d001      	beq.n	800402e <_printf_i+0x42>
 800402a:	2969      	cmp	r1, #105	; 0x69
 800402c:	d1f6      	bne.n	800401c <_printf_i+0x30>
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	6813      	ldr	r3, [r2, #0]
 8004032:	0605      	lsls	r5, r0, #24
 8004034:	f103 0104 	add.w	r1, r3, #4
 8004038:	d52a      	bpl.n	8004090 <_printf_i+0xa4>
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da03      	bge.n	800404a <_printf_i+0x5e>
 8004042:	222d      	movs	r2, #45	; 0x2d
 8004044:	425b      	negs	r3, r3
 8004046:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800404a:	486f      	ldr	r0, [pc, #444]	; (8004208 <_printf_i+0x21c>)
 800404c:	220a      	movs	r2, #10
 800404e:	e039      	b.n	80040c4 <_printf_i+0xd8>
 8004050:	2973      	cmp	r1, #115	; 0x73
 8004052:	f000 809d 	beq.w	8004190 <_printf_i+0x1a4>
 8004056:	d808      	bhi.n	800406a <_printf_i+0x7e>
 8004058:	296f      	cmp	r1, #111	; 0x6f
 800405a:	d020      	beq.n	800409e <_printf_i+0xb2>
 800405c:	2970      	cmp	r1, #112	; 0x70
 800405e:	d1dd      	bne.n	800401c <_printf_i+0x30>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	f043 0320 	orr.w	r3, r3, #32
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	e003      	b.n	8004072 <_printf_i+0x86>
 800406a:	2975      	cmp	r1, #117	; 0x75
 800406c:	d017      	beq.n	800409e <_printf_i+0xb2>
 800406e:	2978      	cmp	r1, #120	; 0x78
 8004070:	d1d4      	bne.n	800401c <_printf_i+0x30>
 8004072:	2378      	movs	r3, #120	; 0x78
 8004074:	4865      	ldr	r0, [pc, #404]	; (800420c <_printf_i+0x220>)
 8004076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800407a:	e055      	b.n	8004128 <_printf_i+0x13c>
 800407c:	6813      	ldr	r3, [r2, #0]
 800407e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004082:	1d19      	adds	r1, r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6011      	str	r1, [r2, #0]
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e08c      	b.n	80041aa <_printf_i+0x1be>
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004096:	6011      	str	r1, [r2, #0]
 8004098:	bf18      	it	ne
 800409a:	b21b      	sxthne	r3, r3
 800409c:	e7cf      	b.n	800403e <_printf_i+0x52>
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	6825      	ldr	r5, [r4, #0]
 80040a2:	1d18      	adds	r0, r3, #4
 80040a4:	6010      	str	r0, [r2, #0]
 80040a6:	0628      	lsls	r0, r5, #24
 80040a8:	d501      	bpl.n	80040ae <_printf_i+0xc2>
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	e002      	b.n	80040b4 <_printf_i+0xc8>
 80040ae:	0668      	lsls	r0, r5, #25
 80040b0:	d5fb      	bpl.n	80040aa <_printf_i+0xbe>
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	296f      	cmp	r1, #111	; 0x6f
 80040b6:	bf14      	ite	ne
 80040b8:	220a      	movne	r2, #10
 80040ba:	2208      	moveq	r2, #8
 80040bc:	4852      	ldr	r0, [pc, #328]	; (8004208 <_printf_i+0x21c>)
 80040be:	2100      	movs	r1, #0
 80040c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c4:	6865      	ldr	r5, [r4, #4]
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	60a5      	str	r5, [r4, #8]
 80040ca:	f2c0 8095 	blt.w	80041f8 <_printf_i+0x20c>
 80040ce:	6821      	ldr	r1, [r4, #0]
 80040d0:	f021 0104 	bic.w	r1, r1, #4
 80040d4:	6021      	str	r1, [r4, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d13d      	bne.n	8004156 <_printf_i+0x16a>
 80040da:	2d00      	cmp	r5, #0
 80040dc:	f040 808e 	bne.w	80041fc <_printf_i+0x210>
 80040e0:	4665      	mov	r5, ip
 80040e2:	2a08      	cmp	r2, #8
 80040e4:	d10b      	bne.n	80040fe <_printf_i+0x112>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	07db      	lsls	r3, r3, #31
 80040ea:	d508      	bpl.n	80040fe <_printf_i+0x112>
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	6862      	ldr	r2, [r4, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bfde      	ittt	le
 80040f4:	2330      	movle	r3, #48	; 0x30
 80040f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040fe:	ebac 0305 	sub.w	r3, ip, r5
 8004102:	6123      	str	r3, [r4, #16]
 8004104:	f8cd 8000 	str.w	r8, [sp]
 8004108:	463b      	mov	r3, r7
 800410a:	aa03      	add	r2, sp, #12
 800410c:	4621      	mov	r1, r4
 800410e:	4630      	mov	r0, r6
 8004110:	f7ff fef6 	bl	8003f00 <_printf_common>
 8004114:	3001      	adds	r0, #1
 8004116:	d14d      	bne.n	80041b4 <_printf_i+0x1c8>
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	b005      	add	sp, #20
 800411e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004122:	4839      	ldr	r0, [pc, #228]	; (8004208 <_printf_i+0x21c>)
 8004124:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	6821      	ldr	r1, [r4, #0]
 800412c:	1d1d      	adds	r5, r3, #4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6015      	str	r5, [r2, #0]
 8004132:	060a      	lsls	r2, r1, #24
 8004134:	d50b      	bpl.n	800414e <_printf_i+0x162>
 8004136:	07ca      	lsls	r2, r1, #31
 8004138:	bf44      	itt	mi
 800413a:	f041 0120 	orrmi.w	r1, r1, #32
 800413e:	6021      	strmi	r1, [r4, #0]
 8004140:	b91b      	cbnz	r3, 800414a <_printf_i+0x15e>
 8004142:	6822      	ldr	r2, [r4, #0]
 8004144:	f022 0220 	bic.w	r2, r2, #32
 8004148:	6022      	str	r2, [r4, #0]
 800414a:	2210      	movs	r2, #16
 800414c:	e7b7      	b.n	80040be <_printf_i+0xd2>
 800414e:	064d      	lsls	r5, r1, #25
 8004150:	bf48      	it	mi
 8004152:	b29b      	uxthmi	r3, r3
 8004154:	e7ef      	b.n	8004136 <_printf_i+0x14a>
 8004156:	4665      	mov	r5, ip
 8004158:	fbb3 f1f2 	udiv	r1, r3, r2
 800415c:	fb02 3311 	mls	r3, r2, r1, r3
 8004160:	5cc3      	ldrb	r3, [r0, r3]
 8004162:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004166:	460b      	mov	r3, r1
 8004168:	2900      	cmp	r1, #0
 800416a:	d1f5      	bne.n	8004158 <_printf_i+0x16c>
 800416c:	e7b9      	b.n	80040e2 <_printf_i+0xf6>
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	6825      	ldr	r5, [r4, #0]
 8004172:	1d18      	adds	r0, r3, #4
 8004174:	6961      	ldr	r1, [r4, #20]
 8004176:	6010      	str	r0, [r2, #0]
 8004178:	0628      	lsls	r0, r5, #24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	d501      	bpl.n	8004182 <_printf_i+0x196>
 800417e:	6019      	str	r1, [r3, #0]
 8004180:	e002      	b.n	8004188 <_printf_i+0x19c>
 8004182:	066a      	lsls	r2, r5, #25
 8004184:	d5fb      	bpl.n	800417e <_printf_i+0x192>
 8004186:	8019      	strh	r1, [r3, #0]
 8004188:	2300      	movs	r3, #0
 800418a:	4665      	mov	r5, ip
 800418c:	6123      	str	r3, [r4, #16]
 800418e:	e7b9      	b.n	8004104 <_printf_i+0x118>
 8004190:	6813      	ldr	r3, [r2, #0]
 8004192:	1d19      	adds	r1, r3, #4
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	681d      	ldr	r5, [r3, #0]
 8004198:	6862      	ldr	r2, [r4, #4]
 800419a:	2100      	movs	r1, #0
 800419c:	4628      	mov	r0, r5
 800419e:	f000 f8e1 	bl	8004364 <memchr>
 80041a2:	b108      	cbz	r0, 80041a8 <_printf_i+0x1bc>
 80041a4:	1b40      	subs	r0, r0, r5
 80041a6:	6060      	str	r0, [r4, #4]
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	2300      	movs	r3, #0
 80041ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b2:	e7a7      	b.n	8004104 <_printf_i+0x118>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	462a      	mov	r2, r5
 80041b8:	4639      	mov	r1, r7
 80041ba:	4630      	mov	r0, r6
 80041bc:	47c0      	blx	r8
 80041be:	3001      	adds	r0, #1
 80041c0:	d0aa      	beq.n	8004118 <_printf_i+0x12c>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	079b      	lsls	r3, r3, #30
 80041c6:	d413      	bmi.n	80041f0 <_printf_i+0x204>
 80041c8:	68e0      	ldr	r0, [r4, #12]
 80041ca:	9b03      	ldr	r3, [sp, #12]
 80041cc:	4298      	cmp	r0, r3
 80041ce:	bfb8      	it	lt
 80041d0:	4618      	movlt	r0, r3
 80041d2:	e7a3      	b.n	800411c <_printf_i+0x130>
 80041d4:	2301      	movs	r3, #1
 80041d6:	464a      	mov	r2, r9
 80041d8:	4639      	mov	r1, r7
 80041da:	4630      	mov	r0, r6
 80041dc:	47c0      	blx	r8
 80041de:	3001      	adds	r0, #1
 80041e0:	d09a      	beq.n	8004118 <_printf_i+0x12c>
 80041e2:	3501      	adds	r5, #1
 80041e4:	68e3      	ldr	r3, [r4, #12]
 80041e6:	9a03      	ldr	r2, [sp, #12]
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	42ab      	cmp	r3, r5
 80041ec:	dcf2      	bgt.n	80041d4 <_printf_i+0x1e8>
 80041ee:	e7eb      	b.n	80041c8 <_printf_i+0x1dc>
 80041f0:	2500      	movs	r5, #0
 80041f2:	f104 0919 	add.w	r9, r4, #25
 80041f6:	e7f5      	b.n	80041e4 <_printf_i+0x1f8>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ac      	bne.n	8004156 <_printf_i+0x16a>
 80041fc:	7803      	ldrb	r3, [r0, #0]
 80041fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004206:	e76c      	b.n	80040e2 <_printf_i+0xf6>
 8004208:	080044f9 	.word	0x080044f9
 800420c:	0800450a 	.word	0x0800450a

08004210 <_sbrk_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	2300      	movs	r3, #0
 8004214:	4c05      	ldr	r4, [pc, #20]	; (800422c <_sbrk_r+0x1c>)
 8004216:	4605      	mov	r5, r0
 8004218:	4608      	mov	r0, r1
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	f7fc ffaa 	bl	8001174 <_sbrk>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d102      	bne.n	800422a <_sbrk_r+0x1a>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	b103      	cbz	r3, 800422a <_sbrk_r+0x1a>
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	2000019c 	.word	0x2000019c

08004230 <__sread>:
 8004230:	b510      	push	{r4, lr}
 8004232:	460c      	mov	r4, r1
 8004234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004238:	f000 f8a4 	bl	8004384 <_read_r>
 800423c:	2800      	cmp	r0, #0
 800423e:	bfab      	itete	ge
 8004240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004242:	89a3      	ldrhlt	r3, [r4, #12]
 8004244:	181b      	addge	r3, r3, r0
 8004246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800424a:	bfac      	ite	ge
 800424c:	6563      	strge	r3, [r4, #84]	; 0x54
 800424e:	81a3      	strhlt	r3, [r4, #12]
 8004250:	bd10      	pop	{r4, pc}

08004252 <__swrite>:
 8004252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004256:	461f      	mov	r7, r3
 8004258:	898b      	ldrh	r3, [r1, #12]
 800425a:	4605      	mov	r5, r0
 800425c:	05db      	lsls	r3, r3, #23
 800425e:	460c      	mov	r4, r1
 8004260:	4616      	mov	r6, r2
 8004262:	d505      	bpl.n	8004270 <__swrite+0x1e>
 8004264:	2302      	movs	r3, #2
 8004266:	2200      	movs	r2, #0
 8004268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800426c:	f000 f868 	bl	8004340 <_lseek_r>
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	4632      	mov	r2, r6
 8004274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800427e:	463b      	mov	r3, r7
 8004280:	4628      	mov	r0, r5
 8004282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004286:	f000 b817 	b.w	80042b8 <_write_r>

0800428a <__sseek>:
 800428a:	b510      	push	{r4, lr}
 800428c:	460c      	mov	r4, r1
 800428e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004292:	f000 f855 	bl	8004340 <_lseek_r>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	bf15      	itete	ne
 800429c:	6560      	strne	r0, [r4, #84]	; 0x54
 800429e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042a6:	81a3      	strheq	r3, [r4, #12]
 80042a8:	bf18      	it	ne
 80042aa:	81a3      	strhne	r3, [r4, #12]
 80042ac:	bd10      	pop	{r4, pc}

080042ae <__sclose>:
 80042ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b2:	f000 b813 	b.w	80042dc <_close_r>
	...

080042b8 <_write_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4605      	mov	r5, r0
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	2200      	movs	r2, #0
 80042c2:	4c05      	ldr	r4, [pc, #20]	; (80042d8 <_write_r+0x20>)
 80042c4:	6022      	str	r2, [r4, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f7fc ff07 	bl	80010da <_write>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_write_r+0x1e>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_write_r+0x1e>
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	2000019c 	.word	0x2000019c

080042dc <_close_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	2300      	movs	r3, #0
 80042e0:	4c05      	ldr	r4, [pc, #20]	; (80042f8 <_close_r+0x1c>)
 80042e2:	4605      	mov	r5, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	f7fc ff13 	bl	8001112 <_close>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_close_r+0x1a>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_close_r+0x1a>
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	2000019c 	.word	0x2000019c

080042fc <_fstat_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	2300      	movs	r3, #0
 8004300:	4c06      	ldr	r4, [pc, #24]	; (800431c <_fstat_r+0x20>)
 8004302:	4605      	mov	r5, r0
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	f7fc ff0d 	bl	8001128 <_fstat>
 800430e:	1c43      	adds	r3, r0, #1
 8004310:	d102      	bne.n	8004318 <_fstat_r+0x1c>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	b103      	cbz	r3, 8004318 <_fstat_r+0x1c>
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	bd38      	pop	{r3, r4, r5, pc}
 800431a:	bf00      	nop
 800431c:	2000019c 	.word	0x2000019c

08004320 <_isatty_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	2300      	movs	r3, #0
 8004324:	4c05      	ldr	r4, [pc, #20]	; (800433c <_isatty_r+0x1c>)
 8004326:	4605      	mov	r5, r0
 8004328:	4608      	mov	r0, r1
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	f7fc ff0b 	bl	8001146 <_isatty>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_isatty_r+0x1a>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	b103      	cbz	r3, 800433a <_isatty_r+0x1a>
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	2000019c 	.word	0x2000019c

08004340 <_lseek_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	2200      	movs	r2, #0
 800434a:	4c05      	ldr	r4, [pc, #20]	; (8004360 <_lseek_r+0x20>)
 800434c:	6022      	str	r2, [r4, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7fc ff03 	bl	800115a <_lseek>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_lseek_r+0x1e>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	b103      	cbz	r3, 800435e <_lseek_r+0x1e>
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	2000019c 	.word	0x2000019c

08004364 <memchr>:
 8004364:	b510      	push	{r4, lr}
 8004366:	b2c9      	uxtb	r1, r1
 8004368:	4402      	add	r2, r0
 800436a:	4290      	cmp	r0, r2
 800436c:	4603      	mov	r3, r0
 800436e:	d101      	bne.n	8004374 <memchr+0x10>
 8004370:	2300      	movs	r3, #0
 8004372:	e003      	b.n	800437c <memchr+0x18>
 8004374:	781c      	ldrb	r4, [r3, #0]
 8004376:	3001      	adds	r0, #1
 8004378:	428c      	cmp	r4, r1
 800437a:	d1f6      	bne.n	800436a <memchr+0x6>
 800437c:	4618      	mov	r0, r3
 800437e:	bd10      	pop	{r4, pc}

08004380 <__malloc_lock>:
 8004380:	4770      	bx	lr

08004382 <__malloc_unlock>:
 8004382:	4770      	bx	lr

08004384 <_read_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4605      	mov	r5, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	2200      	movs	r2, #0
 800438e:	4c05      	ldr	r4, [pc, #20]	; (80043a4 <_read_r+0x20>)
 8004390:	6022      	str	r2, [r4, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fc fe84 	bl	80010a0 <_read>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_read_r+0x1e>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_read_r+0x1e>
 80043a0:	602b      	str	r3, [r5, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	2000019c 	.word	0x2000019c

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
