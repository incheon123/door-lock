
4x4keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004344  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004560  08004560  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004560  08004560  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004560  08004560  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000088  080045f0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080045f0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc0e  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021db  00000000  00000000  0002fcbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00032ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019626  00000000  00000000  00033e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0c6  00000000  00000000  0004d486  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e4fe  00000000  00000000  0005954c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7a4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b60  00000000  00000000  000e7ac8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004438 	.word	0x08004438

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004438 	.word	0x08004438

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <scan_Rx>:
short success_set_remain_time_progress = 0;

static Pos pos;

char scan_Rx(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016a:	48ba      	ldr	r0, [pc, #744]	; (8000454 <scan_Rx+0x2f4>)
 800016c:	f001 fc09 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000176:	48b8      	ldr	r0, [pc, #736]	; (8000458 <scan_Rx+0x2f8>)
 8000178:	f001 fc03 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000182:	48b5      	ldr	r0, [pc, #724]	; (8000458 <scan_Rx+0x2f8>)
 8000184:	f001 fbfd 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2180      	movs	r1, #128	; 0x80
 800018c:	48b3      	ldr	r0, [pc, #716]	; (800045c <scan_Rx+0x2fc>)
 800018e:	f001 fbf8 	bl	8001982 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000192:	2110      	movs	r1, #16
 8000194:	48af      	ldr	r0, [pc, #700]	; (8000454 <scan_Rx+0x2f4>)
 8000196:	f001 fbdd 	bl	8001954 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d109      	bne.n	80001b4 <scan_Rx+0x54>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80001a0:	bf00      	nop
 80001a2:	2110      	movs	r1, #16
 80001a4:	48ab      	ldr	r0, [pc, #684]	; (8000454 <scan_Rx+0x2f4>)
 80001a6:	f001 fbd5 	bl	8001954 <HAL_GPIO_ReadPin>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0f8      	beq.n	80001a2 <scan_Rx+0x42>
		return '1';
 80001b0:	2331      	movs	r3, #49	; 0x31
 80001b2:	e14c      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80001b4:	2120      	movs	r1, #32
 80001b6:	48a7      	ldr	r0, [pc, #668]	; (8000454 <scan_Rx+0x2f4>)
 80001b8:	f001 fbcc 	bl	8001954 <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d109      	bne.n	80001d6 <scan_Rx+0x76>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80001c2:	bf00      	nop
 80001c4:	2120      	movs	r1, #32
 80001c6:	48a3      	ldr	r0, [pc, #652]	; (8000454 <scan_Rx+0x2f4>)
 80001c8:	f001 fbc4 	bl	8001954 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f8      	beq.n	80001c4 <scan_Rx+0x64>
		return '2';
 80001d2:	2332      	movs	r3, #50	; 0x32
 80001d4:	e13b      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80001d6:	2108      	movs	r1, #8
 80001d8:	489e      	ldr	r0, [pc, #632]	; (8000454 <scan_Rx+0x2f4>)
 80001da:	f001 fbbb 	bl	8001954 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d109      	bne.n	80001f8 <scan_Rx+0x98>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80001e4:	bf00      	nop
 80001e6:	2108      	movs	r1, #8
 80001e8:	489a      	ldr	r0, [pc, #616]	; (8000454 <scan_Rx+0x2f4>)
 80001ea:	f001 fbb3 	bl	8001954 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f8      	beq.n	80001e6 <scan_Rx+0x86>
		return '3';
 80001f4:	2333      	movs	r3, #51	; 0x33
 80001f6:	e12a      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	4896      	ldr	r0, [pc, #600]	; (8000458 <scan_Rx+0x2f8>)
 80001fe:	f001 fba9 	bl	8001954 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d10a      	bne.n	800021e <scan_Rx+0xbe>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000208:	bf00      	nop
 800020a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020e:	4892      	ldr	r0, [pc, #584]	; (8000458 <scan_Rx+0x2f8>)
 8000210:	f001 fba0 	bl	8001954 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f7      	beq.n	800020a <scan_Rx+0xaa>
		return 'A';
 800021a:	2341      	movs	r3, #65	; 0x41
 800021c:	e117      	b.n	800044e <scan_Rx+0x2ee>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000224:	488b      	ldr	r0, [pc, #556]	; (8000454 <scan_Rx+0x2f4>)
 8000226:	f001 fbac 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000230:	4889      	ldr	r0, [pc, #548]	; (8000458 <scan_Rx+0x2f8>)
 8000232:	f001 fba6 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023c:	4886      	ldr	r0, [pc, #536]	; (8000458 <scan_Rx+0x2f8>)
 800023e:	f001 fba0 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	4885      	ldr	r0, [pc, #532]	; (800045c <scan_Rx+0x2fc>)
 8000248:	f001 fb9b 	bl	8001982 <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 800024c:	2110      	movs	r1, #16
 800024e:	4881      	ldr	r0, [pc, #516]	; (8000454 <scan_Rx+0x2f4>)
 8000250:	f001 fb80 	bl	8001954 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d109      	bne.n	800026e <scan_Rx+0x10e>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800025a:	bf00      	nop
 800025c:	2110      	movs	r1, #16
 800025e:	487d      	ldr	r0, [pc, #500]	; (8000454 <scan_Rx+0x2f4>)
 8000260:	f001 fb78 	bl	8001954 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f8      	beq.n	800025c <scan_Rx+0xfc>
		return '4';
 800026a:	2334      	movs	r3, #52	; 0x34
 800026c:	e0ef      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 800026e:	2120      	movs	r1, #32
 8000270:	4878      	ldr	r0, [pc, #480]	; (8000454 <scan_Rx+0x2f4>)
 8000272:	f001 fb6f 	bl	8001954 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d109      	bne.n	8000290 <scan_Rx+0x130>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800027c:	bf00      	nop
 800027e:	2120      	movs	r1, #32
 8000280:	4874      	ldr	r0, [pc, #464]	; (8000454 <scan_Rx+0x2f4>)
 8000282:	f001 fb67 	bl	8001954 <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f8      	beq.n	800027e <scan_Rx+0x11e>
		return '5';
 800028c:	2335      	movs	r3, #53	; 0x35
 800028e:	e0de      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000290:	2108      	movs	r1, #8
 8000292:	4870      	ldr	r0, [pc, #448]	; (8000454 <scan_Rx+0x2f4>)
 8000294:	f001 fb5e 	bl	8001954 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d109      	bne.n	80002b2 <scan_Rx+0x152>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800029e:	bf00      	nop
 80002a0:	2108      	movs	r1, #8
 80002a2:	486c      	ldr	r0, [pc, #432]	; (8000454 <scan_Rx+0x2f4>)
 80002a4:	f001 fb56 	bl	8001954 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f8      	beq.n	80002a0 <scan_Rx+0x140>
		return '6';
 80002ae:	2336      	movs	r3, #54	; 0x36
 80002b0:	e0cd      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80002b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b6:	4868      	ldr	r0, [pc, #416]	; (8000458 <scan_Rx+0x2f8>)
 80002b8:	f001 fb4c 	bl	8001954 <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d10a      	bne.n	80002d8 <scan_Rx+0x178>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80002c2:	bf00      	nop
 80002c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c8:	4863      	ldr	r0, [pc, #396]	; (8000458 <scan_Rx+0x2f8>)
 80002ca:	f001 fb43 	bl	8001954 <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f7      	beq.n	80002c4 <scan_Rx+0x164>
		return 'B';
 80002d4:	2342      	movs	r3, #66	; 0x42
 80002d6:	e0ba      	b.n	800044e <scan_Rx+0x2ee>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002de:	485d      	ldr	r0, [pc, #372]	; (8000454 <scan_Rx+0x2f4>)
 80002e0:	f001 fb4f 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	485b      	ldr	r0, [pc, #364]	; (8000458 <scan_Rx+0x2f8>)
 80002ec:	f001 fb49 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	4858      	ldr	r0, [pc, #352]	; (8000458 <scan_Rx+0x2f8>)
 80002f8:	f001 fb43 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2180      	movs	r1, #128	; 0x80
 8000300:	4856      	ldr	r0, [pc, #344]	; (800045c <scan_Rx+0x2fc>)
 8000302:	f001 fb3e 	bl	8001982 <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000306:	2110      	movs	r1, #16
 8000308:	4852      	ldr	r0, [pc, #328]	; (8000454 <scan_Rx+0x2f4>)
 800030a:	f001 fb23 	bl	8001954 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <scan_Rx+0x1c8>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000314:	bf00      	nop
 8000316:	2110      	movs	r1, #16
 8000318:	484e      	ldr	r0, [pc, #312]	; (8000454 <scan_Rx+0x2f4>)
 800031a:	f001 fb1b 	bl	8001954 <HAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f8      	beq.n	8000316 <scan_Rx+0x1b6>
		return '7';
 8000324:	2337      	movs	r3, #55	; 0x37
 8000326:	e092      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000328:	2120      	movs	r1, #32
 800032a:	484a      	ldr	r0, [pc, #296]	; (8000454 <scan_Rx+0x2f4>)
 800032c:	f001 fb12 	bl	8001954 <HAL_GPIO_ReadPin>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d109      	bne.n	800034a <scan_Rx+0x1ea>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000336:	bf00      	nop
 8000338:	2120      	movs	r1, #32
 800033a:	4846      	ldr	r0, [pc, #280]	; (8000454 <scan_Rx+0x2f4>)
 800033c:	f001 fb0a 	bl	8001954 <HAL_GPIO_ReadPin>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <scan_Rx+0x1d8>
		return '8';
 8000346:	2338      	movs	r3, #56	; 0x38
 8000348:	e081      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 800034a:	2108      	movs	r1, #8
 800034c:	4841      	ldr	r0, [pc, #260]	; (8000454 <scan_Rx+0x2f4>)
 800034e:	f001 fb01 	bl	8001954 <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d109      	bne.n	800036c <scan_Rx+0x20c>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000358:	bf00      	nop
 800035a:	2108      	movs	r1, #8
 800035c:	483d      	ldr	r0, [pc, #244]	; (8000454 <scan_Rx+0x2f4>)
 800035e:	f001 faf9 	bl	8001954 <HAL_GPIO_ReadPin>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f8      	beq.n	800035a <scan_Rx+0x1fa>
		return '9';
 8000368:	2339      	movs	r3, #57	; 0x39
 800036a:	e070      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 800036c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000370:	4839      	ldr	r0, [pc, #228]	; (8000458 <scan_Rx+0x2f8>)
 8000372:	f001 faef 	bl	8001954 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10a      	bne.n	8000392 <scan_Rx+0x232>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800037c:	bf00      	nop
 800037e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000382:	4835      	ldr	r0, [pc, #212]	; (8000458 <scan_Rx+0x2f8>)
 8000384:	f001 fae6 	bl	8001954 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f7      	beq.n	800037e <scan_Rx+0x21e>
		return 'C';
 800038e:	2343      	movs	r3, #67	; 0x43
 8000390:	e05d      	b.n	800044e <scan_Rx+0x2ee>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000398:	482e      	ldr	r0, [pc, #184]	; (8000454 <scan_Rx+0x2f4>)
 800039a:	f001 faf2 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a4:	482c      	ldr	r0, [pc, #176]	; (8000458 <scan_Rx+0x2f8>)
 80003a6:	f001 faec 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	4829      	ldr	r0, [pc, #164]	; (8000458 <scan_Rx+0x2f8>)
 80003b2:	f001 fae6 	bl	8001982 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	4828      	ldr	r0, [pc, #160]	; (800045c <scan_Rx+0x2fc>)
 80003bc:	f001 fae1 	bl	8001982 <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80003c0:	2110      	movs	r1, #16
 80003c2:	4824      	ldr	r0, [pc, #144]	; (8000454 <scan_Rx+0x2f4>)
 80003c4:	f001 fac6 	bl	8001954 <HAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d109      	bne.n	80003e2 <scan_Rx+0x282>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80003ce:	bf00      	nop
 80003d0:	2110      	movs	r1, #16
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <scan_Rx+0x2f4>)
 80003d4:	f001 fabe 	bl	8001954 <HAL_GPIO_ReadPin>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f8      	beq.n	80003d0 <scan_Rx+0x270>
		return '0';
 80003de:	2330      	movs	r3, #48	; 0x30
 80003e0:	e035      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80003e2:	2120      	movs	r1, #32
 80003e4:	481b      	ldr	r0, [pc, #108]	; (8000454 <scan_Rx+0x2f4>)
 80003e6:	f001 fab5 	bl	8001954 <HAL_GPIO_ReadPin>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d109      	bne.n	8000404 <scan_Rx+0x2a4>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80003f0:	bf00      	nop
 80003f2:	2120      	movs	r1, #32
 80003f4:	4817      	ldr	r0, [pc, #92]	; (8000454 <scan_Rx+0x2f4>)
 80003f6:	f001 faad 	bl	8001954 <HAL_GPIO_ReadPin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f8      	beq.n	80003f2 <scan_Rx+0x292>
		return '-';
 8000400:	232d      	movs	r3, #45	; 0x2d
 8000402:	e024      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000404:	2108      	movs	r1, #8
 8000406:	4813      	ldr	r0, [pc, #76]	; (8000454 <scan_Rx+0x2f4>)
 8000408:	f001 faa4 	bl	8001954 <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d109      	bne.n	8000426 <scan_Rx+0x2c6>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000412:	bf00      	nop
 8000414:	2108      	movs	r1, #8
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <scan_Rx+0x2f4>)
 8000418:	f001 fa9c 	bl	8001954 <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f8      	beq.n	8000414 <scan_Rx+0x2b4>
		return '#';
 8000422:	2323      	movs	r3, #35	; 0x23
 8000424:	e013      	b.n	800044e <scan_Rx+0x2ee>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <scan_Rx+0x2f8>)
 800042c:	f001 fa92 	bl	8001954 <HAL_GPIO_ReadPin>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d10a      	bne.n	800044c <scan_Rx+0x2ec>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000436:	bf00      	nop
 8000438:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <scan_Rx+0x2f8>)
 800043e:	f001 fa89 	bl	8001954 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f7      	beq.n	8000438 <scan_Rx+0x2d8>
		return '*';
 8000448:	232a      	movs	r3, #42	; 0x2a
 800044a:	e000      	b.n	800044e <scan_Rx+0x2ee>
	}

	return 255;
 800044c:	23ff      	movs	r3, #255	; 0xff
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40010c00 	.word	0x40010c00
 8000458:	40010800 	.word	0x40010800
 800045c:	40011000 	.word	0x40011000

08000460 <checkPassword>:
/*
 * pw 		 : pw that user press
 * setted_pw : door-lock password
 */
char checkPassword(const char *pw, const char *setted_pw)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
	if(!strcmp(pw, setted_pw))
 800046a:	6839      	ldr	r1, [r7, #0]
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f7ff fe6d 	bl	800014c <strcmp>
	{
	}else
	{
	}
}
 8000472:	bf00      	nop
 8000474:	4618      	mov	r0, r3
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <set_remain_time_progress>:

void set_remain_time_progress(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	for(int i = 0; i < remain_time; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	e009      	b.n	800049c <set_remain_time_progress+0x20>
	{
	  HD44780_SetCursor(i, 1);
 8000488:	2101      	movs	r1, #1
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f91a 	bl	80006c4 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(0xFF);
 8000490:	20ff      	movs	r0, #255	; 0xff
 8000492:	f000 f987 	bl	80007a4 <HD44780_PrintSpecialChar>
	for(int i = 0; i < remain_time; i++)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b09      	cmp	r3, #9
 80004a0:	ddf2      	ble.n	8000488 <set_remain_time_progress+0xc>
	}
	success_set_remain_time_progress = 1;
 80004a2:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <set_remain_time_progress+0x34>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	801a      	strh	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000a4 	.word	0x200000a4

080004b4 <unset_remain_time_progress>:

void unset_remain_time_progress(short rt)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
  HD44780_SetCursor(rt, 1);
 80004be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c2:	2101      	movs	r1, #1
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f8fd 	bl	80006c4 <HD44780_SetCursor>
  HD44780_PrintSpecialChar(0x20);
 80004ca:	2020      	movs	r0, #32
 80004cc:	f000 f96a 	bl	80007a4 <HD44780_PrintSpecialChar>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <clear_character>:

void clear_character(short col, short row)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	80fb      	strh	r3, [r7, #6]
 80004e4:	4613      	mov	r3, r2
 80004e6:	80bb      	strh	r3, [r7, #4]
	HD44780_SetCursor(col, row);
 80004e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f8e6 	bl	80006c4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(0x20);
 80004f8:	2020      	movs	r0, #32
 80004fa:	f000 f953 	bl	80007a4 <HD44780_PrintSpecialChar>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <set_cursor_pos>:
void set_cursor_pos(short col, short row)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	80fb      	strh	r3, [r7, #6]
 8000514:	4613      	mov	r3, r2
 8000516:	80bb      	strh	r3, [r7, #4]
	pos.col = col;
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <set_cursor_pos+0x4c>)
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	8013      	strh	r3, [r2, #0]
	pos.row = row;
 800051e:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <set_cursor_pos+0x4c>)
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	8053      	strh	r3, [r2, #2]
	HD44780_SetCursor(col, row);
 8000524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000528:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800052c:	4611      	mov	r1, r2
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f8c8 	bl	80006c4 <HD44780_SetCursor>
	printf("col : %d row : %d\n", pos.col, pos.row);
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <set_cursor_pos+0x4c>)
 8000536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800053a:	4619      	mov	r1, r3
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <set_cursor_pos+0x4c>)
 800053e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000542:	461a      	mov	r2, r3
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <set_cursor_pos+0x50>)
 8000546:	f003 f889 	bl	800365c <iprintf>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000a8 	.word	0x200000a8
 8000558:	08004450 	.word	0x08004450

0800055c <get_cursor_pos>:
Pos get_cursor_pos()
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
	return pos;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <get_cursor_pos+0x24>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	2300      	movs	r3, #0
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	f362 030f 	bfi	r3, r2, #0, #16
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	200000a8 	.word	0x200000a8

08000584 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

  dpRows = rows;
 800058e:	4a3b      	ldr	r2, [pc, #236]	; (800067c <HD44780_Init+0xf8>)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000594:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <HD44780_Init+0xfc>)
 8000596:	2208      	movs	r2, #8
 8000598:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800059a:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <HD44780_Init+0x100>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005a0:	4b36      	ldr	r3, [pc, #216]	; (800067c <HD44780_Init+0xf8>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d907      	bls.n	80005b8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005a8:	4b36      	ldr	r3, [pc, #216]	; (8000684 <HD44780_Init+0x100>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <HD44780_Init+0x100>)
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	e006      	b.n	80005c6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005b8:	4b32      	ldr	r3, [pc, #200]	; (8000684 <HD44780_Init+0x100>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <HD44780_Init+0x100>)
 80005c4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005c6:	f000 f997 	bl	80008f8 <DelayInit>
  HAL_Delay(50);
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f000 ff38 	bl	8001440 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <HD44780_Init+0xfc>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f955 	bl	8000884 <ExpanderWrite>
  HAL_Delay(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 ff2f 	bl	8001440 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005e2:	2030      	movs	r0, #48	; 0x30
 80005e4:	f000 f93c 	bl	8000860 <Write4Bits>
  DelayUS(4500);
 80005e8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005ec:	f000 f9ac 	bl	8000948 <DelayUS>

  Write4Bits(0x03 << 4);
 80005f0:	2030      	movs	r0, #48	; 0x30
 80005f2:	f000 f935 	bl	8000860 <Write4Bits>
  DelayUS(4500);
 80005f6:	f241 1094 	movw	r0, #4500	; 0x1194
 80005fa:	f000 f9a5 	bl	8000948 <DelayUS>

  Write4Bits(0x03 << 4);
 80005fe:	2030      	movs	r0, #48	; 0x30
 8000600:	f000 f92e 	bl	8000860 <Write4Bits>
  DelayUS(4500);
 8000604:	f241 1094 	movw	r0, #4500	; 0x1194
 8000608:	f000 f99e 	bl	8000948 <DelayUS>

  Write4Bits(0x02 << 4);
 800060c:	2020      	movs	r0, #32
 800060e:	f000 f927 	bl	8000860 <Write4Bits>
  DelayUS(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 f998 	bl	8000948 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <HD44780_Init+0x100>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8df 	bl	80007e6 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HD44780_Init+0x104>)
 800062a:	2204      	movs	r2, #4
 800062c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800062e:	f000 f87b 	bl	8000728 <HD44780_Display>
  HD44780_Clear();
 8000632:	f000 f831 	bl	8000698 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HD44780_Init+0x108>)
 8000638:	2202      	movs	r2, #2
 800063a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <HD44780_Init+0x108>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f8cd 	bl	80007e6 <SendCommand>
  DelayUS(4500);
 800064c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000650:	f000 f97a 	bl	8000948 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000654:	490e      	ldr	r1, [pc, #56]	; (8000690 <HD44780_Init+0x10c>)
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f87c 	bl	8000754 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800065c:	490d      	ldr	r1, [pc, #52]	; (8000694 <HD44780_Init+0x110>)
 800065e:	2001      	movs	r0, #1
 8000660:	f000 f878 	bl	8000754 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000664:	f000 f823 	bl	80006ae <HD44780_Home>
  set_cursor_pos(-1, 0);
 8000668:	2100      	movs	r1, #0
 800066a:	f04f 30ff 	mov.w	r0, #4294967295
 800066e:	f7ff ff4b 	bl	8000508 <set_cursor_pos>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000be 	.word	0x200000be
 8000680:	200000c0 	.word	0x200000c0
 8000684:	200000bc 	.word	0x200000bc
 8000688:	200000bf 	.word	0x200000bf
 800068c:	200000bd 	.word	0x200000bd
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008

08000698 <HD44780_Clear>:

void HD44780_Clear()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);	// LCD_CLEARDISPLAY = 0x01
 800069c:	2001      	movs	r0, #1
 800069e:	f000 f8a2 	bl	80007e6 <SendCommand>
  DelayUS(2000);
 80006a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a6:	f000 f94f 	bl	8000948 <DelayUS>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HD44780_Home>:

void HD44780_Home()
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f000 f897 	bl	80007e6 <SendCommand>
  DelayUS(2000);
 80006b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006bc:	f000 f944 	bl	8000948 <DelayUS>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HD44780_SetCursor+0x5c>)
 80006d6:	f107 0408 	add.w	r4, r7, #8
 80006da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HD44780_SetCursor+0x60>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d303      	bcc.n	80006f2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HD44780_SetCursor+0x60>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	f107 0218 	add.w	r2, r7, #24
 80006fa:	4413      	add	r3, r2
 80006fc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4413      	add	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070e:	b25b      	sxtb	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f867 	bl	80007e6 <SendCommand>
}
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	08004464 	.word	0x08004464
 8000724:	200000be 	.word	0x200000be

08000728 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HD44780_Display+0x28>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HD44780_Display+0x28>)
 8000738:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HD44780_Display+0x28>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f84e 	bl	80007e6 <SendCommand>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000bf 	.word	0x200000bf

08000754 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000772:	b25b      	sxtb	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f835 	bl	80007e6 <SendCommand>
  for (int i=0; i<8; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e009      	b.n	8000796 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f839 	bl	8000802 <SendChar>
  for (int i=0; i<8; i++)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3301      	adds	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b07      	cmp	r3, #7
 800079a:	ddf2      	ble.n	8000782 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f826 	bl	8000802 <SendChar>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007c6:	e006      	b.n	80007d6 <HD44780_PrintStr+0x18>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f816 	bl	8000802 <SendChar>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f4      	bne.n	80007c8 <HD44780_PrintStr+0xa>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f812 	bl	800081e <Send>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f804 	bl	800081e <Send>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	460a      	mov	r2, r1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	4613      	mov	r3, r2
 800082c:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;		// 0
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f023 030f 	bic.w	r3, r3, #15
 8000834:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;	// decimal : 16, hexadecimal : 0x20 = 20H
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	4313      	orrs	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f80b 	bl	8000860 <Write4Bits>
  Write4Bits((lownib)|mode);
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	4313      	orrs	r3, r2
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f804 	bl	8000860 <Write4Bits>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f809 	bl	8000884 <ExpanderWrite>
  PulseEnable(value);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f821 	bl	80008bc <PulseEnable>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight; // 0 | 0x08
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <ExpanderWrite+0x30>)
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4313      	orrs	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800089a:	f107 020f 	add.w	r2, r7, #15
 800089e:	230a      	movs	r3, #10
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2301      	movs	r3, #1
 80008a4:	214e      	movs	r1, #78	; 0x4e
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <ExpanderWrite+0x34>)
 80008a8:	f001 f9de 	bl	8001c68 <HAL_I2C_Master_Transmit>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000c0 	.word	0x200000c0
 80008b8:	200000c4 	.word	0x200000c4

080008bc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ffd8 	bl	8000884 <ExpanderWrite>
  DelayUS(20);
 80008d4:	2014      	movs	r0, #20
 80008d6:	f000 f837 	bl	8000948 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f023 0304 	bic.w	r3, r3, #4
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffce 	bl	8000884 <ExpanderWrite>
  DelayUS(20);
 80008e8:	2014      	movs	r0, #20
 80008ea:	f000 f82d 	bl	8000948 <DelayUS>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <DelayInit>:

static void DelayInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <DelayInit+0x48>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <DelayInit+0x48>)
 8000902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000906:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <DelayInit+0x48>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <DelayInit+0x48>)
 800090e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000912:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <DelayInit+0x4c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <DelayInit+0x4c>)
 800091a:	f023 0301 	bic.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <DelayInit+0x4c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <DelayInit+0x4c>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <DelayInit+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000932:	bf00      	nop
  __ASM volatile ("NOP");
 8000934:	bf00      	nop
  __ASM volatile ("NOP");
 8000936:	bf00      	nop
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	e000edf0 	.word	0xe000edf0
 8000944:	e0001000 	.word	0xe0001000

08000948 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <DelayUS+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <DelayUS+0x44>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9a      	lsrs	r2, r3, #18
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <DelayUS+0x48>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <DelayUS+0x48>)
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f6      	bhi.n	800096a <DelayUS+0x22>
}
 800097c:	bf00      	nop
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000018 	.word	0x20000018
 800098c:	431bde83 	.word	0x431bde83
 8000990:	e0001000 	.word	0xe0001000

08000994 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b0a      	cmp	r3, #10
 80009a0:	d106      	bne.n	80009b0 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	2201      	movs	r2, #1
 80009a8:	4907      	ldr	r1, [pc, #28]	; (80009c8 <__io_putchar+0x34>)
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <__io_putchar+0x38>)
 80009ac:	f002 fcb9 	bl	8003322 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b6:	2201      	movs	r2, #1
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <__io_putchar+0x38>)
 80009ba:	f002 fcb2 	bl	8003322 <HAL_UART_Transmit>

	return ch;
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	08004474 	.word	0x08004474
 80009cc:	20000160 	.word	0x20000160

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	; 0x38
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 fcd1 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f913 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 f9f9 	bl	8000dd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e2:	f000 f9cd 	bl	8000d80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009e6:	f000 f94f 	bl	8000c88 <MX_I2C1_Init>
  MX_TIM3_Init();
 80009ea:	f000 f97b 	bl	8000ce4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  char* str = "Enter Password";
 80009ee:	4b7b      	ldr	r3, [pc, #492]	; (8000bdc <main+0x20c>)
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  short checkStrRemoved = 0x00;
 80009f2:	2300      	movs	r3, #0
 80009f4:	86fb      	strh	r3, [r7, #54]	; 0x36
  char btn_key;									// a character that user press([1~9], [A-D])
  char input_key[2] = "\0";
 80009f6:	4b7a      	ldr	r3, [pc, #488]	; (8000be0 <main+0x210>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	843b      	strh	r3, [r7, #32]
  char pw[MAX_CHAR_SIZE] = "\0";					// password that has input_numkey
 80009fc:	4b78      	ldr	r3, [pc, #480]	; (8000be0 <main+0x210>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	823b      	strh	r3, [r7, #16]
 8000a02:	f107 0312 	add.w	r3, r7, #18
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	819a      	strh	r2, [r3, #12]

  char password[PW_MAX_SIZE] = "123456\0";		// door-lock password
 8000a10:	4a74      	ldr	r2, [pc, #464]	; (8000be4 <main+0x214>)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1a:	6018      	str	r0, [r3, #0]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	8019      	strh	r1, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	0c0a      	lsrs	r2, r1, #16
 8000a24:	701a      	strb	r2, [r3, #0]

  HD44780_Init(2);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fdac 	bl	8000584 <HD44780_Init>
  HD44780_PrintStr(str);
 8000a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a2e:	f7ff fec6 	bl	80007be <HD44780_PrintStr>


  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000a32:	486d      	ldr	r0, [pc, #436]	; (8000be8 <main+0x218>)
 8000a34:	f002 f88a 	bl	8002b4c <HAL_TIM_Base_Start_IT>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <main+0x72>
  {
	  /* Starting Error */
	  Error_Handler();
 8000a3e:	f000 fab3 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  short pw_idx = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	86bb      	strh	r3, [r7, #52]	; 0x34
  while (1)
  {
	  /* time out */
	  int timeout = ((remain_time_start_idx < 0) ? 0x10 : 0x00);
 8000a46:	4b69      	ldr	r3, [pc, #420]	; (8000bec <main+0x21c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da01      	bge.n	8000a52 <main+0x82>
 8000a4e:	2310      	movs	r3, #16
 8000a50:	e000      	b.n	8000a54 <main+0x84>
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c

	  /* check corret btn_key */
	  if( (btn_key = scan_Rx()) == 255)
 8000a56:	f7ff fb83 	bl	8000160 <scan_Rx>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000a60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a64:	2bff      	cmp	r3, #255	; 0xff
 8000a66:	d105      	bne.n	8000a74 <main+0xa4>
	  {
		  if(!(timeout & 0x10))
 8000a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 80b1 	beq.w	8000bd6 <main+0x206>
			  continue;
		  }
	  }

	  /* set checkStrRemoved when condition is true */
	  if((btn_key != 255) && (checkStrRemoved == 0x00) && (btn_key != '-') )
 8000a74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a78:	2bff      	cmp	r3, #255	; 0xff
 8000a7a:	d009      	beq.n	8000a90 <main+0xc0>
 8000a7c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d105      	bne.n	8000a90 <main+0xc0>
 8000a84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a88:	2b2d      	cmp	r3, #45	; 0x2d
 8000a8a:	d001      	beq.n	8000a90 <main+0xc0>
	  {
		  checkStrRemoved = 0x01;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	86fb      	strh	r3, [r7, #54]	; 0x36
	  }

	  /* if "Enter Password" string is removed 딱 한 번 실행되는 블록*/
	  if(checkStrRemoved == 0x01)
 8000a90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10d      	bne.n	8000ab4 <main+0xe4>
	  {
		  HD44780_Clear();
 8000a98:	f7ff fdfe 	bl	8000698 <HD44780_Clear>
		  checkStrRemoved = -1;
 8000a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa0:	86fb      	strh	r3, [r7, #54]	; 0x36
		  unlock = 0x01;
 8000aa2:	4b53      	ldr	r3, [pc, #332]	; (8000bf0 <main+0x220>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	801a      	strh	r2, [r3, #0]

		  set_remain_time_progress();
 8000aa8:	f7ff fce8 	bl	800047c <set_remain_time_progress>
		  gTimerCnt = 999;
 8000aac:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <main+0x224>)
 8000aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab2:	601a      	str	r2, [r3, #0]
	  }

	  /* print keypad value into i2c lcd */
	  if(unlock)
 8000ab4:	4b4e      	ldr	r3, [pc, #312]	; (8000bf0 <main+0x220>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 8084 	beq.w	8000bc8 <main+0x1f8>
	  {

		  input_key[0] = btn_key;
 8000ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ac4:	f887 3020 	strb.w	r3, [r7, #32]

		  /* remove */
		  if(!strcmp(input_key, "-"))
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	494a      	ldr	r1, [pc, #296]	; (8000bf8 <main+0x228>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb3c 	bl	800014c <strcmp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d130      	bne.n	8000b3c <main+0x16c>
		  {
			  Pos current_cursor_pos = get_cursor_pos();
 8000ada:	f7ff fd3f 	bl	800055c <get_cursor_pos>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	607b      	str	r3, [r7, #4]
			  if(current_cursor_pos.col >= 0 && current_cursor_pos.col <= 15)
 8000ae2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	dbad      	blt.n	8000a46 <main+0x76>
 8000aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	dca9      	bgt.n	8000a46 <main+0x76>
			  {
				  clear_character(current_cursor_pos.col, current_cursor_pos.row);
 8000af2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fceb 	bl	80004d8 <clear_character>
				  set_cursor_pos(--current_cursor_pos.col, current_cursor_pos.row);
 8000b02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	80bb      	strh	r3, [r7, #4]
 8000b10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fcf4 	bl	8000508 <set_cursor_pos>
				  pw[pw_idx--] = NULL;
 8000b20:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8000b24:	b293      	uxth	r3, r2
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b32:	4413      	add	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	f803 2c28 	strb.w	r2, [r3, #-40]
 8000b3a:	e784      	b.n	8000a46 <main+0x76>
			  }
			  continue;
		  }

		  /* check time out */
		  int checkPw = (((!strcmp(input_key, "*")) == 1) ? 0x01 : 0x00);
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	492e      	ldr	r1, [pc, #184]	; (8000bfc <main+0x22c>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb02 	bl	800014c <strcmp>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	2300      	movne	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
		  if(checkPw || timeout)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <main+0x192>
 8000b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01a      	beq.n	8000b98 <main+0x1c8>
		  {
			  checkPassword(pw, password);
 8000b62:	f107 0208 	add.w	r2, r7, #8
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fc77 	bl	8000460 <checkPassword>
			  if(timeout & 0x10)
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d025      	beq.n	8000bc8 <main+0x1f8>
			  {
				  HD44780_Clear();
 8000b7c:	f7ff fd8c 	bl	8000698 <HD44780_Clear>
				  success_set_remain_time_progress = 0;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <main+0x230>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	801a      	strh	r2, [r3, #0]
				  set_remain_time_progress();
 8000b86:	f7ff fc79 	bl	800047c <set_remain_time_progress>
				  remain_time_start_idx = 10;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <main+0x21c>)
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	601a      	str	r2, [r3, #0]
				  pw_idx = -1;
 8000b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b94:	86bb      	strh	r3, [r7, #52]	; 0x34
			  if(timeout & 0x10)
 8000b96:	e017      	b.n	8000bc8 <main+0x1f8>
			  }

		  }else
		  {
			  /* write */
			  if(pw_idx < MAX_CHAR_SIZE)
 8000b98:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	dc13      	bgt.n	8000bc8 <main+0x1f8>
			  {
				  pw[pw_idx] = btn_key;
 8000ba0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000ba4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ba8:	4413      	add	r3, r2
 8000baa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000bae:	f803 2c28 	strb.w	r2, [r3, #-40]
				  set_cursor_pos(pw_idx, 0);
 8000bb2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fca5 	bl	8000508 <set_cursor_pos>
				  HD44780_PrintStr(input_key);
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fdfb 	bl	80007be <HD44780_PrintStr>
			  }
		  }
	  }
	  pw_idx++;
 8000bc8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000bd4:	e737      	b.n	8000a46 <main+0x76>
			  continue;
 8000bd6:	bf00      	nop
  {
 8000bd8:	e735      	b.n	8000a46 <main+0x76>
 8000bda:	bf00      	nop
 8000bdc:	08004478 	.word	0x08004478
 8000be0:	08004490 	.word	0x08004490
 8000be4:	08004494 	.word	0x08004494
 8000be8:	20000118 	.word	0x20000118
 8000bec:	20000014 	.word	0x20000014
 8000bf0:	200000ac 	.word	0x200000ac
 8000bf4:	20000010 	.word	0x20000010
 8000bf8:	08004488 	.word	0x08004488
 8000bfc:	0800448c 	.word	0x0800448c
 8000c00:	200000a4 	.word	0x200000a4

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 fd1a 	bl	800364c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c32:	2302      	movs	r3, #2
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c3a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fb15 	bl	8002274 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c50:	f000 f9aa 	bl	8000fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fd80 	bl	8002774 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c7a:	f000 f995 	bl	8000fa8 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3740      	adds	r7, #64	; 0x40
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <MX_I2C1_Init+0x54>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_I2C1_Init+0x58>)
 8000c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cc6:	f000 fe97 	bl	80019f8 <HAL_I2C_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd0:	f000 f96a 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000c4 	.word	0x200000c4
 8000cdc:	40005400 	.word	0x40005400
 8000ce0:	000186a0 	.word	0x000186a0

08000ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <MX_TIM3_Init+0x98>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d08:	223f      	movs	r2, #63	; 0x3f
 8000d0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d28:	f001 fec0 	bl	8002aac <HAL_TIM_Base_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 f939 	bl	8000fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d44:	f002 f85c 	bl	8002e00 <HAL_TIM_ConfigClockSource>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d4e:	f000 f92b 	bl	8000fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d60:	f002 fa22 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d6a:	f000 f91d 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000118 	.word	0x20000118
 8000d7c:	40000400 	.word	0x40000400

08000d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART2_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db8:	f002 fa66 	bl	8003288 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f000 f8f1 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000160 	.word	0x20000160
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de8:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a4e      	ldr	r2, [pc, #312]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a48      	ldr	r2, [pc, #288]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a42      	ldr	r2, [pc, #264]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a3c      	ldr	r2, [pc, #240]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_GPIO_Init+0x154>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|R2_Pin|R3_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000e4e:	4837      	ldr	r0, [pc, #220]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e50:	f000 fd97 	bl	8001982 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5a:	4835      	ldr	r0, [pc, #212]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e5c:	f000 fd91 	bl	8001982 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	4833      	ldr	r0, [pc, #204]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000e66:	f000 fd8c 	bl	8001982 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <MX_GPIO_Init+0x164>)
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	482d      	ldr	r0, [pc, #180]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000e80:	f000 fc0e 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin R2_Pin R3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|R2_Pin|R3_Pin;
 8000e84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4823      	ldr	r0, [pc, #140]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e9e:	f000 fbff 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481d      	ldr	r0, [pc, #116]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000ebc:	f000 fbf0 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_Pin */
  GPIO_InitStruct.Pin = R4_Pin;
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R4_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000ed8:	f000 fbe2 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
 8000edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480e      	ldr	r0, [pc, #56]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000ef2:	f000 fbd5 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin|C2_Pin;
 8000ef6:	2338      	movs	r3, #56	; 0x38
 8000ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000f0a:	f000 fbc9 	bl	80016a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2028      	movs	r0, #40	; 0x28
 8000f14:	f000 fb8d 	bl	8001632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f18:	2028      	movs	r0, #40	; 0x28
 8000f1a:	f000 fba6 	bl	800166a <HAL_NVIC_EnableIRQ>

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	40011000 	.word	0x40011000
 8000f38:	10110000 	.word	0x10110000

08000f3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	if(unlock)
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d020      	beq.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		gTimerCnt++;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f56:	6013      	str	r3, [r2, #0]
		if(gTimerCnt == 1000)
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f60:	d116      	bne.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			if(remain_time_start_idx >= 0 && success_set_remain_time_progress)
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db12      	blt.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x54>
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00d      	beq.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				unset_remain_time_progress(remain_time_start_idx);
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa9a 	bl	80004b4 <unset_remain_time_progress>
				remain_time_start_idx--;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]
				gTimerCnt = 0;
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000ac 	.word	0x200000ac
 8000f9c:	20000010 	.word	0x20000010
 8000fa0:	20000014 	.word	0x20000014
 8000fa4:	200000a4 	.word	0x200000a4

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_MspInit+0x5c>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_MspInit+0x5c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x5c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_MspInit+0x5c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_MspInit+0x60>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_MspInit+0x60>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	40010000 	.word	0x40010000

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_I2C_MspInit+0x90>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d132      	bne.n	800109e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_I2C_MspInit+0x94>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_I2C_MspInit+0x94>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_I2C_MspInit+0x94>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	2312      	movs	r3, #18
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <HAL_I2C_MspInit+0x98>)
 8001066:	f000 fb1b 	bl	80016a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_I2C_MspInit+0x9c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_I2C_MspInit+0x9c>)
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_I2C_MspInit+0x94>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_I2C_MspInit+0x94>)
 800108c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_I2C_MspInit+0x94>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	40010000 	.word	0x40010000

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	201d      	movs	r0, #29
 80010e8:	f000 faa3 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010ec:	201d      	movs	r0, #29
 80010ee:	f000 fabc 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000400 	.word	0x40000400
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <HAL_UART_MspInit+0x70>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d123      	bne.n	800116c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x74>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	4a13      	ldr	r2, [pc, #76]	; (8001178 <HAL_UART_MspInit+0x74>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112e:	61d3      	str	r3, [r2, #28]
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x74>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_MspInit+0x74>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_UART_MspInit+0x74>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_UART_MspInit+0x74>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001154:	230c      	movs	r3, #12
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_MspInit+0x78>)
 8001168:	f000 fa9a 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40004400 	.word	0x40004400
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <HardFault_Handler+0x4>

08001192 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <BusFault_Handler+0x4>

0800119e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f91c 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM3_IRQHandler+0x10>)
 80011da:	f001 fd09 	bl	8002bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000118 	.word	0x20000118

080011e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011f0:	f000 fbe0 	bl	80019b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e00a      	b.n	8001220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800120a:	f3af 8000 	nop.w
 800120e:	4601      	mov	r1, r0
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	b2ca      	uxtb	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbf0      	blt.n	800120a <_read+0x12>
	}

return len;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e009      	b.n	8001258 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fba1 	bl	8000994 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbf1      	blt.n	8001244 <_write+0x12>
	}
	return len;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_close>:

int _close(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001290:	605a      	str	r2, [r3, #4]
	return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <_isatty>:

int _isatty(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	return 1;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
	...

080012cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <_sbrk+0x50>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x16>
		heap_end = &end;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <_sbrk+0x50>)
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <_sbrk+0x54>)
 80012e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <_sbrk+0x50>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <_sbrk+0x50>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	466a      	mov	r2, sp
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d907      	bls.n	8001306 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012f6:	f002 f97f 	bl	80035f8 <__errno>
 80012fa:	4602      	mov	r2, r0
 80012fc:	230c      	movs	r3, #12
 80012fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e006      	b.n	8001314 <_sbrk+0x48>
	}

	heap_end += incr;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <_sbrk+0x50>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a03      	ldr	r2, [pc, #12]	; (800131c <_sbrk+0x50>)
 8001310:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200000b0 	.word	0x200000b0
 8001320:	200001b0 	.word	0x200001b0

08001324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001356:	f7ff ffe5 	bl	8001324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f002 f953 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135e:	f7ff fb37 	bl	80009d0 <main>
  bx lr
 8001362:	4770      	bx	lr
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800136c:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 8001370:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001374:	200001ac 	.word	0x200001ac

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x28>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f945 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fe0c 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f95d 	bl	8001686 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f925 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000018 	.word	0x20000018
 8001400:	20000020 	.word	0x20000020
 8001404:	2000001c 	.word	0x2000001c

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000020 	.word	0x20000020
 8001428:	200001a4 	.word	0x200001a4

0800142c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	200001a4 	.word	0x200001a4

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff fff0 	bl	800142c <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_Delay+0x40>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffe0 	bl	800142c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000020 	.word	0x20000020

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <__NVIC_EnableIRQ+0x34>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff90 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff2d 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff42 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b08b      	sub	sp, #44	; 0x2c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e127      	b.n	8001904 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b4:	2201      	movs	r2, #1
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8116 	bne.w	80018fe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d034      	beq.n	8001744 <HAL_GPIO_Init+0xa4>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d80d      	bhi.n	80016fa <HAL_GPIO_Init+0x5a>
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d02b      	beq.n	800173a <HAL_GPIO_Init+0x9a>
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d804      	bhi.n	80016f0 <HAL_GPIO_Init+0x50>
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d031      	beq.n	800174e <HAL_GPIO_Init+0xae>
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d01c      	beq.n	8001728 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ee:	e048      	b.n	8001782 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d043      	beq.n	800177c <HAL_GPIO_Init+0xdc>
 80016f4:	2b11      	cmp	r3, #17
 80016f6:	d01b      	beq.n	8001730 <HAL_GPIO_Init+0x90>
          break;
 80016f8:	e043      	b.n	8001782 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016fa:	4a89      	ldr	r2, [pc, #548]	; (8001920 <HAL_GPIO_Init+0x280>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d026      	beq.n	800174e <HAL_GPIO_Init+0xae>
 8001700:	4a87      	ldr	r2, [pc, #540]	; (8001920 <HAL_GPIO_Init+0x280>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d806      	bhi.n	8001714 <HAL_GPIO_Init+0x74>
 8001706:	4a87      	ldr	r2, [pc, #540]	; (8001924 <HAL_GPIO_Init+0x284>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d020      	beq.n	800174e <HAL_GPIO_Init+0xae>
 800170c:	4a86      	ldr	r2, [pc, #536]	; (8001928 <HAL_GPIO_Init+0x288>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d01d      	beq.n	800174e <HAL_GPIO_Init+0xae>
          break;
 8001712:	e036      	b.n	8001782 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001714:	4a85      	ldr	r2, [pc, #532]	; (800192c <HAL_GPIO_Init+0x28c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0xae>
 800171a:	4a85      	ldr	r2, [pc, #532]	; (8001930 <HAL_GPIO_Init+0x290>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d016      	beq.n	800174e <HAL_GPIO_Init+0xae>
 8001720:	4a84      	ldr	r2, [pc, #528]	; (8001934 <HAL_GPIO_Init+0x294>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0xae>
          break;
 8001726:	e02c      	b.n	8001782 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e028      	b.n	8001782 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e023      	b.n	8001782 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	3308      	adds	r3, #8
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e01e      	b.n	8001782 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	330c      	adds	r3, #12
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e019      	b.n	8001782 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001756:	2304      	movs	r3, #4
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e012      	b.n	8001782 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	611a      	str	r2, [r3, #16]
          break;
 800176e:	e008      	b.n	8001782 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	615a      	str	r2, [r3, #20]
          break;
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d801      	bhi.n	800178c <HAL_GPIO_Init+0xec>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	e001      	b.n	8001790 <HAL_GPIO_Init+0xf0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3304      	adds	r3, #4
 8001790:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d802      	bhi.n	800179e <HAL_GPIO_Init+0xfe>
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x104>
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3b08      	subs	r3, #8
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	210f      	movs	r1, #15
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	6a39      	ldr	r1, [r7, #32]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8096 	beq.w	80018fe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d2:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_GPIO_Init+0x298>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_GPIO_Init+0x298>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	4b56      	ldr	r3, [pc, #344]	; (8001938 <HAL_GPIO_Init+0x298>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ea:	4a54      	ldr	r2, [pc, #336]	; (800193c <HAL_GPIO_Init+0x29c>)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_GPIO_Init+0x2a0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x19e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <HAL_GPIO_Init+0x2a4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x19a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a49      	ldr	r2, [pc, #292]	; (8001948 <HAL_GPIO_Init+0x2a8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x196>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_Init+0x2ac>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x192>
 800182e:	2303      	movs	r3, #3
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x1a0>
 8001832:	2304      	movs	r3, #4
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x1a0>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x1a0>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x1a0>
 800183e:	2300      	movs	r3, #0
 8001840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001850:	493a      	ldr	r1, [pc, #232]	; (800193c <HAL_GPIO_Init+0x29c>)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4938      	ldr	r1, [pc, #224]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	43db      	mvns	r3, r3
 8001880:	4933      	ldr	r1, [pc, #204]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 8001882:	4013      	ands	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	492e      	ldr	r1, [pc, #184]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4929      	ldr	r1, [pc, #164]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	4924      	ldr	r1, [pc, #144]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	491f      	ldr	r1, [pc, #124]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	491a      	ldr	r1, [pc, #104]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60cb      	str	r3, [r1, #12]
 80018ee:	e006      	b.n	80018fe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4915      	ldr	r1, [pc, #84]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	3301      	adds	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	f47f aed0 	bne.w	80016b4 <HAL_GPIO_Init+0x14>
  }
}
 8001914:	bf00      	nop
 8001916:	372c      	adds	r7, #44	; 0x2c
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	10210000 	.word	0x10210000
 8001924:	10110000 	.word	0x10110000
 8001928:	10120000 	.word	0x10120000
 800192c:	10310000 	.word	0x10310000
 8001930:	10320000 	.word	0x10320000
 8001934:	10220000 	.word	0x10220000
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	40010800 	.word	0x40010800
 8001944:	40010c00 	.word	0x40010c00
 8001948:	40011000 	.word	0x40011000
 800194c:	40011400 	.word	0x40011400
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]
 800198e:	4613      	mov	r3, r2
 8001990:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001992:	787b      	ldrb	r3, [r7, #1]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001998:	887a      	ldrh	r2, [r7, #2]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800199e:	e003      	b.n	80019a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	041a      	lsls	r2, r3, #16
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	611a      	str	r2, [r3, #16]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f806 	bl	80019e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e11f      	b.n	8001c4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fafa 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	; 0x24
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a5c:	f000 ffe0 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a7b      	ldr	r2, [pc, #492]	; (8001c54 <HAL_I2C_Init+0x25c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d807      	bhi.n	8001a7c <HAL_I2C_Init+0x84>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <HAL_I2C_Init+0x260>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bf94      	ite	ls
 8001a74:	2301      	movls	r3, #1
 8001a76:	2300      	movhi	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e006      	b.n	8001a8a <HAL_I2C_Init+0x92>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a77      	ldr	r2, [pc, #476]	; (8001c5c <HAL_I2C_Init+0x264>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf94      	ite	ls
 8001a84:	2301      	movls	r3, #1
 8001a86:	2300      	movhi	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0db      	b.n	8001c4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a72      	ldr	r2, [pc, #456]	; (8001c60 <HAL_I2C_Init+0x268>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <HAL_I2C_Init+0x25c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d802      	bhi.n	8001acc <HAL_I2C_Init+0xd4>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	e009      	b.n	8001ae0 <HAL_I2C_Init+0xe8>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	4a63      	ldr	r2, [pc, #396]	; (8001c64 <HAL_I2C_Init+0x26c>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	3301      	adds	r3, #1
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4956      	ldr	r1, [pc, #344]	; (8001c54 <HAL_I2C_Init+0x25c>)
 8001afc:	428b      	cmp	r3, r1
 8001afe:	d80d      	bhi.n	8001b1c <HAL_I2C_Init+0x124>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1e59      	subs	r1, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	bf38      	it	cc
 8001b18:	2304      	movcc	r3, #4
 8001b1a:	e04f      	b.n	8001bbc <HAL_I2C_Init+0x1c4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d111      	bne.n	8001b48 <HAL_I2C_Init+0x150>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	440b      	add	r3, r1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e012      	b.n	8001b6e <HAL_I2C_Init+0x176>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Init+0x17e>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e022      	b.n	8001bbc <HAL_I2C_Init+0x1c4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10e      	bne.n	8001b9c <HAL_I2C_Init+0x1a4>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e58      	subs	r0, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	440b      	add	r3, r1
 8001b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9a:	e00f      	b.n	8001bbc <HAL_I2C_Init+0x1c4>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	6809      	ldr	r1, [r1, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6911      	ldr	r1, [r2, #16]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	4311      	orrs	r1, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	000186a0 	.word	0x000186a0
 8001c58:	001e847f 	.word	0x001e847f
 8001c5c:	003d08ff 	.word	0x003d08ff
 8001c60:	431bde83 	.word	0x431bde83
 8001c64:	10624dd3 	.word	0x10624dd3

08001c68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	460b      	mov	r3, r1
 8001c76:	817b      	strh	r3, [r7, #10]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fbd6 	bl	800142c <HAL_GetTick>
 8001c80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	f040 80e0 	bne.w	8001e50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2319      	movs	r3, #25
 8001c96:	2201      	movs	r2, #1
 8001c98:	4970      	ldr	r1, [pc, #448]	; (8001e5c <HAL_I2C_Master_Transmit+0x1f4>)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f964 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e0d3      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2C_Master_Transmit+0x50>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e0cc      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d007      	beq.n	8001cde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2221      	movs	r2, #33	; 0x21
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	893a      	ldrh	r2, [r7, #8]
 8001d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d20:	8979      	ldrh	r1, [r7, #10]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f89c 	bl	8001e64 <I2C_MasterRequestWrite>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e08d      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d4c:	e066      	b.n	8001e1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9de 	bl	8002114 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d107      	bne.n	8001d76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06b      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d11b      	bne.n	8001df0 <HAL_I2C_Master_Transmit+0x188>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d017      	beq.n	8001df0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	6a39      	ldr	r1, [r7, #32]
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f9ce 	bl	8002196 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00d      	beq.n	8001e1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d107      	bne.n	8001e18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e01a      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d194      	bne.n	8001d4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
  }
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	00100002 	.word	0x00100002
 8001e60:	ffff0000 	.word	0xffff0000

08001e64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	460b      	mov	r3, r1
 8001e72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d006      	beq.n	8001e8e <I2C_MasterRequestWrite+0x2a>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d003      	beq.n	8001e8e <I2C_MasterRequestWrite+0x2a>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e8c:	d108      	bne.n	8001ea0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e00b      	b.n	8001eb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d107      	bne.n	8001eb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f84f 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ede:	d103      	bne.n	8001ee8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e035      	b.n	8001f58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ef4:	d108      	bne.n	8001f08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e01b      	b.n	8001f40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	11db      	asrs	r3, r3, #7
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 0306 	and.w	r3, r3, #6
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f063 030f 	orn	r3, r3, #15
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <I2C_MasterRequestWrite+0xfc>)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f875 	bl	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e010      	b.n	8001f58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f36:	897b      	ldrh	r3, [r7, #10]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <I2C_MasterRequestWrite+0x100>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f865 	bl	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	00010008 	.word	0x00010008
 8001f64:	00010002 	.word	0x00010002

08001f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f78:	e025      	b.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d021      	beq.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f82:	f7ff fa53 	bl	800142c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d302      	bcc.n	8001f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d116      	bne.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e023      	b.n	800200e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10d      	bne.n	8001fec <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	e00c      	b.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	429a      	cmp	r2, r3
 800200a:	d0b6      	beq.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002024:	e051      	b.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002034:	d123      	bne.n	800207e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002044:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800204e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e046      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d021      	beq.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7ff f9d1 	bl	800142c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d116      	bne.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e020      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10c      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4013      	ands	r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	e00b      	b.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d18d      	bne.n	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	e02d      	b.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f878 	bl	8002218 <I2C_IsAcknowledgeFailed>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e02d      	b.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d021      	beq.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7ff f977 	bl	800142c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e007      	b.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d1ca      	bne.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021a2:	e02d      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f837 	bl	8002218 <I2C_IsAcknowledgeFailed>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e02d      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d021      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7ff f936 	bl	800142c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d302      	bcc.n	80021d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d116      	bne.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e007      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d1ca      	bne.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	d11b      	bne.n	8002268 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002238:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f043 0204 	orr.w	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e26c      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8087 	beq.w	80023a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002294:	4b92      	ldr	r3, [pc, #584]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00c      	beq.n	80022ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a0:	4b8f      	ldr	r3, [pc, #572]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d112      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
 80022ac:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d10b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	4b89      	ldr	r3, [pc, #548]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d06c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x12c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d168      	bne.n	80023a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e246      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x76>
 80022dc:	4b80      	ldr	r3, [pc, #512]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7f      	ldr	r2, [pc, #508]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e02e      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x98>
 80022f2:	4b7b      	ldr	r3, [pc, #492]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7a      	ldr	r2, [pc, #488]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b78      	ldr	r3, [pc, #480]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a77      	ldr	r2, [pc, #476]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0xbc>
 8002316:	4b72      	ldr	r3, [pc, #456]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a71      	ldr	r2, [pc, #452]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6e      	ldr	r2, [pc, #440]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 8002330:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a67      	ldr	r2, [pc, #412]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff f86c 	bl	800142c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff f868 	bl	800142c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1fa      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xe4>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff f858 	bl	800142c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff f854 	bl	800142c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1e6      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x10c>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ae:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ba:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
 80023c6:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1ba      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4939      	ldr	r1, [pc, #228]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7ff f80d 	bl	800142c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff f809 	bl	800142c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e19b      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4927      	ldr	r1, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe ffec 	bl	800142c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe ffe8 	bl	800142c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e17a      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03a      	beq.n	80024f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_RCC_OscConfig+0x274>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe ffcc 	bl	800142c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe ffc8 	bl	800142c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e15a      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f000 fada 	bl	8002a70 <RCC_Delay>
 80024bc:	e01c      	b.n	80024f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_OscConfig+0x274>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7fe ffb2 	bl	800142c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe ffae 	bl	800142c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d908      	bls.n	80024ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e140      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	42420000 	.word	0x42420000
 80024e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b9e      	ldr	r3, [pc, #632]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e9      	bne.n	80024cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a6 	beq.w	8002652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b97      	ldr	r3, [pc, #604]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b94      	ldr	r3, [pc, #592]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a93      	ldr	r2, [pc, #588]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b91      	ldr	r3, [pc, #580]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b8e      	ldr	r3, [pc, #568]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b8b      	ldr	r3, [pc, #556]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a8a      	ldr	r2, [pc, #552]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe ff6f 	bl	800142c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7fe ff6b 	bl	800142c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0fd      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x312>
 8002578:	4b7b      	ldr	r3, [pc, #492]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a7a      	ldr	r2, [pc, #488]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	e02d      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x334>
 800258e:	4b76      	ldr	r3, [pc, #472]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a75      	ldr	r2, [pc, #468]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	4b73      	ldr	r3, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a72      	ldr	r2, [pc, #456]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	e01c      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x356>
 80025b0:	4b6d      	ldr	r3, [pc, #436]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a6c      	ldr	r2, [pc, #432]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a69      	ldr	r2, [pc, #420]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025ca:	4b67      	ldr	r3, [pc, #412]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4a66      	ldr	r2, [pc, #408]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6213      	str	r3, [r2, #32]
 80025d6:	4b64      	ldr	r3, [pc, #400]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a63      	ldr	r2, [pc, #396]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7fe ff1f 	bl	800142c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe ff1b 	bl	800142c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0ab      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ee      	beq.n	80025f2 <HAL_RCC_OscConfig+0x37e>
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7fe ff09 	bl	800142c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe ff05 	bl	800142c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e095      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ee      	bne.n	800261e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4b48      	ldr	r3, [pc, #288]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a47      	ldr	r2, [pc, #284]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8081 	beq.w	800275e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265c:	4b42      	ldr	r3, [pc, #264]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d061      	beq.n	800272c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d146      	bne.n	80026fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_RCC_OscConfig+0x4fc>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fed9 	bl	800142c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fed5 	bl	800142c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e067      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d108      	bne.n	80026b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	492d      	ldr	r1, [pc, #180]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a19      	ldr	r1, [r3, #32]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	430b      	orrs	r3, r1
 80026ca:	4927      	ldr	r1, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x4fc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fea9 	bl	800142c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fea5 	bl	800142c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e037      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x46a>
 80026fc:	e02f      	b.n	800275e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_RCC_OscConfig+0x4fc>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fe92 	bl	800142c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fe8e 	bl	800142c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e020      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x498>
 800272a:	e018      	b.n	800275e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e013      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	429a      	cmp	r2, r3
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	40007000 	.word	0x40007000
 8002770:	42420060 	.word	0x42420060

08002774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0d0      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d910      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b67      	ldr	r3, [pc, #412]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4965      	ldr	r1, [pc, #404]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0b8      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d0:	4b59      	ldr	r3, [pc, #356]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e8:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	494d      	ldr	r1, [pc, #308]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d040      	beq.n	8002894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d115      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e07f      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e073      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e06b      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f023 0203 	bic.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4936      	ldr	r1, [pc, #216]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002864:	f7fe fde2 	bl	800142c <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fdde 	bl	800142c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e053      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 020c 	and.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d1eb      	bne.n	800286c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d210      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	4922      	ldr	r1, [pc, #136]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e032      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4916      	ldr	r1, [pc, #88]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	490e      	ldr	r1, [pc, #56]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002902:	f000 f821 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002906:	4601      	mov	r1, r0
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_RCC_ClockConfig+0x1c8>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	fa21 f303 	lsr.w	r3, r1, r3
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1cc>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1d0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fd40 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000
 8002938:	40021000 	.word	0x40021000
 800293c:	080044b0 	.word	0x080044b0
 8002940:	20000018 	.word	0x20000018
 8002944:	2000001c 	.word	0x2000001c

08002948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	b490      	push	{r4, r7}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002950:	1d3c      	adds	r4, r7, #4
 8002952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x40>
 8002982:	2b08      	cmp	r3, #8
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x46>
 8002986:	e02d      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xbc>)
 800298a:	623b      	str	r3, [r7, #32]
      break;
 800298c:	e02d      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	0c9b      	lsrs	r3, r3, #18
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800299a:	4413      	add	r3, r2
 800299c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c5b      	lsrs	r3, r3, #17
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ba:	4413      	add	r3, r2
 80029bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029c6:	fb02 f203 	mul.w	r2, r2, r3
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	e004      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	623b      	str	r3, [r7, #32]
      break;
 80029e2:	e002      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e6:	623b      	str	r3, [r7, #32]
      break;
 80029e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3728      	adds	r7, #40	; 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc90      	pop	{r4, r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	0800449c 	.word	0x0800449c
 80029fc:	080044ac 	.word	0x080044ac
 8002a00:	40021000 	.word	0x40021000
 8002a04:	007a1200 	.word	0x007a1200
 8002a08:	003d0900 	.word	0x003d0900

08002a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000018 	.word	0x20000018

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff2 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a28:	4601      	mov	r1, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4a03      	ldr	r2, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	080044c0 	.word	0x080044c0

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffde 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a50:	4601      	mov	r1, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0adb      	lsrs	r3, r3, #11
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	080044c0 	.word	0x080044c0

08002a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <RCC_Delay+0x34>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <RCC_Delay+0x38>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0a5b      	lsrs	r3, r3, #9
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a8c:	bf00      	nop
  }
  while (Delay --);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	60fa      	str	r2, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f9      	bne.n	8002a8c <RCC_Delay+0x1c>
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000018 	.word	0x20000018
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e041      	b.n	8002b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe faf0 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f000 fa64 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d001      	beq.n	8002b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e03a      	b.n	8002bda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_TIM_Base_Start_IT+0x98>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00e      	beq.n	8002ba4 <HAL_TIM_Base_Start_IT+0x58>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8e:	d009      	beq.n	8002ba4 <HAL_TIM_Base_Start_IT+0x58>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_TIM_Base_Start_IT+0x58>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a13      	ldr	r2, [pc, #76]	; (8002bec <HAL_TIM_Base_Start_IT+0xa0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d111      	bne.n	8002bc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d010      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc6:	e007      	b.n	8002bd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800

08002bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0202 	mvn.w	r2, #2
 8002c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f9a4 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f997 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f9a6 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0204 	mvn.w	r2, #4
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f97a 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f96d 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f97c 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0208 	mvn.w	r2, #8
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f950 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f943 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f952 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0210 	mvn.w	r2, #16
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f926 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f919 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f928 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0201 	mvn.w	r2, #1
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe f8e4 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d10e      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d107      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa6b 	bl	8003276 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8ec 	bl	8002fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0220 	mvn.w	r2, #32
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa36 	bl	8003264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_TIM_ConfigClockSource+0x18>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0a6      	b.n	8002f66 <HAL_TIM_ConfigClockSource+0x166>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d067      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0x120>
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d80b      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x6c>
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d073      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x140>
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d802      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x62>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d06f      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e60:	e078      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d06c      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x140>
 8002e66:	2b30      	cmp	r3, #48	; 0x30
 8002e68:	d06a      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e6a:	e073      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e6c:	2b70      	cmp	r3, #112	; 0x70
 8002e6e:	d00d      	beq.n	8002e8c <HAL_TIM_ConfigClockSource+0x8c>
 8002e70:	2b70      	cmp	r3, #112	; 0x70
 8002e72:	d804      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x7e>
 8002e74:	2b50      	cmp	r3, #80	; 0x50
 8002e76:	d033      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xe0>
 8002e78:	2b60      	cmp	r3, #96	; 0x60
 8002e7a:	d041      	beq.n	8002f00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e7c:	e06a      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	d066      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x152>
 8002e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e88:	d017      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e8a:	e063      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f000 f965 	bl	800316a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
      break;
 8002eb8:	e04c      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f000 f94e 	bl	800316a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e039      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f000 f8c5 	bl	800307c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2150      	movs	r1, #80	; 0x50
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f91c 	bl	8003136 <TIM_ITRx_SetConfig>
      break;
 8002efe:	e029      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f000 f8e3 	bl	80030d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2160      	movs	r1, #96	; 0x60
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f90c 	bl	8003136 <TIM_ITRx_SetConfig>
      break;
 8002f1e:	e019      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f000 f8a5 	bl	800307c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f8fc 	bl	8003136 <TIM_ITRx_SetConfig>
      break;
 8002f3e:	e009      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f000 f8f3 	bl	8003136 <TIM_ITRx_SetConfig>
        break;
 8002f50:	e000      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a26      	ldr	r2, [pc, #152]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a25      	ldr	r2, [pc, #148]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d108      	bne.n	8002ffa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800

0800307c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f023 0201 	bic.w	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f023 030a 	bic.w	r3, r3, #10
 80030b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	621a      	str	r2, [r3, #32]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f023 0210 	bic.w	r2, r3, #16
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003102:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	031b      	lsls	r3, r3, #12
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003114:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	f043 0307 	orr.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800316a:	b480      	push	{r7}
 800316c:	b087      	sub	sp, #28
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003184:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	021a      	lsls	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	431a      	orrs	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	609a      	str	r2, [r3, #8]
}
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031bc:	2302      	movs	r3, #2
 80031be:	e046      	b.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d009      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a10      	ldr	r2, [pc, #64]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10c      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800

08003264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e03f      	b.n	800331a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd ff28 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f905 	bl	80034dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08a      	sub	sp, #40	; 0x28
 8003326:	af02      	add	r7, sp, #8
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	d17c      	bne.n	800343c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_UART_Transmit+0x2c>
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e075      	b.n	800343e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_UART_Transmit+0x3e>
 800335c:	2302      	movs	r3, #2
 800335e:	e06e      	b.n	800343e <HAL_UART_Transmit+0x11c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2221      	movs	r2, #33	; 0x21
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003376:	f7fe f859 	bl	800142c <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88fa      	ldrh	r2, [r7, #6]
 8003386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003390:	d108      	bne.n	80033a4 <HAL_UART_Transmit+0x82>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e003      	b.n	80033ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033b4:	e02a      	b.n	800340c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f840 	bl	8003446 <UART_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e036      	b.n	800343e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	3302      	adds	r3, #2
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	e007      	b.n	80033fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	3301      	adds	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1cf      	bne.n	80033b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2140      	movs	r1, #64	; 0x40
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f810 	bl	8003446 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e006      	b.n	800343e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003456:	e02c      	b.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d028      	beq.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0x30>
 8003466:	f7fd ffe1 	bl	800142c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	429a      	cmp	r2, r3
 8003474:	d21d      	bcs.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003484:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e00f      	b.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d0c3      	beq.n	8003458 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003516:	f023 030c 	bic.w	r3, r3, #12
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	430b      	orrs	r3, r1
 8003522:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <UART_SetConfig+0x114>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d103      	bne.n	800354c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7ff fa80 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	e002      	b.n	8003552 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7ff fa68 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003550:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <UART_SetConfig+0x118>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	0119      	lsls	r1, r3, #4
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	fbb2 f2f3 	udiv	r2, r2, r3
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <UART_SetConfig+0x118>)
 800358a:	fba3 0302 	umull	r0, r3, r3, r2
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2064      	movs	r0, #100	; 0x64
 8003592:	fb00 f303 	mul.w	r3, r0, r3
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	3332      	adds	r3, #50	; 0x32
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <UART_SetConfig+0x118>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a8:	4419      	add	r1, r3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	441a      	add	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <UART_SetConfig+0x118>)
 80035c2:	fba3 0302 	umull	r0, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2064      	movs	r0, #100	; 0x64
 80035ca:	fb00 f303 	mul.w	r3, r0, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	3332      	adds	r3, #50	; 0x32
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <UART_SetConfig+0x118>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	440a      	add	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40013800 	.word	0x40013800
 80035f4:	51eb851f 	.word	0x51eb851f

080035f8 <__errno>:
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <__errno+0x8>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000024 	.word	0x20000024

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	2500      	movs	r5, #0
 8003608:	4e0c      	ldr	r6, [pc, #48]	; (800363c <__libc_init_array+0x38>)
 800360a:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360c:	1ba4      	subs	r4, r4, r6
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	42a5      	cmp	r5, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	f000 ff10 	bl	8004438 <_init>
 8003618:	2500      	movs	r5, #0
 800361a:	4e0a      	ldr	r6, [pc, #40]	; (8003644 <__libc_init_array+0x40>)
 800361c:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <__libc_init_array+0x44>)
 800361e:	1ba4      	subs	r4, r4, r6
 8003620:	10a4      	asrs	r4, r4, #2
 8003622:	42a5      	cmp	r5, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800362c:	4798      	blx	r3
 800362e:	3501      	adds	r5, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003636:	4798      	blx	r3
 8003638:	3501      	adds	r5, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	08004560 	.word	0x08004560
 8003640:	08004560 	.word	0x08004560
 8003644:	08004560 	.word	0x08004560
 8003648:	08004564 	.word	0x08004564

0800364c <memset>:
 800364c:	4603      	mov	r3, r0
 800364e:	4402      	add	r2, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <iprintf>:
 800365c:	b40f      	push	{r0, r1, r2, r3}
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <iprintf+0x2c>)
 8003660:	b513      	push	{r0, r1, r4, lr}
 8003662:	681c      	ldr	r4, [r3, #0]
 8003664:	b124      	cbz	r4, 8003670 <iprintf+0x14>
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	b913      	cbnz	r3, 8003670 <iprintf+0x14>
 800366a:	4620      	mov	r0, r4
 800366c:	f000 f84e 	bl	800370c <__sinit>
 8003670:	ab05      	add	r3, sp, #20
 8003672:	9a04      	ldr	r2, [sp, #16]
 8003674:	68a1      	ldr	r1, [r4, #8]
 8003676:	4620      	mov	r0, r4
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	f000 f953 	bl	8003924 <_vfiprintf_r>
 800367e:	b002      	add	sp, #8
 8003680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003684:	b004      	add	sp, #16
 8003686:	4770      	bx	lr
 8003688:	20000024 	.word	0x20000024

0800368c <std>:
 800368c:	2300      	movs	r3, #0
 800368e:	b510      	push	{r4, lr}
 8003690:	4604      	mov	r4, r0
 8003692:	e9c0 3300 	strd	r3, r3, [r0]
 8003696:	6083      	str	r3, [r0, #8]
 8003698:	8181      	strh	r1, [r0, #12]
 800369a:	6643      	str	r3, [r0, #100]	; 0x64
 800369c:	81c2      	strh	r2, [r0, #14]
 800369e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036a2:	6183      	str	r3, [r0, #24]
 80036a4:	4619      	mov	r1, r3
 80036a6:	2208      	movs	r2, #8
 80036a8:	305c      	adds	r0, #92	; 0x5c
 80036aa:	f7ff ffcf 	bl	800364c <memset>
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <std+0x38>)
 80036b0:	6224      	str	r4, [r4, #32]
 80036b2:	6263      	str	r3, [r4, #36]	; 0x24
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <std+0x3c>)
 80036b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <std+0x40>)
 80036ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <std+0x44>)
 80036be:	6323      	str	r3, [r4, #48]	; 0x30
 80036c0:	bd10      	pop	{r4, pc}
 80036c2:	bf00      	nop
 80036c4:	08003e81 	.word	0x08003e81
 80036c8:	08003ea3 	.word	0x08003ea3
 80036cc:	08003edb 	.word	0x08003edb
 80036d0:	08003eff 	.word	0x08003eff

080036d4 <_cleanup_r>:
 80036d4:	4901      	ldr	r1, [pc, #4]	; (80036dc <_cleanup_r+0x8>)
 80036d6:	f000 b885 	b.w	80037e4 <_fwalk_reent>
 80036da:	bf00      	nop
 80036dc:	080041d9 	.word	0x080041d9

080036e0 <__sfmoreglue>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	2568      	movs	r5, #104	; 0x68
 80036e4:	1e4a      	subs	r2, r1, #1
 80036e6:	4355      	muls	r5, r2
 80036e8:	460e      	mov	r6, r1
 80036ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036ee:	f000 f897 	bl	8003820 <_malloc_r>
 80036f2:	4604      	mov	r4, r0
 80036f4:	b140      	cbz	r0, 8003708 <__sfmoreglue+0x28>
 80036f6:	2100      	movs	r1, #0
 80036f8:	e9c0 1600 	strd	r1, r6, [r0]
 80036fc:	300c      	adds	r0, #12
 80036fe:	60a0      	str	r0, [r4, #8]
 8003700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003704:	f7ff ffa2 	bl	800364c <memset>
 8003708:	4620      	mov	r0, r4
 800370a:	bd70      	pop	{r4, r5, r6, pc}

0800370c <__sinit>:
 800370c:	6983      	ldr	r3, [r0, #24]
 800370e:	b510      	push	{r4, lr}
 8003710:	4604      	mov	r4, r0
 8003712:	bb33      	cbnz	r3, 8003762 <__sinit+0x56>
 8003714:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003718:	6503      	str	r3, [r0, #80]	; 0x50
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <__sinit+0x58>)
 800371c:	4a12      	ldr	r2, [pc, #72]	; (8003768 <__sinit+0x5c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6282      	str	r2, [r0, #40]	; 0x28
 8003722:	4298      	cmp	r0, r3
 8003724:	bf04      	itt	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	6183      	streq	r3, [r0, #24]
 800372a:	f000 f81f 	bl	800376c <__sfp>
 800372e:	6060      	str	r0, [r4, #4]
 8003730:	4620      	mov	r0, r4
 8003732:	f000 f81b 	bl	800376c <__sfp>
 8003736:	60a0      	str	r0, [r4, #8]
 8003738:	4620      	mov	r0, r4
 800373a:	f000 f817 	bl	800376c <__sfp>
 800373e:	2200      	movs	r2, #0
 8003740:	60e0      	str	r0, [r4, #12]
 8003742:	2104      	movs	r1, #4
 8003744:	6860      	ldr	r0, [r4, #4]
 8003746:	f7ff ffa1 	bl	800368c <std>
 800374a:	2201      	movs	r2, #1
 800374c:	2109      	movs	r1, #9
 800374e:	68a0      	ldr	r0, [r4, #8]
 8003750:	f7ff ff9c 	bl	800368c <std>
 8003754:	2202      	movs	r2, #2
 8003756:	2112      	movs	r1, #18
 8003758:	68e0      	ldr	r0, [r4, #12]
 800375a:	f7ff ff97 	bl	800368c <std>
 800375e:	2301      	movs	r3, #1
 8003760:	61a3      	str	r3, [r4, #24]
 8003762:	bd10      	pop	{r4, pc}
 8003764:	080044c8 	.word	0x080044c8
 8003768:	080036d5 	.word	0x080036d5

0800376c <__sfp>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <__sfp+0x70>)
 8003770:	4607      	mov	r7, r0
 8003772:	681e      	ldr	r6, [r3, #0]
 8003774:	69b3      	ldr	r3, [r6, #24]
 8003776:	b913      	cbnz	r3, 800377e <__sfp+0x12>
 8003778:	4630      	mov	r0, r6
 800377a:	f7ff ffc7 	bl	800370c <__sinit>
 800377e:	3648      	adds	r6, #72	; 0x48
 8003780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003784:	3b01      	subs	r3, #1
 8003786:	d503      	bpl.n	8003790 <__sfp+0x24>
 8003788:	6833      	ldr	r3, [r6, #0]
 800378a:	b133      	cbz	r3, 800379a <__sfp+0x2e>
 800378c:	6836      	ldr	r6, [r6, #0]
 800378e:	e7f7      	b.n	8003780 <__sfp+0x14>
 8003790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003794:	b16d      	cbz	r5, 80037b2 <__sfp+0x46>
 8003796:	3468      	adds	r4, #104	; 0x68
 8003798:	e7f4      	b.n	8003784 <__sfp+0x18>
 800379a:	2104      	movs	r1, #4
 800379c:	4638      	mov	r0, r7
 800379e:	f7ff ff9f 	bl	80036e0 <__sfmoreglue>
 80037a2:	6030      	str	r0, [r6, #0]
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d1f1      	bne.n	800378c <__sfp+0x20>
 80037a8:	230c      	movs	r3, #12
 80037aa:	4604      	mov	r4, r0
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4620      	mov	r0, r4
 80037b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <__sfp+0x74>)
 80037b4:	6665      	str	r5, [r4, #100]	; 0x64
 80037b6:	e9c4 5500 	strd	r5, r5, [r4]
 80037ba:	60a5      	str	r5, [r4, #8]
 80037bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80037c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80037c4:	2208      	movs	r2, #8
 80037c6:	4629      	mov	r1, r5
 80037c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037cc:	f7ff ff3e 	bl	800364c <memset>
 80037d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037d8:	e7e9      	b.n	80037ae <__sfp+0x42>
 80037da:	bf00      	nop
 80037dc:	080044c8 	.word	0x080044c8
 80037e0:	ffff0001 	.word	0xffff0001

080037e4 <_fwalk_reent>:
 80037e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e8:	4680      	mov	r8, r0
 80037ea:	4689      	mov	r9, r1
 80037ec:	2600      	movs	r6, #0
 80037ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037f2:	b914      	cbnz	r4, 80037fa <_fwalk_reent+0x16>
 80037f4:	4630      	mov	r0, r6
 80037f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80037fe:	3f01      	subs	r7, #1
 8003800:	d501      	bpl.n	8003806 <_fwalk_reent+0x22>
 8003802:	6824      	ldr	r4, [r4, #0]
 8003804:	e7f5      	b.n	80037f2 <_fwalk_reent+0xe>
 8003806:	89ab      	ldrh	r3, [r5, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d907      	bls.n	800381c <_fwalk_reent+0x38>
 800380c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003810:	3301      	adds	r3, #1
 8003812:	d003      	beq.n	800381c <_fwalk_reent+0x38>
 8003814:	4629      	mov	r1, r5
 8003816:	4640      	mov	r0, r8
 8003818:	47c8      	blx	r9
 800381a:	4306      	orrs	r6, r0
 800381c:	3568      	adds	r5, #104	; 0x68
 800381e:	e7ee      	b.n	80037fe <_fwalk_reent+0x1a>

08003820 <_malloc_r>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	1ccd      	adds	r5, r1, #3
 8003824:	f025 0503 	bic.w	r5, r5, #3
 8003828:	3508      	adds	r5, #8
 800382a:	2d0c      	cmp	r5, #12
 800382c:	bf38      	it	cc
 800382e:	250c      	movcc	r5, #12
 8003830:	2d00      	cmp	r5, #0
 8003832:	4606      	mov	r6, r0
 8003834:	db01      	blt.n	800383a <_malloc_r+0x1a>
 8003836:	42a9      	cmp	r1, r5
 8003838:	d903      	bls.n	8003842 <_malloc_r+0x22>
 800383a:	230c      	movs	r3, #12
 800383c:	6033      	str	r3, [r6, #0]
 800383e:	2000      	movs	r0, #0
 8003840:	bd70      	pop	{r4, r5, r6, pc}
 8003842:	f000 fd77 	bl	8004334 <__malloc_lock>
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <_malloc_r+0xac>)
 8003848:	6814      	ldr	r4, [r2, #0]
 800384a:	4621      	mov	r1, r4
 800384c:	b991      	cbnz	r1, 8003874 <_malloc_r+0x54>
 800384e:	4c20      	ldr	r4, [pc, #128]	; (80038d0 <_malloc_r+0xb0>)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	b91b      	cbnz	r3, 800385c <_malloc_r+0x3c>
 8003854:	4630      	mov	r0, r6
 8003856:	f000 fb03 	bl	8003e60 <_sbrk_r>
 800385a:	6020      	str	r0, [r4, #0]
 800385c:	4629      	mov	r1, r5
 800385e:	4630      	mov	r0, r6
 8003860:	f000 fafe 	bl	8003e60 <_sbrk_r>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d124      	bne.n	80038b2 <_malloc_r+0x92>
 8003868:	230c      	movs	r3, #12
 800386a:	4630      	mov	r0, r6
 800386c:	6033      	str	r3, [r6, #0]
 800386e:	f000 fd62 	bl	8004336 <__malloc_unlock>
 8003872:	e7e4      	b.n	800383e <_malloc_r+0x1e>
 8003874:	680b      	ldr	r3, [r1, #0]
 8003876:	1b5b      	subs	r3, r3, r5
 8003878:	d418      	bmi.n	80038ac <_malloc_r+0x8c>
 800387a:	2b0b      	cmp	r3, #11
 800387c:	d90f      	bls.n	800389e <_malloc_r+0x7e>
 800387e:	600b      	str	r3, [r1, #0]
 8003880:	18cc      	adds	r4, r1, r3
 8003882:	50cd      	str	r5, [r1, r3]
 8003884:	4630      	mov	r0, r6
 8003886:	f000 fd56 	bl	8004336 <__malloc_unlock>
 800388a:	f104 000b 	add.w	r0, r4, #11
 800388e:	1d23      	adds	r3, r4, #4
 8003890:	f020 0007 	bic.w	r0, r0, #7
 8003894:	1ac3      	subs	r3, r0, r3
 8003896:	d0d3      	beq.n	8003840 <_malloc_r+0x20>
 8003898:	425a      	negs	r2, r3
 800389a:	50e2      	str	r2, [r4, r3]
 800389c:	e7d0      	b.n	8003840 <_malloc_r+0x20>
 800389e:	684b      	ldr	r3, [r1, #4]
 80038a0:	428c      	cmp	r4, r1
 80038a2:	bf16      	itet	ne
 80038a4:	6063      	strne	r3, [r4, #4]
 80038a6:	6013      	streq	r3, [r2, #0]
 80038a8:	460c      	movne	r4, r1
 80038aa:	e7eb      	b.n	8003884 <_malloc_r+0x64>
 80038ac:	460c      	mov	r4, r1
 80038ae:	6849      	ldr	r1, [r1, #4]
 80038b0:	e7cc      	b.n	800384c <_malloc_r+0x2c>
 80038b2:	1cc4      	adds	r4, r0, #3
 80038b4:	f024 0403 	bic.w	r4, r4, #3
 80038b8:	42a0      	cmp	r0, r4
 80038ba:	d005      	beq.n	80038c8 <_malloc_r+0xa8>
 80038bc:	1a21      	subs	r1, r4, r0
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 face 	bl	8003e60 <_sbrk_r>
 80038c4:	3001      	adds	r0, #1
 80038c6:	d0cf      	beq.n	8003868 <_malloc_r+0x48>
 80038c8:	6025      	str	r5, [r4, #0]
 80038ca:	e7db      	b.n	8003884 <_malloc_r+0x64>
 80038cc:	200000b4 	.word	0x200000b4
 80038d0:	200000b8 	.word	0x200000b8

080038d4 <__sfputc_r>:
 80038d4:	6893      	ldr	r3, [r2, #8]
 80038d6:	b410      	push	{r4}
 80038d8:	3b01      	subs	r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	6093      	str	r3, [r2, #8]
 80038de:	da07      	bge.n	80038f0 <__sfputc_r+0x1c>
 80038e0:	6994      	ldr	r4, [r2, #24]
 80038e2:	42a3      	cmp	r3, r4
 80038e4:	db01      	blt.n	80038ea <__sfputc_r+0x16>
 80038e6:	290a      	cmp	r1, #10
 80038e8:	d102      	bne.n	80038f0 <__sfputc_r+0x1c>
 80038ea:	bc10      	pop	{r4}
 80038ec:	f000 bb0c 	b.w	8003f08 <__swbuf_r>
 80038f0:	6813      	ldr	r3, [r2, #0]
 80038f2:	1c58      	adds	r0, r3, #1
 80038f4:	6010      	str	r0, [r2, #0]
 80038f6:	7019      	strb	r1, [r3, #0]
 80038f8:	4608      	mov	r0, r1
 80038fa:	bc10      	pop	{r4}
 80038fc:	4770      	bx	lr

080038fe <__sfputs_r>:
 80038fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003900:	4606      	mov	r6, r0
 8003902:	460f      	mov	r7, r1
 8003904:	4614      	mov	r4, r2
 8003906:	18d5      	adds	r5, r2, r3
 8003908:	42ac      	cmp	r4, r5
 800390a:	d101      	bne.n	8003910 <__sfputs_r+0x12>
 800390c:	2000      	movs	r0, #0
 800390e:	e007      	b.n	8003920 <__sfputs_r+0x22>
 8003910:	463a      	mov	r2, r7
 8003912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003916:	4630      	mov	r0, r6
 8003918:	f7ff ffdc 	bl	80038d4 <__sfputc_r>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d1f3      	bne.n	8003908 <__sfputs_r+0xa>
 8003920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003924 <_vfiprintf_r>:
 8003924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003928:	460c      	mov	r4, r1
 800392a:	b09d      	sub	sp, #116	; 0x74
 800392c:	4617      	mov	r7, r2
 800392e:	461d      	mov	r5, r3
 8003930:	4606      	mov	r6, r0
 8003932:	b118      	cbz	r0, 800393c <_vfiprintf_r+0x18>
 8003934:	6983      	ldr	r3, [r0, #24]
 8003936:	b90b      	cbnz	r3, 800393c <_vfiprintf_r+0x18>
 8003938:	f7ff fee8 	bl	800370c <__sinit>
 800393c:	4b7c      	ldr	r3, [pc, #496]	; (8003b30 <_vfiprintf_r+0x20c>)
 800393e:	429c      	cmp	r4, r3
 8003940:	d158      	bne.n	80039f4 <_vfiprintf_r+0xd0>
 8003942:	6874      	ldr	r4, [r6, #4]
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	0718      	lsls	r0, r3, #28
 8003948:	d55e      	bpl.n	8003a08 <_vfiprintf_r+0xe4>
 800394a:	6923      	ldr	r3, [r4, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <_vfiprintf_r+0xe4>
 8003950:	2300      	movs	r3, #0
 8003952:	9309      	str	r3, [sp, #36]	; 0x24
 8003954:	2320      	movs	r3, #32
 8003956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800395a:	2330      	movs	r3, #48	; 0x30
 800395c:	f04f 0b01 	mov.w	fp, #1
 8003960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003964:	9503      	str	r5, [sp, #12]
 8003966:	46b8      	mov	r8, r7
 8003968:	4645      	mov	r5, r8
 800396a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800396e:	b10b      	cbz	r3, 8003974 <_vfiprintf_r+0x50>
 8003970:	2b25      	cmp	r3, #37	; 0x25
 8003972:	d154      	bne.n	8003a1e <_vfiprintf_r+0xfa>
 8003974:	ebb8 0a07 	subs.w	sl, r8, r7
 8003978:	d00b      	beq.n	8003992 <_vfiprintf_r+0x6e>
 800397a:	4653      	mov	r3, sl
 800397c:	463a      	mov	r2, r7
 800397e:	4621      	mov	r1, r4
 8003980:	4630      	mov	r0, r6
 8003982:	f7ff ffbc 	bl	80038fe <__sfputs_r>
 8003986:	3001      	adds	r0, #1
 8003988:	f000 80c2 	beq.w	8003b10 <_vfiprintf_r+0x1ec>
 800398c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800398e:	4453      	add	r3, sl
 8003990:	9309      	str	r3, [sp, #36]	; 0x24
 8003992:	f898 3000 	ldrb.w	r3, [r8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80ba 	beq.w	8003b10 <_vfiprintf_r+0x1ec>
 800399c:	2300      	movs	r3, #0
 800399e:	f04f 32ff 	mov.w	r2, #4294967295
 80039a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a6:	9304      	str	r3, [sp, #16]
 80039a8:	9307      	str	r3, [sp, #28]
 80039aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039ae:	931a      	str	r3, [sp, #104]	; 0x68
 80039b0:	46a8      	mov	r8, r5
 80039b2:	2205      	movs	r2, #5
 80039b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80039b8:	485e      	ldr	r0, [pc, #376]	; (8003b34 <_vfiprintf_r+0x210>)
 80039ba:	f000 fcad 	bl	8004318 <memchr>
 80039be:	9b04      	ldr	r3, [sp, #16]
 80039c0:	bb78      	cbnz	r0, 8003a22 <_vfiprintf_r+0xfe>
 80039c2:	06d9      	lsls	r1, r3, #27
 80039c4:	bf44      	itt	mi
 80039c6:	2220      	movmi	r2, #32
 80039c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039cc:	071a      	lsls	r2, r3, #28
 80039ce:	bf44      	itt	mi
 80039d0:	222b      	movmi	r2, #43	; 0x2b
 80039d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039d6:	782a      	ldrb	r2, [r5, #0]
 80039d8:	2a2a      	cmp	r2, #42	; 0x2a
 80039da:	d02a      	beq.n	8003a32 <_vfiprintf_r+0x10e>
 80039dc:	46a8      	mov	r8, r5
 80039de:	2000      	movs	r0, #0
 80039e0:	250a      	movs	r5, #10
 80039e2:	9a07      	ldr	r2, [sp, #28]
 80039e4:	4641      	mov	r1, r8
 80039e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ea:	3b30      	subs	r3, #48	; 0x30
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d969      	bls.n	8003ac4 <_vfiprintf_r+0x1a0>
 80039f0:	b360      	cbz	r0, 8003a4c <_vfiprintf_r+0x128>
 80039f2:	e024      	b.n	8003a3e <_vfiprintf_r+0x11a>
 80039f4:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <_vfiprintf_r+0x214>)
 80039f6:	429c      	cmp	r4, r3
 80039f8:	d101      	bne.n	80039fe <_vfiprintf_r+0xda>
 80039fa:	68b4      	ldr	r4, [r6, #8]
 80039fc:	e7a2      	b.n	8003944 <_vfiprintf_r+0x20>
 80039fe:	4b4f      	ldr	r3, [pc, #316]	; (8003b3c <_vfiprintf_r+0x218>)
 8003a00:	429c      	cmp	r4, r3
 8003a02:	bf08      	it	eq
 8003a04:	68f4      	ldreq	r4, [r6, #12]
 8003a06:	e79d      	b.n	8003944 <_vfiprintf_r+0x20>
 8003a08:	4621      	mov	r1, r4
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f000 fae0 	bl	8003fd0 <__swsetup_r>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d09d      	beq.n	8003950 <_vfiprintf_r+0x2c>
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	b01d      	add	sp, #116	; 0x74
 8003a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1e:	46a8      	mov	r8, r5
 8003a20:	e7a2      	b.n	8003968 <_vfiprintf_r+0x44>
 8003a22:	4a44      	ldr	r2, [pc, #272]	; (8003b34 <_vfiprintf_r+0x210>)
 8003a24:	4645      	mov	r5, r8
 8003a26:	1a80      	subs	r0, r0, r2
 8003a28:	fa0b f000 	lsl.w	r0, fp, r0
 8003a2c:	4318      	orrs	r0, r3
 8003a2e:	9004      	str	r0, [sp, #16]
 8003a30:	e7be      	b.n	80039b0 <_vfiprintf_r+0x8c>
 8003a32:	9a03      	ldr	r2, [sp, #12]
 8003a34:	1d11      	adds	r1, r2, #4
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	9103      	str	r1, [sp, #12]
 8003a3a:	2a00      	cmp	r2, #0
 8003a3c:	db01      	blt.n	8003a42 <_vfiprintf_r+0x11e>
 8003a3e:	9207      	str	r2, [sp, #28]
 8003a40:	e004      	b.n	8003a4c <_vfiprintf_r+0x128>
 8003a42:	4252      	negs	r2, r2
 8003a44:	f043 0302 	orr.w	r3, r3, #2
 8003a48:	9207      	str	r2, [sp, #28]
 8003a4a:	9304      	str	r3, [sp, #16]
 8003a4c:	f898 3000 	ldrb.w	r3, [r8]
 8003a50:	2b2e      	cmp	r3, #46	; 0x2e
 8003a52:	d10e      	bne.n	8003a72 <_vfiprintf_r+0x14e>
 8003a54:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a58:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5a:	d138      	bne.n	8003ace <_vfiprintf_r+0x1aa>
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	f108 0802 	add.w	r8, r8, #2
 8003a62:	1d1a      	adds	r2, r3, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	9203      	str	r2, [sp, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bfb8      	it	lt
 8003a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a70:	9305      	str	r3, [sp, #20]
 8003a72:	4d33      	ldr	r5, [pc, #204]	; (8003b40 <_vfiprintf_r+0x21c>)
 8003a74:	2203      	movs	r2, #3
 8003a76:	f898 1000 	ldrb.w	r1, [r8]
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 fc4c 	bl	8004318 <memchr>
 8003a80:	b140      	cbz	r0, 8003a94 <_vfiprintf_r+0x170>
 8003a82:	2340      	movs	r3, #64	; 0x40
 8003a84:	1b40      	subs	r0, r0, r5
 8003a86:	fa03 f000 	lsl.w	r0, r3, r0
 8003a8a:	9b04      	ldr	r3, [sp, #16]
 8003a8c:	f108 0801 	add.w	r8, r8, #1
 8003a90:	4303      	orrs	r3, r0
 8003a92:	9304      	str	r3, [sp, #16]
 8003a94:	f898 1000 	ldrb.w	r1, [r8]
 8003a98:	2206      	movs	r2, #6
 8003a9a:	482a      	ldr	r0, [pc, #168]	; (8003b44 <_vfiprintf_r+0x220>)
 8003a9c:	f108 0701 	add.w	r7, r8, #1
 8003aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aa4:	f000 fc38 	bl	8004318 <memchr>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d037      	beq.n	8003b1c <_vfiprintf_r+0x1f8>
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <_vfiprintf_r+0x224>)
 8003aae:	bb1b      	cbnz	r3, 8003af8 <_vfiprintf_r+0x1d4>
 8003ab0:	9b03      	ldr	r3, [sp, #12]
 8003ab2:	3307      	adds	r3, #7
 8003ab4:	f023 0307 	bic.w	r3, r3, #7
 8003ab8:	3308      	adds	r3, #8
 8003aba:	9303      	str	r3, [sp, #12]
 8003abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003abe:	444b      	add	r3, r9
 8003ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac2:	e750      	b.n	8003966 <_vfiprintf_r+0x42>
 8003ac4:	fb05 3202 	mla	r2, r5, r2, r3
 8003ac8:	2001      	movs	r0, #1
 8003aca:	4688      	mov	r8, r1
 8003acc:	e78a      	b.n	80039e4 <_vfiprintf_r+0xc0>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	250a      	movs	r5, #10
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f108 0801 	add.w	r8, r8, #1
 8003ad8:	9305      	str	r3, [sp, #20]
 8003ada:	4640      	mov	r0, r8
 8003adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae0:	3a30      	subs	r2, #48	; 0x30
 8003ae2:	2a09      	cmp	r2, #9
 8003ae4:	d903      	bls.n	8003aee <_vfiprintf_r+0x1ca>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0c3      	beq.n	8003a72 <_vfiprintf_r+0x14e>
 8003aea:	9105      	str	r1, [sp, #20]
 8003aec:	e7c1      	b.n	8003a72 <_vfiprintf_r+0x14e>
 8003aee:	fb05 2101 	mla	r1, r5, r1, r2
 8003af2:	2301      	movs	r3, #1
 8003af4:	4680      	mov	r8, r0
 8003af6:	e7f0      	b.n	8003ada <_vfiprintf_r+0x1b6>
 8003af8:	ab03      	add	r3, sp, #12
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4622      	mov	r2, r4
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <_vfiprintf_r+0x228>)
 8003b00:	a904      	add	r1, sp, #16
 8003b02:	4630      	mov	r0, r6
 8003b04:	f3af 8000 	nop.w
 8003b08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b0c:	4681      	mov	r9, r0
 8003b0e:	d1d5      	bne.n	8003abc <_vfiprintf_r+0x198>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	065b      	lsls	r3, r3, #25
 8003b14:	f53f af7e 	bmi.w	8003a14 <_vfiprintf_r+0xf0>
 8003b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b1a:	e77d      	b.n	8003a18 <_vfiprintf_r+0xf4>
 8003b1c:	ab03      	add	r3, sp, #12
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4622      	mov	r2, r4
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <_vfiprintf_r+0x228>)
 8003b24:	a904      	add	r1, sp, #16
 8003b26:	4630      	mov	r0, r6
 8003b28:	f000 f888 	bl	8003c3c <_printf_i>
 8003b2c:	e7ec      	b.n	8003b08 <_vfiprintf_r+0x1e4>
 8003b2e:	bf00      	nop
 8003b30:	080044ec 	.word	0x080044ec
 8003b34:	0800452c 	.word	0x0800452c
 8003b38:	0800450c 	.word	0x0800450c
 8003b3c:	080044cc 	.word	0x080044cc
 8003b40:	08004532 	.word	0x08004532
 8003b44:	08004536 	.word	0x08004536
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	080038ff 	.word	0x080038ff

08003b50 <_printf_common>:
 8003b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b54:	4691      	mov	r9, r2
 8003b56:	461f      	mov	r7, r3
 8003b58:	688a      	ldr	r2, [r1, #8]
 8003b5a:	690b      	ldr	r3, [r1, #16]
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	bfb8      	it	lt
 8003b62:	4613      	movlt	r3, r2
 8003b64:	f8c9 3000 	str.w	r3, [r9]
 8003b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b72:	b112      	cbz	r2, 8003b7a <_printf_common+0x2a>
 8003b74:	3301      	adds	r3, #1
 8003b76:	f8c9 3000 	str.w	r3, [r9]
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	0699      	lsls	r1, r3, #26
 8003b7e:	bf42      	ittt	mi
 8003b80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b84:	3302      	addmi	r3, #2
 8003b86:	f8c9 3000 	strmi.w	r3, [r9]
 8003b8a:	6825      	ldr	r5, [r4, #0]
 8003b8c:	f015 0506 	ands.w	r5, r5, #6
 8003b90:	d107      	bne.n	8003ba2 <_printf_common+0x52>
 8003b92:	f104 0a19 	add.w	sl, r4, #25
 8003b96:	68e3      	ldr	r3, [r4, #12]
 8003b98:	f8d9 2000 	ldr.w	r2, [r9]
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	42ab      	cmp	r3, r5
 8003ba0:	dc29      	bgt.n	8003bf6 <_printf_common+0xa6>
 8003ba2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	3300      	adds	r3, #0
 8003baa:	bf18      	it	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	0692      	lsls	r2, r2, #26
 8003bb0:	d42e      	bmi.n	8003c10 <_printf_common+0xc0>
 8003bb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bb6:	4639      	mov	r1, r7
 8003bb8:	4630      	mov	r0, r6
 8003bba:	47c0      	blx	r8
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d021      	beq.n	8003c04 <_printf_common+0xb4>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	68e5      	ldr	r5, [r4, #12]
 8003bc4:	f003 0306 	and.w	r3, r3, #6
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	bf18      	it	ne
 8003bcc:	2500      	movne	r5, #0
 8003bce:	f8d9 2000 	ldr.w	r2, [r9]
 8003bd2:	f04f 0900 	mov.w	r9, #0
 8003bd6:	bf08      	it	eq
 8003bd8:	1aad      	subeq	r5, r5, r2
 8003bda:	68a3      	ldr	r3, [r4, #8]
 8003bdc:	6922      	ldr	r2, [r4, #16]
 8003bde:	bf08      	it	eq
 8003be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bfc4      	itt	gt
 8003be8:	1a9b      	subgt	r3, r3, r2
 8003bea:	18ed      	addgt	r5, r5, r3
 8003bec:	341a      	adds	r4, #26
 8003bee:	454d      	cmp	r5, r9
 8003bf0:	d11a      	bne.n	8003c28 <_printf_common+0xd8>
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	e008      	b.n	8003c08 <_printf_common+0xb8>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4652      	mov	r2, sl
 8003bfa:	4639      	mov	r1, r7
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	47c0      	blx	r8
 8003c00:	3001      	adds	r0, #1
 8003c02:	d103      	bne.n	8003c0c <_printf_common+0xbc>
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0c:	3501      	adds	r5, #1
 8003c0e:	e7c2      	b.n	8003b96 <_printf_common+0x46>
 8003c10:	2030      	movs	r0, #48	; 0x30
 8003c12:	18e1      	adds	r1, r4, r3
 8003c14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c1e:	4422      	add	r2, r4
 8003c20:	3302      	adds	r3, #2
 8003c22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c26:	e7c4      	b.n	8003bb2 <_printf_common+0x62>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	4639      	mov	r1, r7
 8003c2e:	4630      	mov	r0, r6
 8003c30:	47c0      	blx	r8
 8003c32:	3001      	adds	r0, #1
 8003c34:	d0e6      	beq.n	8003c04 <_printf_common+0xb4>
 8003c36:	f109 0901 	add.w	r9, r9, #1
 8003c3a:	e7d8      	b.n	8003bee <_printf_common+0x9e>

08003c3c <_printf_i>:
 8003c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c44:	460c      	mov	r4, r1
 8003c46:	7e09      	ldrb	r1, [r1, #24]
 8003c48:	b085      	sub	sp, #20
 8003c4a:	296e      	cmp	r1, #110	; 0x6e
 8003c4c:	4617      	mov	r7, r2
 8003c4e:	4606      	mov	r6, r0
 8003c50:	4698      	mov	r8, r3
 8003c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c54:	f000 80b3 	beq.w	8003dbe <_printf_i+0x182>
 8003c58:	d822      	bhi.n	8003ca0 <_printf_i+0x64>
 8003c5a:	2963      	cmp	r1, #99	; 0x63
 8003c5c:	d036      	beq.n	8003ccc <_printf_i+0x90>
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x3a>
 8003c60:	2900      	cmp	r1, #0
 8003c62:	f000 80b9 	beq.w	8003dd8 <_printf_i+0x19c>
 8003c66:	2958      	cmp	r1, #88	; 0x58
 8003c68:	f000 8083 	beq.w	8003d72 <_printf_i+0x136>
 8003c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c74:	e032      	b.n	8003cdc <_printf_i+0xa0>
 8003c76:	2964      	cmp	r1, #100	; 0x64
 8003c78:	d001      	beq.n	8003c7e <_printf_i+0x42>
 8003c7a:	2969      	cmp	r1, #105	; 0x69
 8003c7c:	d1f6      	bne.n	8003c6c <_printf_i+0x30>
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	6813      	ldr	r3, [r2, #0]
 8003c82:	0605      	lsls	r5, r0, #24
 8003c84:	f103 0104 	add.w	r1, r3, #4
 8003c88:	d52a      	bpl.n	8003ce0 <_printf_i+0xa4>
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6011      	str	r1, [r2, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	da03      	bge.n	8003c9a <_printf_i+0x5e>
 8003c92:	222d      	movs	r2, #45	; 0x2d
 8003c94:	425b      	negs	r3, r3
 8003c96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c9a:	486f      	ldr	r0, [pc, #444]	; (8003e58 <_printf_i+0x21c>)
 8003c9c:	220a      	movs	r2, #10
 8003c9e:	e039      	b.n	8003d14 <_printf_i+0xd8>
 8003ca0:	2973      	cmp	r1, #115	; 0x73
 8003ca2:	f000 809d 	beq.w	8003de0 <_printf_i+0x1a4>
 8003ca6:	d808      	bhi.n	8003cba <_printf_i+0x7e>
 8003ca8:	296f      	cmp	r1, #111	; 0x6f
 8003caa:	d020      	beq.n	8003cee <_printf_i+0xb2>
 8003cac:	2970      	cmp	r1, #112	; 0x70
 8003cae:	d1dd      	bne.n	8003c6c <_printf_i+0x30>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	f043 0320 	orr.w	r3, r3, #32
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	e003      	b.n	8003cc2 <_printf_i+0x86>
 8003cba:	2975      	cmp	r1, #117	; 0x75
 8003cbc:	d017      	beq.n	8003cee <_printf_i+0xb2>
 8003cbe:	2978      	cmp	r1, #120	; 0x78
 8003cc0:	d1d4      	bne.n	8003c6c <_printf_i+0x30>
 8003cc2:	2378      	movs	r3, #120	; 0x78
 8003cc4:	4865      	ldr	r0, [pc, #404]	; (8003e5c <_printf_i+0x220>)
 8003cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cca:	e055      	b.n	8003d78 <_printf_i+0x13c>
 8003ccc:	6813      	ldr	r3, [r2, #0]
 8003cce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cd2:	1d19      	adds	r1, r3, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6011      	str	r1, [r2, #0]
 8003cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e08c      	b.n	8003dfa <_printf_i+0x1be>
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ce6:	6011      	str	r1, [r2, #0]
 8003ce8:	bf18      	it	ne
 8003cea:	b21b      	sxthne	r3, r3
 8003cec:	e7cf      	b.n	8003c8e <_printf_i+0x52>
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	6825      	ldr	r5, [r4, #0]
 8003cf2:	1d18      	adds	r0, r3, #4
 8003cf4:	6010      	str	r0, [r2, #0]
 8003cf6:	0628      	lsls	r0, r5, #24
 8003cf8:	d501      	bpl.n	8003cfe <_printf_i+0xc2>
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	e002      	b.n	8003d04 <_printf_i+0xc8>
 8003cfe:	0668      	lsls	r0, r5, #25
 8003d00:	d5fb      	bpl.n	8003cfa <_printf_i+0xbe>
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	296f      	cmp	r1, #111	; 0x6f
 8003d06:	bf14      	ite	ne
 8003d08:	220a      	movne	r2, #10
 8003d0a:	2208      	moveq	r2, #8
 8003d0c:	4852      	ldr	r0, [pc, #328]	; (8003e58 <_printf_i+0x21c>)
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d14:	6865      	ldr	r5, [r4, #4]
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	60a5      	str	r5, [r4, #8]
 8003d1a:	f2c0 8095 	blt.w	8003e48 <_printf_i+0x20c>
 8003d1e:	6821      	ldr	r1, [r4, #0]
 8003d20:	f021 0104 	bic.w	r1, r1, #4
 8003d24:	6021      	str	r1, [r4, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d13d      	bne.n	8003da6 <_printf_i+0x16a>
 8003d2a:	2d00      	cmp	r5, #0
 8003d2c:	f040 808e 	bne.w	8003e4c <_printf_i+0x210>
 8003d30:	4665      	mov	r5, ip
 8003d32:	2a08      	cmp	r2, #8
 8003d34:	d10b      	bne.n	8003d4e <_printf_i+0x112>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	07db      	lsls	r3, r3, #31
 8003d3a:	d508      	bpl.n	8003d4e <_printf_i+0x112>
 8003d3c:	6923      	ldr	r3, [r4, #16]
 8003d3e:	6862      	ldr	r2, [r4, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	bfde      	ittt	le
 8003d44:	2330      	movle	r3, #48	; 0x30
 8003d46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d4e:	ebac 0305 	sub.w	r3, ip, r5
 8003d52:	6123      	str	r3, [r4, #16]
 8003d54:	f8cd 8000 	str.w	r8, [sp]
 8003d58:	463b      	mov	r3, r7
 8003d5a:	aa03      	add	r2, sp, #12
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7ff fef6 	bl	8003b50 <_printf_common>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d14d      	bne.n	8003e04 <_printf_i+0x1c8>
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	b005      	add	sp, #20
 8003d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d72:	4839      	ldr	r0, [pc, #228]	; (8003e58 <_printf_i+0x21c>)
 8003d74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d78:	6813      	ldr	r3, [r2, #0]
 8003d7a:	6821      	ldr	r1, [r4, #0]
 8003d7c:	1d1d      	adds	r5, r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6015      	str	r5, [r2, #0]
 8003d82:	060a      	lsls	r2, r1, #24
 8003d84:	d50b      	bpl.n	8003d9e <_printf_i+0x162>
 8003d86:	07ca      	lsls	r2, r1, #31
 8003d88:	bf44      	itt	mi
 8003d8a:	f041 0120 	orrmi.w	r1, r1, #32
 8003d8e:	6021      	strmi	r1, [r4, #0]
 8003d90:	b91b      	cbnz	r3, 8003d9a <_printf_i+0x15e>
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	f022 0220 	bic.w	r2, r2, #32
 8003d98:	6022      	str	r2, [r4, #0]
 8003d9a:	2210      	movs	r2, #16
 8003d9c:	e7b7      	b.n	8003d0e <_printf_i+0xd2>
 8003d9e:	064d      	lsls	r5, r1, #25
 8003da0:	bf48      	it	mi
 8003da2:	b29b      	uxthmi	r3, r3
 8003da4:	e7ef      	b.n	8003d86 <_printf_i+0x14a>
 8003da6:	4665      	mov	r5, ip
 8003da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dac:	fb02 3311 	mls	r3, r2, r1, r3
 8003db0:	5cc3      	ldrb	r3, [r0, r3]
 8003db2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003db6:	460b      	mov	r3, r1
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d1f5      	bne.n	8003da8 <_printf_i+0x16c>
 8003dbc:	e7b9      	b.n	8003d32 <_printf_i+0xf6>
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	6825      	ldr	r5, [r4, #0]
 8003dc2:	1d18      	adds	r0, r3, #4
 8003dc4:	6961      	ldr	r1, [r4, #20]
 8003dc6:	6010      	str	r0, [r2, #0]
 8003dc8:	0628      	lsls	r0, r5, #24
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	d501      	bpl.n	8003dd2 <_printf_i+0x196>
 8003dce:	6019      	str	r1, [r3, #0]
 8003dd0:	e002      	b.n	8003dd8 <_printf_i+0x19c>
 8003dd2:	066a      	lsls	r2, r5, #25
 8003dd4:	d5fb      	bpl.n	8003dce <_printf_i+0x192>
 8003dd6:	8019      	strh	r1, [r3, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4665      	mov	r5, ip
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	e7b9      	b.n	8003d54 <_printf_i+0x118>
 8003de0:	6813      	ldr	r3, [r2, #0]
 8003de2:	1d19      	adds	r1, r3, #4
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	681d      	ldr	r5, [r3, #0]
 8003de8:	6862      	ldr	r2, [r4, #4]
 8003dea:	2100      	movs	r1, #0
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 fa93 	bl	8004318 <memchr>
 8003df2:	b108      	cbz	r0, 8003df8 <_printf_i+0x1bc>
 8003df4:	1b40      	subs	r0, r0, r5
 8003df6:	6060      	str	r0, [r4, #4]
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e02:	e7a7      	b.n	8003d54 <_printf_i+0x118>
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	462a      	mov	r2, r5
 8003e08:	4639      	mov	r1, r7
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d0aa      	beq.n	8003d68 <_printf_i+0x12c>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	079b      	lsls	r3, r3, #30
 8003e16:	d413      	bmi.n	8003e40 <_printf_i+0x204>
 8003e18:	68e0      	ldr	r0, [r4, #12]
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	4298      	cmp	r0, r3
 8003e1e:	bfb8      	it	lt
 8003e20:	4618      	movlt	r0, r3
 8003e22:	e7a3      	b.n	8003d6c <_printf_i+0x130>
 8003e24:	2301      	movs	r3, #1
 8003e26:	464a      	mov	r2, r9
 8003e28:	4639      	mov	r1, r7
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	47c0      	blx	r8
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d09a      	beq.n	8003d68 <_printf_i+0x12c>
 8003e32:	3501      	adds	r5, #1
 8003e34:	68e3      	ldr	r3, [r4, #12]
 8003e36:	9a03      	ldr	r2, [sp, #12]
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	42ab      	cmp	r3, r5
 8003e3c:	dcf2      	bgt.n	8003e24 <_printf_i+0x1e8>
 8003e3e:	e7eb      	b.n	8003e18 <_printf_i+0x1dc>
 8003e40:	2500      	movs	r5, #0
 8003e42:	f104 0919 	add.w	r9, r4, #25
 8003e46:	e7f5      	b.n	8003e34 <_printf_i+0x1f8>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ac      	bne.n	8003da6 <_printf_i+0x16a>
 8003e4c:	7803      	ldrb	r3, [r0, #0]
 8003e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e56:	e76c      	b.n	8003d32 <_printf_i+0xf6>
 8003e58:	0800453d 	.word	0x0800453d
 8003e5c:	0800454e 	.word	0x0800454e

08003e60 <_sbrk_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	2300      	movs	r3, #0
 8003e64:	4c05      	ldr	r4, [pc, #20]	; (8003e7c <_sbrk_r+0x1c>)
 8003e66:	4605      	mov	r5, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	f7fd fa2e 	bl	80012cc <_sbrk>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_sbrk_r+0x1a>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_sbrk_r+0x1a>
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	200001a8 	.word	0x200001a8

08003e80 <__sread>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	460c      	mov	r4, r1
 8003e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e88:	f000 faa2 	bl	80043d0 <_read_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	bfab      	itete	ge
 8003e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e92:	89a3      	ldrhlt	r3, [r4, #12]
 8003e94:	181b      	addge	r3, r3, r0
 8003e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e9a:	bfac      	ite	ge
 8003e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e9e:	81a3      	strhlt	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__swrite>:
 8003ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	898b      	ldrh	r3, [r1, #12]
 8003eaa:	4605      	mov	r5, r0
 8003eac:	05db      	lsls	r3, r3, #23
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	d505      	bpl.n	8003ec0 <__swrite+0x1e>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebc:	f000 f9b6 	bl	800422c <_lseek_r>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ece:	463b      	mov	r3, r7
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed6:	f000 b869 	b.w	8003fac <_write_r>

08003eda <__sseek>:
 8003eda:	b510      	push	{r4, lr}
 8003edc:	460c      	mov	r4, r1
 8003ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee2:	f000 f9a3 	bl	800422c <_lseek_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	bf15      	itete	ne
 8003eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ef6:	81a3      	strheq	r3, [r4, #12]
 8003ef8:	bf18      	it	ne
 8003efa:	81a3      	strhne	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__sclose>:
 8003efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f02:	f000 b8d3 	b.w	80040ac <_close_r>
	...

08003f08 <__swbuf_r>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	460e      	mov	r6, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	4605      	mov	r5, r0
 8003f10:	b118      	cbz	r0, 8003f1a <__swbuf_r+0x12>
 8003f12:	6983      	ldr	r3, [r0, #24]
 8003f14:	b90b      	cbnz	r3, 8003f1a <__swbuf_r+0x12>
 8003f16:	f7ff fbf9 	bl	800370c <__sinit>
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <__swbuf_r+0x98>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	d12a      	bne.n	8003f76 <__swbuf_r+0x6e>
 8003f20:	686c      	ldr	r4, [r5, #4]
 8003f22:	69a3      	ldr	r3, [r4, #24]
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	071a      	lsls	r2, r3, #28
 8003f2a:	d52e      	bpl.n	8003f8a <__swbuf_r+0x82>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	b363      	cbz	r3, 8003f8a <__swbuf_r+0x82>
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	6820      	ldr	r0, [r4, #0]
 8003f34:	b2f6      	uxtb	r6, r6
 8003f36:	1ac0      	subs	r0, r0, r3
 8003f38:	6963      	ldr	r3, [r4, #20]
 8003f3a:	4637      	mov	r7, r6
 8003f3c:	4283      	cmp	r3, r0
 8003f3e:	dc04      	bgt.n	8003f4a <__swbuf_r+0x42>
 8003f40:	4621      	mov	r1, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 f948 	bl	80041d8 <_fflush_r>
 8003f48:	bb28      	cbnz	r0, 8003f96 <__swbuf_r+0x8e>
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	6022      	str	r2, [r4, #0]
 8003f58:	701e      	strb	r6, [r3, #0]
 8003f5a:	6963      	ldr	r3, [r4, #20]
 8003f5c:	4283      	cmp	r3, r0
 8003f5e:	d004      	beq.n	8003f6a <__swbuf_r+0x62>
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	07db      	lsls	r3, r3, #31
 8003f64:	d519      	bpl.n	8003f9a <__swbuf_r+0x92>
 8003f66:	2e0a      	cmp	r6, #10
 8003f68:	d117      	bne.n	8003f9a <__swbuf_r+0x92>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f933 	bl	80041d8 <_fflush_r>
 8003f72:	b190      	cbz	r0, 8003f9a <__swbuf_r+0x92>
 8003f74:	e00f      	b.n	8003f96 <__swbuf_r+0x8e>
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <__swbuf_r+0x9c>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	d101      	bne.n	8003f80 <__swbuf_r+0x78>
 8003f7c:	68ac      	ldr	r4, [r5, #8]
 8003f7e:	e7d0      	b.n	8003f22 <__swbuf_r+0x1a>
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <__swbuf_r+0xa0>)
 8003f82:	429c      	cmp	r4, r3
 8003f84:	bf08      	it	eq
 8003f86:	68ec      	ldreq	r4, [r5, #12]
 8003f88:	e7cb      	b.n	8003f22 <__swbuf_r+0x1a>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 f81f 	bl	8003fd0 <__swsetup_r>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d0cc      	beq.n	8003f30 <__swbuf_r+0x28>
 8003f96:	f04f 37ff 	mov.w	r7, #4294967295
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	080044ec 	.word	0x080044ec
 8003fa4:	0800450c 	.word	0x0800450c
 8003fa8:	080044cc 	.word	0x080044cc

08003fac <_write_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4605      	mov	r5, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4c05      	ldr	r4, [pc, #20]	; (8003fcc <_write_r+0x20>)
 8003fb8:	6022      	str	r2, [r4, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fd f939 	bl	8001232 <_write>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_write_r+0x1e>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_write_r+0x1e>
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	200001a8 	.word	0x200001a8

08003fd0 <__swsetup_r>:
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <__swsetup_r+0xcc>)
 8003fd2:	b570      	push	{r4, r5, r6, lr}
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	b125      	cbz	r5, 8003fe6 <__swsetup_r+0x16>
 8003fdc:	69ab      	ldr	r3, [r5, #24]
 8003fde:	b913      	cbnz	r3, 8003fe6 <__swsetup_r+0x16>
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7ff fb93 	bl	800370c <__sinit>
 8003fe6:	4b2e      	ldr	r3, [pc, #184]	; (80040a0 <__swsetup_r+0xd0>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d10f      	bne.n	800400c <__swsetup_r+0x3c>
 8003fec:	686c      	ldr	r4, [r5, #4]
 8003fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	0715      	lsls	r5, r2, #28
 8003ff6:	d42c      	bmi.n	8004052 <__swsetup_r+0x82>
 8003ff8:	06d0      	lsls	r0, r2, #27
 8003ffa:	d411      	bmi.n	8004020 <__swsetup_r+0x50>
 8003ffc:	2209      	movs	r2, #9
 8003ffe:	6032      	str	r2, [r6, #0]
 8004000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	e03e      	b.n	800408a <__swsetup_r+0xba>
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <__swsetup_r+0xd4>)
 800400e:	429c      	cmp	r4, r3
 8004010:	d101      	bne.n	8004016 <__swsetup_r+0x46>
 8004012:	68ac      	ldr	r4, [r5, #8]
 8004014:	e7eb      	b.n	8003fee <__swsetup_r+0x1e>
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <__swsetup_r+0xd8>)
 8004018:	429c      	cmp	r4, r3
 800401a:	bf08      	it	eq
 800401c:	68ec      	ldreq	r4, [r5, #12]
 800401e:	e7e6      	b.n	8003fee <__swsetup_r+0x1e>
 8004020:	0751      	lsls	r1, r2, #29
 8004022:	d512      	bpl.n	800404a <__swsetup_r+0x7a>
 8004024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004026:	b141      	cbz	r1, 800403a <__swsetup_r+0x6a>
 8004028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800402c:	4299      	cmp	r1, r3
 800402e:	d002      	beq.n	8004036 <__swsetup_r+0x66>
 8004030:	4630      	mov	r0, r6
 8004032:	f000 f981 	bl	8004338 <_free_r>
 8004036:	2300      	movs	r3, #0
 8004038:	6363      	str	r3, [r4, #52]	; 0x34
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	2300      	movs	r3, #0
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	6923      	ldr	r3, [r4, #16]
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	b94b      	cbnz	r3, 800406a <__swsetup_r+0x9a>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d003      	beq.n	800406a <__swsetup_r+0x9a>
 8004062:	4621      	mov	r1, r4
 8004064:	4630      	mov	r0, r6
 8004066:	f000 f917 	bl	8004298 <__smakebuf_r>
 800406a:	89a2      	ldrh	r2, [r4, #12]
 800406c:	f012 0301 	ands.w	r3, r2, #1
 8004070:	d00c      	beq.n	800408c <__swsetup_r+0xbc>
 8004072:	2300      	movs	r3, #0
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	6963      	ldr	r3, [r4, #20]
 8004078:	425b      	negs	r3, r3
 800407a:	61a3      	str	r3, [r4, #24]
 800407c:	6923      	ldr	r3, [r4, #16]
 800407e:	b953      	cbnz	r3, 8004096 <__swsetup_r+0xc6>
 8004080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004084:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004088:	d1ba      	bne.n	8004000 <__swsetup_r+0x30>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	0792      	lsls	r2, r2, #30
 800408e:	bf58      	it	pl
 8004090:	6963      	ldrpl	r3, [r4, #20]
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	e7f2      	b.n	800407c <__swsetup_r+0xac>
 8004096:	2000      	movs	r0, #0
 8004098:	e7f7      	b.n	800408a <__swsetup_r+0xba>
 800409a:	bf00      	nop
 800409c:	20000024 	.word	0x20000024
 80040a0:	080044ec 	.word	0x080044ec
 80040a4:	0800450c 	.word	0x0800450c
 80040a8:	080044cc 	.word	0x080044cc

080040ac <_close_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	2300      	movs	r3, #0
 80040b0:	4c05      	ldr	r4, [pc, #20]	; (80040c8 <_close_r+0x1c>)
 80040b2:	4605      	mov	r5, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	f7fd f8d7 	bl	800126a <_close>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_close_r+0x1a>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_close_r+0x1a>
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	200001a8 	.word	0x200001a8

080040cc <__sflush_r>:
 80040cc:	898a      	ldrh	r2, [r1, #12]
 80040ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d2:	4605      	mov	r5, r0
 80040d4:	0710      	lsls	r0, r2, #28
 80040d6:	460c      	mov	r4, r1
 80040d8:	d458      	bmi.n	800418c <__sflush_r+0xc0>
 80040da:	684b      	ldr	r3, [r1, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	dc05      	bgt.n	80040ec <__sflush_r+0x20>
 80040e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	dc02      	bgt.n	80040ec <__sflush_r+0x20>
 80040e6:	2000      	movs	r0, #0
 80040e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	d0f9      	beq.n	80040e6 <__sflush_r+0x1a>
 80040f2:	2300      	movs	r3, #0
 80040f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040f8:	682f      	ldr	r7, [r5, #0]
 80040fa:	6a21      	ldr	r1, [r4, #32]
 80040fc:	602b      	str	r3, [r5, #0]
 80040fe:	d032      	beq.n	8004166 <__sflush_r+0x9a>
 8004100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004102:	89a3      	ldrh	r3, [r4, #12]
 8004104:	075a      	lsls	r2, r3, #29
 8004106:	d505      	bpl.n	8004114 <__sflush_r+0x48>
 8004108:	6863      	ldr	r3, [r4, #4]
 800410a:	1ac0      	subs	r0, r0, r3
 800410c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800410e:	b10b      	cbz	r3, 8004114 <__sflush_r+0x48>
 8004110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004112:	1ac0      	subs	r0, r0, r3
 8004114:	2300      	movs	r3, #0
 8004116:	4602      	mov	r2, r0
 8004118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800411a:	6a21      	ldr	r1, [r4, #32]
 800411c:	4628      	mov	r0, r5
 800411e:	47b0      	blx	r6
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	d106      	bne.n	8004134 <__sflush_r+0x68>
 8004126:	6829      	ldr	r1, [r5, #0]
 8004128:	291d      	cmp	r1, #29
 800412a:	d848      	bhi.n	80041be <__sflush_r+0xf2>
 800412c:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <__sflush_r+0x108>)
 800412e:	40ca      	lsrs	r2, r1
 8004130:	07d6      	lsls	r6, r2, #31
 8004132:	d544      	bpl.n	80041be <__sflush_r+0xf2>
 8004134:	2200      	movs	r2, #0
 8004136:	6062      	str	r2, [r4, #4]
 8004138:	6922      	ldr	r2, [r4, #16]
 800413a:	04d9      	lsls	r1, r3, #19
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	d504      	bpl.n	800414a <__sflush_r+0x7e>
 8004140:	1c42      	adds	r2, r0, #1
 8004142:	d101      	bne.n	8004148 <__sflush_r+0x7c>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b903      	cbnz	r3, 800414a <__sflush_r+0x7e>
 8004148:	6560      	str	r0, [r4, #84]	; 0x54
 800414a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414c:	602f      	str	r7, [r5, #0]
 800414e:	2900      	cmp	r1, #0
 8004150:	d0c9      	beq.n	80040e6 <__sflush_r+0x1a>
 8004152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004156:	4299      	cmp	r1, r3
 8004158:	d002      	beq.n	8004160 <__sflush_r+0x94>
 800415a:	4628      	mov	r0, r5
 800415c:	f000 f8ec 	bl	8004338 <_free_r>
 8004160:	2000      	movs	r0, #0
 8004162:	6360      	str	r0, [r4, #52]	; 0x34
 8004164:	e7c0      	b.n	80040e8 <__sflush_r+0x1c>
 8004166:	2301      	movs	r3, #1
 8004168:	4628      	mov	r0, r5
 800416a:	47b0      	blx	r6
 800416c:	1c41      	adds	r1, r0, #1
 800416e:	d1c8      	bne.n	8004102 <__sflush_r+0x36>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0c5      	beq.n	8004102 <__sflush_r+0x36>
 8004176:	2b1d      	cmp	r3, #29
 8004178:	d001      	beq.n	800417e <__sflush_r+0xb2>
 800417a:	2b16      	cmp	r3, #22
 800417c:	d101      	bne.n	8004182 <__sflush_r+0xb6>
 800417e:	602f      	str	r7, [r5, #0]
 8004180:	e7b1      	b.n	80040e6 <__sflush_r+0x1a>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	e7ad      	b.n	80040e8 <__sflush_r+0x1c>
 800418c:	690f      	ldr	r7, [r1, #16]
 800418e:	2f00      	cmp	r7, #0
 8004190:	d0a9      	beq.n	80040e6 <__sflush_r+0x1a>
 8004192:	0793      	lsls	r3, r2, #30
 8004194:	bf18      	it	ne
 8004196:	2300      	movne	r3, #0
 8004198:	680e      	ldr	r6, [r1, #0]
 800419a:	bf08      	it	eq
 800419c:	694b      	ldreq	r3, [r1, #20]
 800419e:	eba6 0807 	sub.w	r8, r6, r7
 80041a2:	600f      	str	r7, [r1, #0]
 80041a4:	608b      	str	r3, [r1, #8]
 80041a6:	f1b8 0f00 	cmp.w	r8, #0
 80041aa:	dd9c      	ble.n	80040e6 <__sflush_r+0x1a>
 80041ac:	4643      	mov	r3, r8
 80041ae:	463a      	mov	r2, r7
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	4628      	mov	r0, r5
 80041b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041b6:	47b0      	blx	r6
 80041b8:	2800      	cmp	r0, #0
 80041ba:	dc06      	bgt.n	80041ca <__sflush_r+0xfe>
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	e78e      	b.n	80040e8 <__sflush_r+0x1c>
 80041ca:	4407      	add	r7, r0
 80041cc:	eba8 0800 	sub.w	r8, r8, r0
 80041d0:	e7e9      	b.n	80041a6 <__sflush_r+0xda>
 80041d2:	bf00      	nop
 80041d4:	20400001 	.word	0x20400001

080041d8 <_fflush_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	4605      	mov	r5, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b1db      	cbz	r3, 800421a <_fflush_r+0x42>
 80041e2:	b118      	cbz	r0, 80041ec <_fflush_r+0x14>
 80041e4:	6983      	ldr	r3, [r0, #24]
 80041e6:	b90b      	cbnz	r3, 80041ec <_fflush_r+0x14>
 80041e8:	f7ff fa90 	bl	800370c <__sinit>
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <_fflush_r+0x48>)
 80041ee:	429c      	cmp	r4, r3
 80041f0:	d109      	bne.n	8004206 <_fflush_r+0x2e>
 80041f2:	686c      	ldr	r4, [r5, #4]
 80041f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f8:	b17b      	cbz	r3, 800421a <_fflush_r+0x42>
 80041fa:	4621      	mov	r1, r4
 80041fc:	4628      	mov	r0, r5
 80041fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004202:	f7ff bf63 	b.w	80040cc <__sflush_r>
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <_fflush_r+0x4c>)
 8004208:	429c      	cmp	r4, r3
 800420a:	d101      	bne.n	8004210 <_fflush_r+0x38>
 800420c:	68ac      	ldr	r4, [r5, #8]
 800420e:	e7f1      	b.n	80041f4 <_fflush_r+0x1c>
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <_fflush_r+0x50>)
 8004212:	429c      	cmp	r4, r3
 8004214:	bf08      	it	eq
 8004216:	68ec      	ldreq	r4, [r5, #12]
 8004218:	e7ec      	b.n	80041f4 <_fflush_r+0x1c>
 800421a:	2000      	movs	r0, #0
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	080044ec 	.word	0x080044ec
 8004224:	0800450c 	.word	0x0800450c
 8004228:	080044cc 	.word	0x080044cc

0800422c <_lseek_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4605      	mov	r5, r0
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	2200      	movs	r2, #0
 8004236:	4c05      	ldr	r4, [pc, #20]	; (800424c <_lseek_r+0x20>)
 8004238:	6022      	str	r2, [r4, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	f7fd f839 	bl	80012b2 <_lseek>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_lseek_r+0x1e>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	b103      	cbz	r3, 800424a <_lseek_r+0x1e>
 8004248:	602b      	str	r3, [r5, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	200001a8 	.word	0x200001a8

08004250 <__swhatbuf_r>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	460e      	mov	r6, r1
 8004254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004258:	b096      	sub	sp, #88	; 0x58
 800425a:	2900      	cmp	r1, #0
 800425c:	4614      	mov	r4, r2
 800425e:	461d      	mov	r5, r3
 8004260:	da07      	bge.n	8004272 <__swhatbuf_r+0x22>
 8004262:	2300      	movs	r3, #0
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	89b3      	ldrh	r3, [r6, #12]
 8004268:	061a      	lsls	r2, r3, #24
 800426a:	d410      	bmi.n	800428e <__swhatbuf_r+0x3e>
 800426c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004270:	e00e      	b.n	8004290 <__swhatbuf_r+0x40>
 8004272:	466a      	mov	r2, sp
 8004274:	f000 f8be 	bl	80043f4 <_fstat_r>
 8004278:	2800      	cmp	r0, #0
 800427a:	dbf2      	blt.n	8004262 <__swhatbuf_r+0x12>
 800427c:	9a01      	ldr	r2, [sp, #4]
 800427e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004286:	425a      	negs	r2, r3
 8004288:	415a      	adcs	r2, r3
 800428a:	602a      	str	r2, [r5, #0]
 800428c:	e7ee      	b.n	800426c <__swhatbuf_r+0x1c>
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	2000      	movs	r0, #0
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	b016      	add	sp, #88	; 0x58
 8004296:	bd70      	pop	{r4, r5, r6, pc}

08004298 <__smakebuf_r>:
 8004298:	898b      	ldrh	r3, [r1, #12]
 800429a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800429c:	079d      	lsls	r5, r3, #30
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	d507      	bpl.n	80042b4 <__smakebuf_r+0x1c>
 80042a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	2301      	movs	r3, #1
 80042ae:	6163      	str	r3, [r4, #20]
 80042b0:	b002      	add	sp, #8
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	ab01      	add	r3, sp, #4
 80042b6:	466a      	mov	r2, sp
 80042b8:	f7ff ffca 	bl	8004250 <__swhatbuf_r>
 80042bc:	9900      	ldr	r1, [sp, #0]
 80042be:	4605      	mov	r5, r0
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7ff faad 	bl	8003820 <_malloc_r>
 80042c6:	b948      	cbnz	r0, 80042dc <__smakebuf_r+0x44>
 80042c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042cc:	059a      	lsls	r2, r3, #22
 80042ce:	d4ef      	bmi.n	80042b0 <__smakebuf_r+0x18>
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	e7e3      	b.n	80042a4 <__smakebuf_r+0xc>
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <__smakebuf_r+0x7c>)
 80042de:	62b3      	str	r3, [r6, #40]	; 0x28
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	6020      	str	r0, [r4, #0]
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	6120      	str	r0, [r4, #16]
 80042ee:	6163      	str	r3, [r4, #20]
 80042f0:	9b01      	ldr	r3, [sp, #4]
 80042f2:	b15b      	cbz	r3, 800430c <__smakebuf_r+0x74>
 80042f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f88d 	bl	8004418 <_isatty_r>
 80042fe:	b128      	cbz	r0, 800430c <__smakebuf_r+0x74>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	431d      	orrs	r5, r3
 8004310:	81a5      	strh	r5, [r4, #12]
 8004312:	e7cd      	b.n	80042b0 <__smakebuf_r+0x18>
 8004314:	080036d5 	.word	0x080036d5

08004318 <memchr>:
 8004318:	b510      	push	{r4, lr}
 800431a:	b2c9      	uxtb	r1, r1
 800431c:	4402      	add	r2, r0
 800431e:	4290      	cmp	r0, r2
 8004320:	4603      	mov	r3, r0
 8004322:	d101      	bne.n	8004328 <memchr+0x10>
 8004324:	2300      	movs	r3, #0
 8004326:	e003      	b.n	8004330 <memchr+0x18>
 8004328:	781c      	ldrb	r4, [r3, #0]
 800432a:	3001      	adds	r0, #1
 800432c:	428c      	cmp	r4, r1
 800432e:	d1f6      	bne.n	800431e <memchr+0x6>
 8004330:	4618      	mov	r0, r3
 8004332:	bd10      	pop	{r4, pc}

08004334 <__malloc_lock>:
 8004334:	4770      	bx	lr

08004336 <__malloc_unlock>:
 8004336:	4770      	bx	lr

08004338 <_free_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4605      	mov	r5, r0
 800433c:	2900      	cmp	r1, #0
 800433e:	d043      	beq.n	80043c8 <_free_r+0x90>
 8004340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004344:	1f0c      	subs	r4, r1, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	bfb8      	it	lt
 800434a:	18e4      	addlt	r4, r4, r3
 800434c:	f7ff fff2 	bl	8004334 <__malloc_lock>
 8004350:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <_free_r+0x94>)
 8004352:	6813      	ldr	r3, [r2, #0]
 8004354:	4610      	mov	r0, r2
 8004356:	b933      	cbnz	r3, 8004366 <_free_r+0x2e>
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	6014      	str	r4, [r2, #0]
 800435c:	4628      	mov	r0, r5
 800435e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004362:	f7ff bfe8 	b.w	8004336 <__malloc_unlock>
 8004366:	42a3      	cmp	r3, r4
 8004368:	d90b      	bls.n	8004382 <_free_r+0x4a>
 800436a:	6821      	ldr	r1, [r4, #0]
 800436c:	1862      	adds	r2, r4, r1
 800436e:	4293      	cmp	r3, r2
 8004370:	bf01      	itttt	eq
 8004372:	681a      	ldreq	r2, [r3, #0]
 8004374:	685b      	ldreq	r3, [r3, #4]
 8004376:	1852      	addeq	r2, r2, r1
 8004378:	6022      	streq	r2, [r4, #0]
 800437a:	6063      	str	r3, [r4, #4]
 800437c:	6004      	str	r4, [r0, #0]
 800437e:	e7ed      	b.n	800435c <_free_r+0x24>
 8004380:	4613      	mov	r3, r2
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	b10a      	cbz	r2, 800438a <_free_r+0x52>
 8004386:	42a2      	cmp	r2, r4
 8004388:	d9fa      	bls.n	8004380 <_free_r+0x48>
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	1858      	adds	r0, r3, r1
 800438e:	42a0      	cmp	r0, r4
 8004390:	d10b      	bne.n	80043aa <_free_r+0x72>
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	4401      	add	r1, r0
 8004396:	1858      	adds	r0, r3, r1
 8004398:	4282      	cmp	r2, r0
 800439a:	6019      	str	r1, [r3, #0]
 800439c:	d1de      	bne.n	800435c <_free_r+0x24>
 800439e:	6810      	ldr	r0, [r2, #0]
 80043a0:	6852      	ldr	r2, [r2, #4]
 80043a2:	4401      	add	r1, r0
 80043a4:	6019      	str	r1, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	e7d8      	b.n	800435c <_free_r+0x24>
 80043aa:	d902      	bls.n	80043b2 <_free_r+0x7a>
 80043ac:	230c      	movs	r3, #12
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	e7d4      	b.n	800435c <_free_r+0x24>
 80043b2:	6820      	ldr	r0, [r4, #0]
 80043b4:	1821      	adds	r1, r4, r0
 80043b6:	428a      	cmp	r2, r1
 80043b8:	bf01      	itttt	eq
 80043ba:	6811      	ldreq	r1, [r2, #0]
 80043bc:	6852      	ldreq	r2, [r2, #4]
 80043be:	1809      	addeq	r1, r1, r0
 80043c0:	6021      	streq	r1, [r4, #0]
 80043c2:	6062      	str	r2, [r4, #4]
 80043c4:	605c      	str	r4, [r3, #4]
 80043c6:	e7c9      	b.n	800435c <_free_r+0x24>
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	bf00      	nop
 80043cc:	200000b4 	.word	0x200000b4

080043d0 <_read_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4605      	mov	r5, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	2200      	movs	r2, #0
 80043da:	4c05      	ldr	r4, [pc, #20]	; (80043f0 <_read_r+0x20>)
 80043dc:	6022      	str	r2, [r4, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	f7fc ff0a 	bl	80011f8 <_read>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d102      	bne.n	80043ee <_read_r+0x1e>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	b103      	cbz	r3, 80043ee <_read_r+0x1e>
 80043ec:	602b      	str	r3, [r5, #0]
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	200001a8 	.word	0x200001a8

080043f4 <_fstat_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	2300      	movs	r3, #0
 80043f8:	4c06      	ldr	r4, [pc, #24]	; (8004414 <_fstat_r+0x20>)
 80043fa:	4605      	mov	r5, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	f7fc ff3d 	bl	8001280 <_fstat>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	d102      	bne.n	8004410 <_fstat_r+0x1c>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	b103      	cbz	r3, 8004410 <_fstat_r+0x1c>
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	bd38      	pop	{r3, r4, r5, pc}
 8004412:	bf00      	nop
 8004414:	200001a8 	.word	0x200001a8

08004418 <_isatty_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	2300      	movs	r3, #0
 800441c:	4c05      	ldr	r4, [pc, #20]	; (8004434 <_isatty_r+0x1c>)
 800441e:	4605      	mov	r5, r0
 8004420:	4608      	mov	r0, r1
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	f7fc ff3b 	bl	800129e <_isatty>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_isatty_r+0x1a>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	b103      	cbz	r3, 8004432 <_isatty_r+0x1a>
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	200001a8 	.word	0x200001a8

08004438 <_init>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr

08004444 <_fini>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	bf00      	nop
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr
