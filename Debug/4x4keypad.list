
4x4keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004824  08004824  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004824  08004824  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004824  08004824  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800482c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000088  080048b4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080048b4  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd50  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f9  00000000  00000000  0002fe01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00032000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00033048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019626  00000000  00000000  00033fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c126  00000000  00000000  0004d606  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e551  00000000  00000000  0005972c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be4  00000000  00000000  000e7cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080046a8 	.word	0x080046a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080046a8 	.word	0x080046a8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <scan_Rx>:
short success_set_remain_time_progress = 0;

static Pos pos;

char scan_Rx(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016a:	48bd      	ldr	r0, [pc, #756]	; (8000460 <scan_Rx+0x300>)
 800016c:	f001 fcdd 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000176:	48bb      	ldr	r0, [pc, #748]	; (8000464 <scan_Rx+0x304>)
 8000178:	f001 fcd7 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000182:	48b8      	ldr	r0, [pc, #736]	; (8000464 <scan_Rx+0x304>)
 8000184:	f001 fcd1 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2180      	movs	r1, #128	; 0x80
 800018c:	48b6      	ldr	r0, [pc, #728]	; (8000468 <scan_Rx+0x308>)
 800018e:	f001 fccc 	bl	8001b2a <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000192:	2110      	movs	r1, #16
 8000194:	48b2      	ldr	r0, [pc, #712]	; (8000460 <scan_Rx+0x300>)
 8000196:	f001 fcb1 	bl	8001afc <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d109      	bne.n	80001b4 <scan_Rx+0x54>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80001a0:	bf00      	nop
 80001a2:	2110      	movs	r1, #16
 80001a4:	48ae      	ldr	r0, [pc, #696]	; (8000460 <scan_Rx+0x300>)
 80001a6:	f001 fca9 	bl	8001afc <HAL_GPIO_ReadPin>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0f8      	beq.n	80001a2 <scan_Rx+0x42>
		return '1';
 80001b0:	2331      	movs	r3, #49	; 0x31
 80001b2:	e153      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80001b4:	2120      	movs	r1, #32
 80001b6:	48aa      	ldr	r0, [pc, #680]	; (8000460 <scan_Rx+0x300>)
 80001b8:	f001 fca0 	bl	8001afc <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d109      	bne.n	80001d6 <scan_Rx+0x76>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80001c2:	bf00      	nop
 80001c4:	2120      	movs	r1, #32
 80001c6:	48a6      	ldr	r0, [pc, #664]	; (8000460 <scan_Rx+0x300>)
 80001c8:	f001 fc98 	bl	8001afc <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f8      	beq.n	80001c4 <scan_Rx+0x64>
		return '2';
 80001d2:	2332      	movs	r3, #50	; 0x32
 80001d4:	e142      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80001d6:	2108      	movs	r1, #8
 80001d8:	48a1      	ldr	r0, [pc, #644]	; (8000460 <scan_Rx+0x300>)
 80001da:	f001 fc8f 	bl	8001afc <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d109      	bne.n	80001f8 <scan_Rx+0x98>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80001e4:	bf00      	nop
 80001e6:	2108      	movs	r1, #8
 80001e8:	489d      	ldr	r0, [pc, #628]	; (8000460 <scan_Rx+0x300>)
 80001ea:	f001 fc87 	bl	8001afc <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f8      	beq.n	80001e6 <scan_Rx+0x86>
		return '3';
 80001f4:	2333      	movs	r3, #51	; 0x33
 80001f6:	e131      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	4899      	ldr	r0, [pc, #612]	; (8000464 <scan_Rx+0x304>)
 80001fe:	f001 fc7d 	bl	8001afc <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d10a      	bne.n	800021e <scan_Rx+0xbe>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000208:	bf00      	nop
 800020a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020e:	4895      	ldr	r0, [pc, #596]	; (8000464 <scan_Rx+0x304>)
 8000210:	f001 fc74 	bl	8001afc <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f7      	beq.n	800020a <scan_Rx+0xaa>
		return 'A';
 800021a:	2341      	movs	r3, #65	; 0x41
 800021c:	e11e      	b.n	800045c <scan_Rx+0x2fc>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000224:	488e      	ldr	r0, [pc, #568]	; (8000460 <scan_Rx+0x300>)
 8000226:	f001 fc80 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000230:	488c      	ldr	r0, [pc, #560]	; (8000464 <scan_Rx+0x304>)
 8000232:	f001 fc7a 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023c:	4889      	ldr	r0, [pc, #548]	; (8000464 <scan_Rx+0x304>)
 800023e:	f001 fc74 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	4888      	ldr	r0, [pc, #544]	; (8000468 <scan_Rx+0x308>)
 8000248:	f001 fc6f 	bl	8001b2a <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 800024c:	2110      	movs	r1, #16
 800024e:	4884      	ldr	r0, [pc, #528]	; (8000460 <scan_Rx+0x300>)
 8000250:	f001 fc54 	bl	8001afc <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d109      	bne.n	800026e <scan_Rx+0x10e>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800025a:	bf00      	nop
 800025c:	2110      	movs	r1, #16
 800025e:	4880      	ldr	r0, [pc, #512]	; (8000460 <scan_Rx+0x300>)
 8000260:	f001 fc4c 	bl	8001afc <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f8      	beq.n	800025c <scan_Rx+0xfc>
		return '4';
 800026a:	2334      	movs	r3, #52	; 0x34
 800026c:	e0f6      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 800026e:	2120      	movs	r1, #32
 8000270:	487b      	ldr	r0, [pc, #492]	; (8000460 <scan_Rx+0x300>)
 8000272:	f001 fc43 	bl	8001afc <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d109      	bne.n	8000290 <scan_Rx+0x130>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800027c:	bf00      	nop
 800027e:	2120      	movs	r1, #32
 8000280:	4877      	ldr	r0, [pc, #476]	; (8000460 <scan_Rx+0x300>)
 8000282:	f001 fc3b 	bl	8001afc <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f8      	beq.n	800027e <scan_Rx+0x11e>
		return '5';
 800028c:	2335      	movs	r3, #53	; 0x35
 800028e:	e0e5      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000290:	2108      	movs	r1, #8
 8000292:	4873      	ldr	r0, [pc, #460]	; (8000460 <scan_Rx+0x300>)
 8000294:	f001 fc32 	bl	8001afc <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d109      	bne.n	80002b2 <scan_Rx+0x152>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800029e:	bf00      	nop
 80002a0:	2108      	movs	r1, #8
 80002a2:	486f      	ldr	r0, [pc, #444]	; (8000460 <scan_Rx+0x300>)
 80002a4:	f001 fc2a 	bl	8001afc <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f8      	beq.n	80002a0 <scan_Rx+0x140>
		return '6';
 80002ae:	2336      	movs	r3, #54	; 0x36
 80002b0:	e0d4      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80002b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b6:	486b      	ldr	r0, [pc, #428]	; (8000464 <scan_Rx+0x304>)
 80002b8:	f001 fc20 	bl	8001afc <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d10a      	bne.n	80002d8 <scan_Rx+0x178>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80002c2:	bf00      	nop
 80002c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c8:	4866      	ldr	r0, [pc, #408]	; (8000464 <scan_Rx+0x304>)
 80002ca:	f001 fc17 	bl	8001afc <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f7      	beq.n	80002c4 <scan_Rx+0x164>
		return 'B';
 80002d4:	2342      	movs	r3, #66	; 0x42
 80002d6:	e0c1      	b.n	800045c <scan_Rx+0x2fc>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002de:	4860      	ldr	r0, [pc, #384]	; (8000460 <scan_Rx+0x300>)
 80002e0:	f001 fc23 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	485e      	ldr	r0, [pc, #376]	; (8000464 <scan_Rx+0x304>)
 80002ec:	f001 fc1d 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	485b      	ldr	r0, [pc, #364]	; (8000464 <scan_Rx+0x304>)
 80002f8:	f001 fc17 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2180      	movs	r1, #128	; 0x80
 8000300:	4859      	ldr	r0, [pc, #356]	; (8000468 <scan_Rx+0x308>)
 8000302:	f001 fc12 	bl	8001b2a <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000306:	2110      	movs	r1, #16
 8000308:	4855      	ldr	r0, [pc, #340]	; (8000460 <scan_Rx+0x300>)
 800030a:	f001 fbf7 	bl	8001afc <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <scan_Rx+0x1c8>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000314:	bf00      	nop
 8000316:	2110      	movs	r1, #16
 8000318:	4851      	ldr	r0, [pc, #324]	; (8000460 <scan_Rx+0x300>)
 800031a:	f001 fbef 	bl	8001afc <HAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f8      	beq.n	8000316 <scan_Rx+0x1b6>
		return '7';
 8000324:	2337      	movs	r3, #55	; 0x37
 8000326:	e099      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000328:	2120      	movs	r1, #32
 800032a:	484d      	ldr	r0, [pc, #308]	; (8000460 <scan_Rx+0x300>)
 800032c:	f001 fbe6 	bl	8001afc <HAL_GPIO_ReadPin>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d109      	bne.n	800034a <scan_Rx+0x1ea>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000336:	bf00      	nop
 8000338:	2120      	movs	r1, #32
 800033a:	4849      	ldr	r0, [pc, #292]	; (8000460 <scan_Rx+0x300>)
 800033c:	f001 fbde 	bl	8001afc <HAL_GPIO_ReadPin>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <scan_Rx+0x1d8>
		return '8';
 8000346:	2338      	movs	r3, #56	; 0x38
 8000348:	e088      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 800034a:	2108      	movs	r1, #8
 800034c:	4844      	ldr	r0, [pc, #272]	; (8000460 <scan_Rx+0x300>)
 800034e:	f001 fbd5 	bl	8001afc <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d109      	bne.n	800036c <scan_Rx+0x20c>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000358:	bf00      	nop
 800035a:	2108      	movs	r1, #8
 800035c:	4840      	ldr	r0, [pc, #256]	; (8000460 <scan_Rx+0x300>)
 800035e:	f001 fbcd 	bl	8001afc <HAL_GPIO_ReadPin>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f8      	beq.n	800035a <scan_Rx+0x1fa>
		return '9';
 8000368:	2339      	movs	r3, #57	; 0x39
 800036a:	e077      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 800036c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000370:	483c      	ldr	r0, [pc, #240]	; (8000464 <scan_Rx+0x304>)
 8000372:	f001 fbc3 	bl	8001afc <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10a      	bne.n	8000392 <scan_Rx+0x232>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800037c:	bf00      	nop
 800037e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000382:	4838      	ldr	r0, [pc, #224]	; (8000464 <scan_Rx+0x304>)
 8000384:	f001 fbba 	bl	8001afc <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f7      	beq.n	800037e <scan_Rx+0x21e>
		return 'C';
 800038e:	2343      	movs	r3, #67	; 0x43
 8000390:	e064      	b.n	800045c <scan_Rx+0x2fc>
	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000398:	4831      	ldr	r0, [pc, #196]	; (8000460 <scan_Rx+0x300>)
 800039a:	f001 fbc6 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a4:	482f      	ldr	r0, [pc, #188]	; (8000464 <scan_Rx+0x304>)
 80003a6:	f001 fbc0 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <scan_Rx+0x304>)
 80003b2:	f001 fbba 	bl	8001b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	482b      	ldr	r0, [pc, #172]	; (8000468 <scan_Rx+0x308>)
 80003bc:	f001 fbb5 	bl	8001b2a <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80003c0:	2110      	movs	r1, #16
 80003c2:	4827      	ldr	r0, [pc, #156]	; (8000460 <scan_Rx+0x300>)
 80003c4:	f001 fb9a 	bl	8001afc <HAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d112      	bne.n	80003f4 <scan_Rx+0x294>
	{
		printf("%d\n", HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin));
 80003ce:	2110      	movs	r1, #16
 80003d0:	4823      	ldr	r0, [pc, #140]	; (8000460 <scan_Rx+0x300>)
 80003d2:	f001 fb93 	bl	8001afc <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	4619      	mov	r1, r3
 80003da:	4824      	ldr	r0, [pc, #144]	; (800046c <scan_Rx+0x30c>)
 80003dc:	f003 fa12 	bl	8003804 <iprintf>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80003e0:	bf00      	nop
 80003e2:	2110      	movs	r1, #16
 80003e4:	481e      	ldr	r0, [pc, #120]	; (8000460 <scan_Rx+0x300>)
 80003e6:	f001 fb89 	bl	8001afc <HAL_GPIO_ReadPin>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f8      	beq.n	80003e2 <scan_Rx+0x282>
		return '0';
 80003f0:	2330      	movs	r3, #48	; 0x30
 80003f2:	e033      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80003f4:	2120      	movs	r1, #32
 80003f6:	481a      	ldr	r0, [pc, #104]	; (8000460 <scan_Rx+0x300>)
 80003f8:	f001 fb80 	bl	8001afc <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d10c      	bne.n	800041c <scan_Rx+0x2bc>
	{
		printf("2\n");
 8000402:	481b      	ldr	r0, [pc, #108]	; (8000470 <scan_Rx+0x310>)
 8000404:	f003 fa72 	bl	80038ec <puts>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // prevent from long press.
 8000408:	bf00      	nop
 800040a:	2120      	movs	r1, #32
 800040c:	4814      	ldr	r0, [pc, #80]	; (8000460 <scan_Rx+0x300>)
 800040e:	f001 fb75 	bl	8001afc <HAL_GPIO_ReadPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <scan_Rx+0x2aa>
		return '-';
 8000418:	232d      	movs	r3, #45	; 0x2d
 800041a:	e01f      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 800041c:	2108      	movs	r1, #8
 800041e:	4810      	ldr	r0, [pc, #64]	; (8000460 <scan_Rx+0x300>)
 8000420:	f001 fb6c 	bl	8001afc <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d101      	bne.n	800042e <scan_Rx+0x2ce>
	{
//		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
		return '#';
 800042a:	2323      	movs	r3, #35	; 0x23
 800042c:	e016      	b.n	800045c <scan_Rx+0x2fc>
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 800042e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000432:	480c      	ldr	r0, [pc, #48]	; (8000464 <scan_Rx+0x304>)
 8000434:	f001 fb62 	bl	8001afc <HAL_GPIO_ReadPin>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d10d      	bne.n	800045a <scan_Rx+0x2fa>
	{
		printf("4\n");
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <scan_Rx+0x314>)
 8000440:	f003 fa54 	bl	80038ec <puts>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000444:	bf00      	nop
 8000446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <scan_Rx+0x304>)
 800044c:	f001 fb56 	bl	8001afc <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f7      	beq.n	8000446 <scan_Rx+0x2e6>
		return '*';
 8000456:	232a      	movs	r3, #42	; 0x2a
 8000458:	e000      	b.n	800045c <scan_Rx+0x2fc>
	}

	return 255;
 800045a:	23ff      	movs	r3, #255	; 0xff
}
 800045c:	4618      	mov	r0, r3
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40010c00 	.word	0x40010c00
 8000464:	40010800 	.word	0x40010800
 8000468:	40011000 	.word	0x40011000
 800046c:	080046c0 	.word	0x080046c0
 8000470:	080046c4 	.word	0x080046c4
 8000474:	080046c8 	.word	0x080046c8

08000478 <checkPassword>:
/*
 * pw 		 : pw that user press
 * setted_pw : door-lock password
 */
char checkPassword(const char *pw, const char *setted_pw)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	if(!strcmp(pw, setted_pw))
 8000482:	6839      	ldr	r1, [r7, #0]
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f7ff fe61 	bl	800014c <strcmp>
	{
	}else
	{
	}
}
 800048a:	bf00      	nop
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <set_remain_time_progress>:

void set_remain_time_progress(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
	for(int i = 0; i < remain_time; i++)
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	e009      	b.n	80004b4 <set_remain_time_progress+0x20>
	{
	  HD44780_SetCursor(i, 1);
 80004a0:	2101      	movs	r1, #1
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f000 f9b0 	bl	8000808 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(0xFF);
 80004a8:	20ff      	movs	r0, #255	; 0xff
 80004aa:	f000 fa1d 	bl	80008e8 <HD44780_PrintSpecialChar>
	for(int i = 0; i < remain_time; i++)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3301      	adds	r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b09      	cmp	r3, #9
 80004b8:	ddf2      	ble.n	80004a0 <set_remain_time_progress+0xc>
	}
	success_set_remain_time_progress = 1;
 80004ba:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <set_remain_time_progress+0x34>)
 80004bc:	2201      	movs	r2, #1
 80004be:	801a      	strh	r2, [r3, #0]
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200000a4 	.word	0x200000a4

080004cc <unset_remain_time_progress>:

void unset_remain_time_progress(short rt)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  HD44780_SetCursor(rt, 1);
 80004d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004da:	2101      	movs	r1, #1
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f993 	bl	8000808 <HD44780_SetCursor>
  HD44780_PrintSpecialChar(0x20);
 80004e2:	2020      	movs	r0, #32
 80004e4:	f000 fa00 	bl	80008e8 <HD44780_PrintSpecialChar>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <clear_character>:

void clear_character(short col, short row)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	80fb      	strh	r3, [r7, #6]
 80004fc:	4613      	mov	r3, r2
 80004fe:	80bb      	strh	r3, [r7, #4]
	HD44780_SetCursor(col, row);
 8000500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000504:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f97c 	bl	8000808 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(0x20);
 8000510:	2020      	movs	r0, #32
 8000512:	f000 f9e9 	bl	80008e8 <HD44780_PrintSpecialChar>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <set_cursor_pos>:
void set_cursor_pos(short col, short row)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	80fb      	strh	r3, [r7, #6]
 800052c:	4613      	mov	r3, r2
 800052e:	80bb      	strh	r3, [r7, #4]
	pos.col = col;
 8000530:	4a0e      	ldr	r2, [pc, #56]	; (800056c <set_cursor_pos+0x4c>)
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	8013      	strh	r3, [r2, #0]
	pos.row = row;
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <set_cursor_pos+0x4c>)
 8000538:	88bb      	ldrh	r3, [r7, #4]
 800053a:	8053      	strh	r3, [r2, #2]
	HD44780_SetCursor(col, row);
 800053c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000540:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f95e 	bl	8000808 <HD44780_SetCursor>
	printf("col : %d row : %d\n", pos.col, pos.row);
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <set_cursor_pos+0x4c>)
 800054e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000552:	4619      	mov	r1, r3
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <set_cursor_pos+0x4c>)
 8000556:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800055a:	461a      	mov	r2, r3
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <set_cursor_pos+0x50>)
 800055e:	f003 f951 	bl	8003804 <iprintf>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000a8 	.word	0x200000a8
 8000570:	080046cc 	.word	0x080046cc

08000574 <get_cursor_pos>:
Pos get_cursor_pos()
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
	return pos;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <get_cursor_pos+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	2300      	movs	r3, #0
 8000582:	88ba      	ldrh	r2, [r7, #4]
 8000584:	f362 030f 	bfi	r3, r2, #0, #16
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	200000a8 	.word	0x200000a8

0800059c <check_change_pw_key_pressed>:

short check_change_pw_key_pressed(short* long_press_cnt, short* gp_timer)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 80005a6:	e01a      	b.n	80005de <check_change_pw_key_pressed+0x42>
		   !HAL_GPIO_ReadPin(R4_GPIO_Port, R4_Pin) )
	{
		if(*long_press_cnt == 0)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d108      	bne.n	80005c4 <check_change_pw_key_pressed+0x28>
		{
			printf("실행\n");
 80005b2:	4816      	ldr	r0, [pc, #88]	; (800060c <check_change_pw_key_pressed+0x70>)
 80005b4:	f003 f99a 	bl	80038ec <puts>
			*long_press_cnt = *gp_timer;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	e00c      	b.n	80005de <check_change_pw_key_pressed+0x42>
		}else if(*gp_timer >= *long_press_cnt + 2000)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80005d6:	429a      	cmp	r2, r3
 80005d8:	db01      	blt.n	80005de <check_change_pw_key_pressed+0x42>
		{

			return 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	e011      	b.n	8000602 <check_change_pw_key_pressed+0x66>
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 80005de:	2108      	movs	r1, #8
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <check_change_pw_key_pressed+0x74>)
 80005e2:	f001 fa8b 	bl	8001afc <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d106      	bne.n	80005fa <check_change_pw_key_pressed+0x5e>
		   !HAL_GPIO_ReadPin(R4_GPIO_Port, R4_Pin) )
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <check_change_pw_key_pressed+0x78>)
 80005f0:	f001 fa84 	bl	8001afc <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0d6      	beq.n	80005a8 <check_change_pw_key_pressed+0xc>
		}
	}

	*long_press_cnt = 0;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	801a      	strh	r2, [r3, #0]
	return 0;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	080046e0 	.word	0x080046e0
 8000610:	40010c00 	.word	0x40010c00
 8000614:	40011000 	.word	0x40011000

08000618 <changePassword>:
short changePassword(char* original_password, short size)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
	HD44780_Clear();
 8000624:	f000 f8da 	bl	80007dc <HD44780_Clear>
	HD44780_PrintStr("Change Password");
 8000628:	4824      	ldr	r0, [pc, #144]	; (80006bc <changePassword+0xa4>)
 800062a:	f000 f96a 	bl	8000902 <HD44780_PrintStr>

	char key;
	short pw_idx = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	82fb      	strh	r3, [r7, #22]
	char pw[10] = "\0";
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <changePassword+0xa8>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	813b      	strh	r3, [r7, #8]
 8000638:	f107 030a 	add.w	r3, r7, #10
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
	while(1)
	{
		printf("%d\n", pw_idx);
 8000642:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000646:	4619      	mov	r1, r3
 8000648:	481e      	ldr	r0, [pc, #120]	; (80006c4 <changePassword+0xac>)
 800064a:	f003 f8db 	bl	8003804 <iprintf>
		while((key = scan_Rx()) == 255) ;
 800064e:	f7ff fd87 	bl	8000160 <scan_Rx>
 8000652:	4603      	mov	r3, r0
 8000654:	757b      	strb	r3, [r7, #21]
 8000656:	7d7b      	ldrb	r3, [r7, #21]
 8000658:	2bff      	cmp	r3, #255	; 0xff
 800065a:	d0f8      	beq.n	800064e <changePassword+0x36>

		if( key == '#')
 800065c:	7d7b      	ldrb	r3, [r7, #21]
 800065e:	2b23      	cmp	r3, #35	; 0x23
 8000660:	d025      	beq.n	80006ae <changePassword+0x96>
		{
			continue;
		}else if(key != 255 && pw_idx <= 5)
 8000662:	7d7b      	ldrb	r3, [r7, #21]
 8000664:	2bff      	cmp	r3, #255	; 0xff
 8000666:	d018      	beq.n	800069a <changePassword+0x82>
 8000668:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800066c:	2b05      	cmp	r3, #5
 800066e:	dc14      	bgt.n	800069a <changePassword+0x82>
		{
			HD44780_Clear();
 8000670:	f000 f8b4 	bl	80007dc <HD44780_Clear>
			pw[pw_idx++] = key;
 8000674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000678:	b293      	uxth	r3, r2
 800067a:	3301      	adds	r3, #1
 800067c:	b29b      	uxth	r3, r3
 800067e:	82fb      	strh	r3, [r7, #22]
 8000680:	4613      	mov	r3, r2
 8000682:	f107 0218 	add.w	r2, r7, #24
 8000686:	4413      	add	r3, r2
 8000688:	7d7a      	ldrb	r2, [r7, #21]
 800068a:	f803 2c10 	strb.w	r2, [r3, #-16]
			HD44780_PrintStr(pw);
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f935 	bl	8000902 <HD44780_PrintStr>
 8000698:	e00a      	b.n	80006b0 <changePassword+0x98>
		}else if(key == '-')
 800069a:	7d7b      	ldrb	r3, [r7, #21]
 800069c:	2b2d      	cmp	r3, #45	; 0x2d
 800069e:	d1d0      	bne.n	8000642 <changePassword+0x2a>
		{
			*original_password = pw;
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	701a      	strb	r2, [r3, #0]

			return 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e001      	b.n	80006b2 <changePassword+0x9a>
			continue;
 80006ae:	bf00      	nop
		printf("%d\n", pw_idx);
 80006b0:	e7c7      	b.n	8000642 <changePassword+0x2a>
		}
	}

	return 0;
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	080046e8 	.word	0x080046e8
 80006c0:	080046f8 	.word	0x080046f8
 80006c4:	080046c0 	.word	0x080046c0

080006c8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]

  dpRows = rows;
 80006d2:	4a3b      	ldr	r2, [pc, #236]	; (80007c0 <HD44780_Init+0xf8>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80006d8:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <HD44780_Init+0xfc>)
 80006da:	2208      	movs	r2, #8
 80006dc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006de:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <HD44780_Init+0x100>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80006e4:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <HD44780_Init+0xf8>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d907      	bls.n	80006fc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80006ec:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <HD44780_Init+0x100>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <HD44780_Init+0x100>)
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e006      	b.n	800070a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80006fc:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <HD44780_Init+0x100>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <HD44780_Init+0x100>)
 8000708:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800070a:	f000 f997 	bl	8000a3c <DelayInit>
  HAL_Delay(50);
 800070e:	2032      	movs	r0, #50	; 0x32
 8000710:	f000 ff6a 	bl	80015e8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <HD44780_Init+0xfc>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f955 	bl	80009c8 <ExpanderWrite>
  HAL_Delay(1000);
 800071e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000722:	f000 ff61 	bl	80015e8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000726:	2030      	movs	r0, #48	; 0x30
 8000728:	f000 f93c 	bl	80009a4 <Write4Bits>
  DelayUS(4500);
 800072c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000730:	f000 f9ac 	bl	8000a8c <DelayUS>

  Write4Bits(0x03 << 4);
 8000734:	2030      	movs	r0, #48	; 0x30
 8000736:	f000 f935 	bl	80009a4 <Write4Bits>
  DelayUS(4500);
 800073a:	f241 1094 	movw	r0, #4500	; 0x1194
 800073e:	f000 f9a5 	bl	8000a8c <DelayUS>

  Write4Bits(0x03 << 4);
 8000742:	2030      	movs	r0, #48	; 0x30
 8000744:	f000 f92e 	bl	80009a4 <Write4Bits>
  DelayUS(4500);
 8000748:	f241 1094 	movw	r0, #4500	; 0x1194
 800074c:	f000 f99e 	bl	8000a8c <DelayUS>

  Write4Bits(0x02 << 4);
 8000750:	2020      	movs	r0, #32
 8000752:	f000 f927 	bl	80009a4 <Write4Bits>
  DelayUS(100);
 8000756:	2064      	movs	r0, #100	; 0x64
 8000758:	f000 f998 	bl	8000a8c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HD44780_Init+0x100>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f8df 	bl	800092a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HD44780_Init+0x104>)
 800076e:	2204      	movs	r2, #4
 8000770:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000772:	f000 f87b 	bl	800086c <HD44780_Display>
  HD44780_Clear();
 8000776:	f000 f831 	bl	80007dc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HD44780_Init+0x108>)
 800077c:	2202      	movs	r2, #2
 800077e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HD44780_Init+0x108>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f8cd 	bl	800092a <SendCommand>
  DelayUS(4500);
 8000790:	f241 1094 	movw	r0, #4500	; 0x1194
 8000794:	f000 f97a 	bl	8000a8c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000798:	490e      	ldr	r1, [pc, #56]	; (80007d4 <HD44780_Init+0x10c>)
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f87c 	bl	8000898 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HD44780_Init+0x110>)
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 f878 	bl	8000898 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80007a8:	f000 f823 	bl	80007f2 <HD44780_Home>
  set_cursor_pos(-1, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f7ff feb5 	bl	8000520 <set_cursor_pos>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000be 	.word	0x200000be
 80007c4:	200000c0 	.word	0x200000c0
 80007c8:	200000bc 	.word	0x200000bc
 80007cc:	200000bf 	.word	0x200000bf
 80007d0:	200000bd 	.word	0x200000bd
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000008 	.word	0x20000008

080007dc <HD44780_Clear>:

void HD44780_Clear()
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);	// LCD_CLEARDISPLAY = 0x01
 80007e0:	2001      	movs	r0, #1
 80007e2:	f000 f8a2 	bl	800092a <SendCommand>
  DelayUS(2000);
 80007e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ea:	f000 f94f 	bl	8000a8c <DelayUS>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HD44780_Home>:

void HD44780_Home()
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 f897 	bl	800092a <SendCommand>
  DelayUS(2000);
 80007fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000800:	f000 f944 	bl	8000a8c <DelayUS>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HD44780_SetCursor+0x5c>)
 800081a:	f107 0408 	add.w	r4, r7, #8
 800081e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HD44780_SetCursor+0x60>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d303      	bcc.n	8000836 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HD44780_SetCursor+0x60>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	3b01      	subs	r3, #1
 8000834:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	f107 0218 	add.w	r2, r7, #24
 800083e:	4413      	add	r3, r2
 8000840:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4413      	add	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	b25b      	sxtb	r3, r3
 800084e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000852:	b25b      	sxtb	r3, r3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f867 	bl	800092a <SendCommand>
}
 800085c:	bf00      	nop
 800085e:	371c      	adds	r7, #28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	08004704 	.word	0x08004704
 8000868:	200000be 	.word	0x200000be

0800086c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HD44780_Display+0x28>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HD44780_Display+0x28>)
 800087c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HD44780_Display+0x28>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f84e 	bl	800092a <SendCommand>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000bf 	.word	0x200000bf

08000898 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f835 	bl	800092a <SendCommand>
  for (int i=0; i<8; i++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	e009      	b.n	80008da <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f839 	bl	8000946 <SendChar>
  for (int i=0; i<8; i++)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b07      	cmp	r3, #7
 80008de:	ddf2      	ble.n	80008c6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f826 	bl	8000946 <SendChar>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800090a:	e006      	b.n	800091a <HD44780_PrintStr+0x18>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f816 	bl	8000946 <SendChar>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1f4      	bne.n	800090c <HD44780_PrintStr+0xa>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f812 	bl	8000962 <Send>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f804 	bl	8000962 <Send>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	460a      	mov	r2, r1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	4613      	mov	r3, r2
 8000970:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;		// 0
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f023 030f 	bic.w	r3, r3, #15
 8000978:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;	// decimal : 16, hexadecimal : 0x20 = 20H
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000980:	7bfa      	ldrb	r2, [r7, #15]
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	4313      	orrs	r3, r2
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f80b 	bl	80009a4 <Write4Bits>
  Write4Bits((lownib)|mode);
 800098e:	7bba      	ldrb	r2, [r7, #14]
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	4313      	orrs	r3, r2
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f804 	bl	80009a4 <Write4Bits>
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f809 	bl	80009c8 <ExpanderWrite>
  PulseEnable(value);
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f821 	bl	8000a00 <PulseEnable>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight; // 0 | 0x08
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <ExpanderWrite+0x30>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80009de:	f107 020f 	add.w	r2, r7, #15
 80009e2:	230a      	movs	r3, #10
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	214e      	movs	r1, #78	; 0x4e
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <ExpanderWrite+0x34>)
 80009ec:	f001 fa10 	bl	8001e10 <HAL_I2C_Master_Transmit>
}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000c0 	.word	0x200000c0
 80009fc:	200000c4 	.word	0x200000c4

08000a00 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffd8 	bl	80009c8 <ExpanderWrite>
  DelayUS(20);
 8000a18:	2014      	movs	r0, #20
 8000a1a:	f000 f837 	bl	8000a8c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f023 0304 	bic.w	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ffce 	bl	80009c8 <ExpanderWrite>
  DelayUS(20);
 8000a2c:	2014      	movs	r0, #20
 8000a2e:	f000 f82d 	bl	8000a8c <DelayUS>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <DelayInit>:

static void DelayInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <DelayInit+0x48>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <DelayInit+0x48>)
 8000a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a4a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <DelayInit+0x48>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <DelayInit+0x48>)
 8000a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a56:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <DelayInit+0x4c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <DelayInit+0x4c>)
 8000a5e:	f023 0301 	bic.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <DelayInit+0x4c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <DelayInit+0x4c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <DelayInit+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000a76:	bf00      	nop
  __ASM volatile ("NOP");
 8000a78:	bf00      	nop
  __ASM volatile ("NOP");
 8000a7a:	bf00      	nop
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	e000edf0 	.word	0xe000edf0
 8000a88:	e0001000 	.word	0xe0001000

08000a8c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <DelayUS+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <DelayUS+0x44>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9a      	lsrs	r2, r3, #18
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <DelayUS+0x48>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <DelayUS+0x48>)
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f6      	bhi.n	8000aae <DelayUS+0x22>
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000018 	.word	0x20000018
 8000ad0:	431bde83 	.word	0x431bde83
 8000ad4:	e0001000 	.word	0xe0001000

08000ad8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b0a      	cmp	r3, #10
 8000ae4:	d106      	bne.n	8000af4 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 8000ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aea:	2201      	movs	r2, #1
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <__io_putchar+0x34>)
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <__io_putchar+0x38>)
 8000af0:	f002 fceb 	bl	80034ca <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afa:	2201      	movs	r2, #1
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <__io_putchar+0x38>)
 8000afe:	f002 fce4 	bl	80034ca <HAL_UART_Transmit>

	return ch;
 8000b02:	687b      	ldr	r3, [r7, #4]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08004714 	.word	0x08004714
 8000b10:	20000160 	.word	0x20000160

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b090      	sub	sp, #64	; 0x40
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 fd03 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f93d 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f000 fa23 	bl	8000f6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b26:	f000 f9f7 	bl	8000f18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b2a:	f000 f979 	bl	8000e20 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b2e:	f000 f9a5 	bl	8000e7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  char* str = "Enter Password";
 8000b32:	4b8d      	ldr	r3, [pc, #564]	; (8000d68 <main+0x254>)
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  short checkStrRemoved = 0x00;
 8000b36:	2300      	movs	r3, #0
 8000b38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  char btn_key;									// a character that user press([1~9], [A-D])
  char input_key[2] = "\0";
 8000b3a:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <main+0x258>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	84bb      	strh	r3, [r7, #36]	; 0x24
  char pw[MAX_CHAR_SIZE] = "\0";					// password that has input_numkey
 8000b40:	4b8a      	ldr	r3, [pc, #552]	; (8000d6c <main+0x258>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	82bb      	strh	r3, [r7, #20]
 8000b46:	f107 0316 	add.w	r3, r7, #22
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	819a      	strh	r2, [r3, #12]
  short long_press_cnt = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	827b      	strh	r3, [r7, #18]
  char password[PW_MAX_SIZE] = "123456\0";		// door-lock password
 8000b58:	4a85      	ldr	r2, [pc, #532]	; (8000d70 <main+0x25c>)
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b62:	6018      	str	r0, [r3, #0]
 8000b64:	3304      	adds	r3, #4
 8000b66:	8019      	strh	r1, [r3, #0]
 8000b68:	3302      	adds	r3, #2
 8000b6a:	0c0a      	lsrs	r2, r1, #16
 8000b6c:	701a      	strb	r2, [r3, #0]
  short change_pw_key_pressed = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	86fb      	strh	r3, [r7, #54]	; 0x36

  HD44780_Init(2);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f7ff fda8 	bl	80006c8 <HD44780_Init>
  HD44780_PrintStr(str);
 8000b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b7a:	f7ff fec2 	bl	8000902 <HD44780_PrintStr>


  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000b7e:	487d      	ldr	r0, [pc, #500]	; (8000d74 <main+0x260>)
 8000b80:	f002 f8b8 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <main+0x7a>
  {
	  /* Starting Error */
	  Error_Handler();
 8000b8a:	f000 fae1 	bl	8001150 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  short pw_idx = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	87bb      	strh	r3, [r7, #60]	; 0x3c
  while (1)
  {
	  /* time out */
	  int timeout = ((remain_time_start_idx < 0) ? 0x10 : 0x00);
 8000b92:	4b79      	ldr	r3, [pc, #484]	; (8000d78 <main+0x264>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da01      	bge.n	8000b9e <main+0x8a>
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	e000      	b.n	8000ba0 <main+0x8c>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30

	  /* check corret btn_key */
	  if( (btn_key = scan_Rx()) == 255)
 8000ba2:	f7ff fadd 	bl	8000160 <scan_Rx>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d105      	bne.n	8000bc0 <main+0xac>
	  {
		  if(!(timeout & 0x10))
 8000bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80d1 	beq.w	8000d62 <main+0x24e>
			  continue;
		  }
	  }

	  // 비밀번호 변경 키 -> 2초간 Long Press
	  if(btn_key == '#')
 8000bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bc4:	2b23      	cmp	r3, #35	; 0x23
 8000bc6:	d11b      	bne.n	8000c00 <main+0xec>
	  {
		  short retval = check_change_pw_key_pressed(&long_press_cnt, &gp_timer);
 8000bc8:	f107 0312 	add.w	r3, r7, #18
 8000bcc:	496b      	ldr	r1, [pc, #428]	; (8000d7c <main+0x268>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fce4 	bl	800059c <check_change_pw_key_pressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
		  if(retval)
 8000bd8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00f      	beq.n	8000c00 <main+0xec>
		  {
			  if(changePassword(&password, PW_MAX_SIZE))
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	2107      	movs	r1, #7
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fd16 	bl	8000618 <changePassword>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <main+0xe6>
			  {
				  printf("success password\n");
 8000bf2:	4863      	ldr	r0, [pc, #396]	; (8000d80 <main+0x26c>)
 8000bf4:	f002 fe7a 	bl	80038ec <puts>
 8000bf8:	e002      	b.n	8000c00 <main+0xec>
			  }else
			  {
				  printf("failed password\n");
 8000bfa:	4862      	ldr	r0, [pc, #392]	; (8000d84 <main+0x270>)
 8000bfc:	f002 fe76 	bl	80038ec <puts>
			  }
		  }
	  }

	  /* set checkStrRemoved when condition is true */
	  if((btn_key != 255) && (checkStrRemoved == 0x00) && (btn_key != '-') )
 8000c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c04:	2bff      	cmp	r3, #255	; 0xff
 8000c06:	d009      	beq.n	8000c1c <main+0x108>
 8000c08:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <main+0x108>
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c14:	2b2d      	cmp	r3, #45	; 0x2d
 8000c16:	d001      	beq.n	8000c1c <main+0x108>
	  {
		  checkStrRemoved = 0x01;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }

	  /* if "Enter Password" string is removed 딱 한 번 실행되는 블록*/
	  if(checkStrRemoved == 0x01)
 8000c1c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d10d      	bne.n	8000c40 <main+0x12c>
	  {
		  HD44780_Clear();
 8000c24:	f7ff fdda 	bl	80007dc <HD44780_Clear>
		  checkStrRemoved = -1;
 8000c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
		  unlock = 0x01;
 8000c2e:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <main+0x274>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	801a      	strh	r2, [r3, #0]

		  set_remain_time_progress();
 8000c34:	f7ff fc2e 	bl	8000494 <set_remain_time_progress>
		  gTimerCnt = 999;
 8000c38:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <main+0x278>)
 8000c3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c3e:	601a      	str	r2, [r3, #0]
	  }

	  /* print keypad value into i2c lcd */
	  if(unlock)
 8000c40:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <main+0x274>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8084 	beq.w	8000d54 <main+0x240>
	  {

		  input_key[0] = btn_key;
 8000c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		  /* remove */
		  if(!strcmp(input_key, "-"))
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	494d      	ldr	r1, [pc, #308]	; (8000d90 <main+0x27c>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fa76 	bl	800014c <strcmp>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d130      	bne.n	8000cc8 <main+0x1b4>
		  {
			  /* issue -> "pw_idx--" */
			  Pos current_cursor_pos = get_cursor_pos();
 8000c66:	f7ff fc85 	bl	8000574 <get_cursor_pos>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	607b      	str	r3, [r7, #4]
			  if(current_cursor_pos.col >= 0 && current_cursor_pos.col <= 15)
 8000c6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db8d      	blt.n	8000b92 <main+0x7e>
 8000c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	dc89      	bgt.n	8000b92 <main+0x7e>
			  {
				  clear_character(current_cursor_pos.col, current_cursor_pos.row);
 8000c7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc31 	bl	80004f0 <clear_character>
				  set_cursor_pos(--current_cursor_pos.col, current_cursor_pos.row);
 8000c8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	80bb      	strh	r3, [r7, #4]
 8000c9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ca0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fc3a 	bl	8000520 <set_cursor_pos>
				  pw[pw_idx--] = NULL;
 8000cac:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8000cb0:	b293      	uxth	r3, r2
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000cb8:	4613      	mov	r3, r2
 8000cba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8000cc6:	e764      	b.n	8000b92 <main+0x7e>
			  }
			  continue;
		  }

		  /* check time out */
		  int checkPw = (((!strcmp(input_key, "*")) == 1) ? 0x01 : 0x00);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4931      	ldr	r1, [pc, #196]	; (8000d94 <main+0x280>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa3c 	bl	800014c <strcmp>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf0c      	ite	eq
 8000cda:	2301      	moveq	r3, #1
 8000cdc:	2300      	movne	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
		  if(checkPw || timeout)
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <main+0x1da>
 8000ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01a      	beq.n	8000d24 <main+0x210>
		  {
			  checkPassword(pw, password);
 8000cee:	f107 0208 	add.w	r2, r7, #8
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fbbd 	bl	8000478 <checkPassword>
			  if(timeout & 0x10)
 8000cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d025      	beq.n	8000d54 <main+0x240>
			  {
				  HD44780_Clear();
 8000d08:	f7ff fd68 	bl	80007dc <HD44780_Clear>
				  success_set_remain_time_progress = 0;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <main+0x284>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	801a      	strh	r2, [r3, #0]
				  set_remain_time_progress();
 8000d12:	f7ff fbbf 	bl	8000494 <set_remain_time_progress>
				  remain_time_start_idx = 10;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <main+0x264>)
 8000d18:	220a      	movs	r2, #10
 8000d1a:	601a      	str	r2, [r3, #0]
				  pw_idx = -1;
 8000d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d20:	87bb      	strh	r3, [r7, #60]	; 0x3c
			  if(timeout & 0x10)
 8000d22:	e017      	b.n	8000d54 <main+0x240>
			  }

		  }else
		  {
			  /* write */
			  if(pw_idx < MAX_CHAR_SIZE)
 8000d24:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	dc13      	bgt.n	8000d54 <main+0x240>
			  {
				  pw[pw_idx] = btn_key;
 8000d2c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000d30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d34:	4413      	add	r3, r2
 8000d36:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d3a:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  set_cursor_pos(pw_idx, 0);
 8000d3e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fbeb 	bl	8000520 <set_cursor_pos>
				  HD44780_PrintStr(input_key);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fdd7 	bl	8000902 <HD44780_PrintStr>
			  }
		  }
	  }
	  pw_idx++;
 8000d54:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000d60:	e717      	b.n	8000b92 <main+0x7e>
			  continue;
 8000d62:	bf00      	nop
  {
 8000d64:	e715      	b.n	8000b92 <main+0x7e>
 8000d66:	bf00      	nop
 8000d68:	08004718 	.word	0x08004718
 8000d6c:	08004754 	.word	0x08004754
 8000d70:	08004758 	.word	0x08004758
 8000d74:	20000118 	.word	0x20000118
 8000d78:	20000014 	.word	0x20000014
 8000d7c:	200000ae 	.word	0x200000ae
 8000d80:	08004728 	.word	0x08004728
 8000d84:	0800473c 	.word	0x0800473c
 8000d88:	200000ac 	.word	0x200000ac
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	0800474c 	.word	0x0800474c
 8000d94:	08004750 	.word	0x08004750
 8000d98:	200000a4 	.word	0x200000a4

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b090      	sub	sp, #64	; 0x40
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	2228      	movs	r2, #40	; 0x28
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fd22 	bl	80037f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dd2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fb1d 	bl	800241c <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000de8:	f000 f9b2 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2102      	movs	r1, #2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fd88 	bl	800291c <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e12:	f000 f99d 	bl	8001150 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3740      	adds	r7, #64	; 0x40
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <MX_I2C1_Init+0x54>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_I2C1_Init+0x58>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e5e:	f000 fe9f 	bl	8001ba0 <HAL_I2C_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e68:	f000 f972 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000c4 	.word	0x200000c4
 8000e74:	40005400 	.word	0x40005400
 8000e78:	000186a0 	.word	0x000186a0

08000e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <MX_TIM3_Init+0x98>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000ea0:	223f      	movs	r2, #63	; 0x3f
 8000ea2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ebe:	4814      	ldr	r0, [pc, #80]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000ec0:	f001 fec8 	bl	8002c54 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 f941 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000edc:	f002 f864 	bl	8002fa8 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 f933 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_TIM3_Init+0x94>)
 8000ef8:	f002 fa2a 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f02:	f000 f925 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000118 	.word	0x20000118
 8000f14:	40000400 	.word	0x40000400

08000f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <MX_USART2_UART_Init+0x50>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f50:	f002 fa6e 	bl	8003430 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5a:	f000 f8f9 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000160 	.word	0x20000160
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f80:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b4c      	ldr	r3, [pc, #304]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000f9e:	f043 0320 	orr.w	r3, r3, #32
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0320 	and.w	r3, r3, #32
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|R2_Pin|R3_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000fe6:	4837      	ldr	r0, [pc, #220]	; (80010c4 <MX_GPIO_Init+0x158>)
 8000fe8:	f000 fd9f 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff2:	4835      	ldr	r0, [pc, #212]	; (80010c8 <MX_GPIO_Init+0x15c>)
 8000ff4:	f000 fd99 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2180      	movs	r1, #128	; 0x80
 8000ffc:	4833      	ldr	r0, [pc, #204]	; (80010cc <MX_GPIO_Init+0x160>)
 8000ffe:	f000 fd94 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <MX_GPIO_Init+0x164>)
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	482d      	ldr	r0, [pc, #180]	; (80010cc <MX_GPIO_Init+0x160>)
 8001018:	f000 fc16 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin R2_Pin R3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|R2_Pin|R3_Pin;
 800101c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4619      	mov	r1, r3
 8001034:	4823      	ldr	r0, [pc, #140]	; (80010c4 <MX_GPIO_Init+0x158>)
 8001036:	f000 fc07 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 800103a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	481d      	ldr	r0, [pc, #116]	; (80010c8 <MX_GPIO_Init+0x15c>)
 8001054:	f000 fbf8 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_Pin */
  GPIO_InitStruct.Pin = R4_Pin;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R4_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4817      	ldr	r0, [pc, #92]	; (80010cc <MX_GPIO_Init+0x160>)
 8001070:	f000 fbea 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
 8001074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4619      	mov	r1, r3
 8001088:	480e      	ldr	r0, [pc, #56]	; (80010c4 <MX_GPIO_Init+0x158>)
 800108a:	f000 fbdd 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin|C2_Pin;
 800108e:	2338      	movs	r3, #56	; 0x38
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_GPIO_Init+0x15c>)
 80010a2:	f000 fbd1 	bl	8001848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2028      	movs	r0, #40	; 0x28
 80010ac:	f000 fb95 	bl	80017da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b0:	2028      	movs	r0, #40	; 0x28
 80010b2:	f000 fbae 	bl	8001812 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40011000 	.word	0x40011000
 80010d0:	10110000 	.word	0x10110000

080010d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	gp_timer++;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010e6:	801a      	strh	r2, [r3, #0]
	if(unlock)
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d020      	beq.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		gTimerCnt++;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010fa:	6013      	str	r3, [r2, #0]
		if(gTimerCnt == 1000)
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001104:	d116      	bne.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			if(remain_time_start_idx >= 0 && success_set_remain_time_progress)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db12      	blt.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x60>
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00d      	beq.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x60>
			{
				unset_remain_time_progress(remain_time_start_idx);
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9d4 	bl	80004cc <unset_remain_time_progress>
				remain_time_start_idx--;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800112c:	6013      	str	r3, [r2, #0]
				gTimerCnt = 0;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000ae 	.word	0x200000ae
 8001140:	200000ac 	.word	0x200000ac
 8001144:	20000010 	.word	0x20000010
 8001148:	20000014 	.word	0x20000014
 800114c:	200000a4 	.word	0x200000a4

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_MspInit+0x5c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_MspInit+0x5c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_MspInit+0x5c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_MspInit+0x5c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_MspInit+0x60>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_MspInit+0x60>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000

080011c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_I2C_MspInit+0x90>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d132      	bne.n	8001246 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_I2C_MspInit+0x94>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_I2C_MspInit+0x94>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_I2C_MspInit+0x94>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fe:	2312      	movs	r3, #18
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <HAL_I2C_MspInit+0x98>)
 800120e:	f000 fb1b 	bl	8001848 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_I2C_MspInit+0x9c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_I2C_MspInit+0x9c>)
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_I2C_MspInit+0x94>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_I2C_MspInit+0x94>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_I2C_MspInit+0x94>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40005400 	.word	0x40005400
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40010000 	.word	0x40010000

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_TIM_Base_MspInit+0x44>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d113      	bne.n	800129a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	201d      	movs	r0, #29
 8001290:	f000 faa3 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001294:	201d      	movs	r0, #29
 8001296:	f000 fabc 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <HAL_UART_MspInit+0x70>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d123      	bne.n	8001314 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_UART_MspInit+0x74>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <HAL_UART_MspInit+0x74>)
 80012d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d6:	61d3      	str	r3, [r2, #28]
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_UART_MspInit+0x74>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_UART_MspInit+0x74>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_UART_MspInit+0x74>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_UART_MspInit+0x74>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012fc:	230c      	movs	r3, #12
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_UART_MspInit+0x78>)
 8001310:	f000 fa9a 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40004400 	.word	0x40004400
 8001320:	40021000 	.word	0x40021000
 8001324:	40010800 	.word	0x40010800

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <HardFault_Handler+0x4>

0800133a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <MemManage_Handler+0x4>

08001340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <BusFault_Handler+0x4>

08001346 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f91c 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM3_IRQHandler+0x10>)
 8001382:	f001 fd09 	bl	8002d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000118 	.word	0x20000118

08001390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001394:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001398:	f000 fbe0 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	4601      	mov	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
	}

return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e009      	b.n	8001400 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60ba      	str	r2, [r7, #8]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fb6f 	bl	8000ad8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf1      	blt.n	80013ec <_write+0x12>
	}
	return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_close>:

int _close(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001438:	605a      	str	r2, [r3, #4]
	return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <_isatty>:

int _isatty(int file)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	return 1;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
	return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
	...

08001474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x16>
		heap_end = &end;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <_sbrk+0x50>)
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <_sbrk+0x54>)
 8001488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_sbrk+0x50>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <_sbrk+0x50>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	466a      	mov	r2, sp
 800149a:	4293      	cmp	r3, r2
 800149c:	d907      	bls.n	80014ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800149e:	f002 f97f 	bl	80037a0 <__errno>
 80014a2:	4602      	mov	r2, r0
 80014a4:	230c      	movs	r3, #12
 80014a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	e006      	b.n	80014bc <_sbrk+0x48>
	}

	heap_end += incr;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_sbrk+0x50>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <_sbrk+0x50>)
 80014b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200000b0 	.word	0x200000b0
 80014c8:	200001b0 	.word	0x200001b0

080014cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fe:	f7ff ffe5 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 f953 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001506:	f7ff fb05 	bl	8000b14 <main>
  bx lr
 800150a:	4770      	bx	lr
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001514:	0800482c 	.word	0x0800482c
  ldr r2, =_sbss
 8001518:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800151c:	200001ac 	.word	0x200001ac

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_Init+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_Init+0x28>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 f945 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f808 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001540:	f7ff fe0c 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x54>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f95d 	bl	800182e <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 f925 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <HAL_InitTick+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000018 	.word	0x20000018
 80015a8:	20000020 	.word	0x20000020
 80015ac:	2000001c 	.word	0x2000001c

080015b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x1c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_IncTick+0x20>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_IncTick+0x20>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000020 	.word	0x20000020
 80015d0:	200001a4 	.word	0x200001a4

080015d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <HAL_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	200001a4 	.word	0x200001a4

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_Delay+0x40>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffe0 	bl	80015d4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000020 	.word	0x20000020

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4906      	ldr	r1, [pc, #24]	; (80016c4 <__NVIC_EnableIRQ+0x34>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff90 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff2d 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff42 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff35 	bl	8001690 <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa2 	bl	8001780 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b08b      	sub	sp, #44	; 0x2c
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	e127      	b.n	8001aac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800185c:	2201      	movs	r2, #1
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8116 	bne.w	8001aa6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b12      	cmp	r3, #18
 8001880:	d034      	beq.n	80018ec <HAL_GPIO_Init+0xa4>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d80d      	bhi.n	80018a2 <HAL_GPIO_Init+0x5a>
 8001886:	2b02      	cmp	r3, #2
 8001888:	d02b      	beq.n	80018e2 <HAL_GPIO_Init+0x9a>
 800188a:	2b02      	cmp	r3, #2
 800188c:	d804      	bhi.n	8001898 <HAL_GPIO_Init+0x50>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d031      	beq.n	80018f6 <HAL_GPIO_Init+0xae>
 8001892:	2b01      	cmp	r3, #1
 8001894:	d01c      	beq.n	80018d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e048      	b.n	800192a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001898:	2b03      	cmp	r3, #3
 800189a:	d043      	beq.n	8001924 <HAL_GPIO_Init+0xdc>
 800189c:	2b11      	cmp	r3, #17
 800189e:	d01b      	beq.n	80018d8 <HAL_GPIO_Init+0x90>
          break;
 80018a0:	e043      	b.n	800192a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018a2:	4a89      	ldr	r2, [pc, #548]	; (8001ac8 <HAL_GPIO_Init+0x280>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d026      	beq.n	80018f6 <HAL_GPIO_Init+0xae>
 80018a8:	4a87      	ldr	r2, [pc, #540]	; (8001ac8 <HAL_GPIO_Init+0x280>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d806      	bhi.n	80018bc <HAL_GPIO_Init+0x74>
 80018ae:	4a87      	ldr	r2, [pc, #540]	; (8001acc <HAL_GPIO_Init+0x284>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d020      	beq.n	80018f6 <HAL_GPIO_Init+0xae>
 80018b4:	4a86      	ldr	r2, [pc, #536]	; (8001ad0 <HAL_GPIO_Init+0x288>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01d      	beq.n	80018f6 <HAL_GPIO_Init+0xae>
          break;
 80018ba:	e036      	b.n	800192a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018bc:	4a85      	ldr	r2, [pc, #532]	; (8001ad4 <HAL_GPIO_Init+0x28c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0xae>
 80018c2:	4a85      	ldr	r2, [pc, #532]	; (8001ad8 <HAL_GPIO_Init+0x290>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d016      	beq.n	80018f6 <HAL_GPIO_Init+0xae>
 80018c8:	4a84      	ldr	r2, [pc, #528]	; (8001adc <HAL_GPIO_Init+0x294>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0xae>
          break;
 80018ce:	e02c      	b.n	800192a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e028      	b.n	800192a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	3304      	adds	r3, #4
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e023      	b.n	800192a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	3308      	adds	r3, #8
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e01e      	b.n	800192a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	330c      	adds	r3, #12
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e019      	b.n	800192a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fe:	2304      	movs	r3, #4
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e012      	b.n	800192a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	611a      	str	r2, [r3, #16]
          break;
 8001916:	e008      	b.n	800192a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001918:	2308      	movs	r3, #8
 800191a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	615a      	str	r2, [r3, #20]
          break;
 8001922:	e002      	b.n	800192a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2bff      	cmp	r3, #255	; 0xff
 800192e:	d801      	bhi.n	8001934 <HAL_GPIO_Init+0xec>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	e001      	b.n	8001938 <HAL_GPIO_Init+0xf0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2bff      	cmp	r3, #255	; 0xff
 800193e:	d802      	bhi.n	8001946 <HAL_GPIO_Init+0xfe>
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x104>
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	3b08      	subs	r3, #8
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	210f      	movs	r1, #15
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	6a39      	ldr	r1, [r7, #32]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	431a      	orrs	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8096 	beq.w	8001aa6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197a:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_GPIO_Init+0x298>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <HAL_GPIO_Init+0x298>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6193      	str	r3, [r2, #24]
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <HAL_GPIO_Init+0x298>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001992:	4a54      	ldr	r2, [pc, #336]	; (8001ae4 <HAL_GPIO_Init+0x29c>)
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	; (8001ae8 <HAL_GPIO_Init+0x2a0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x19e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x2a4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x19a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <HAL_GPIO_Init+0x2a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x196>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_GPIO_Init+0x2ac>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x192>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x1a0>
 80019da:	2304      	movs	r3, #4
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1a0>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1a0>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1a0>
 80019e6:	2300      	movs	r3, #0
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	f002 0203 	and.w	r2, r2, #3
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f8:	493a      	ldr	r1, [pc, #232]	; (8001ae4 <HAL_GPIO_Init+0x29c>)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4938      	ldr	r1, [pc, #224]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a20:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	4933      	ldr	r1, [pc, #204]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	492e      	ldr	r1, [pc, #184]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4929      	ldr	r1, [pc, #164]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	4924      	ldr	r1, [pc, #144]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
 8001a6e:	e006      	b.n	8001a7e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	491f      	ldr	r1, [pc, #124]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	491a      	ldr	r1, [pc, #104]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60cb      	str	r3, [r1, #12]
 8001a96:	e006      	b.n	8001aa6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4915      	ldr	r1, [pc, #84]	; (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f47f aed0 	bne.w	800185c <HAL_GPIO_Init+0x14>
  }
}
 8001abc:	bf00      	nop
 8001abe:	372c      	adds	r7, #44	; 0x2c
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	10210000 	.word	0x10210000
 8001acc:	10110000 	.word	0x10110000
 8001ad0:	10120000 	.word	0x10120000
 8001ad4:	10310000 	.word	0x10310000
 8001ad8:	10320000 	.word	0x10320000
 8001adc:	10220000 	.word	0x10220000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40011400 	.word	0x40011400
 8001af8:	40010400 	.word	0x40010400

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3a:	787b      	ldrb	r3, [r7, #1]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b46:	e003      	b.n	8001b50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	041a      	lsls	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f806 	bl	8001b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e11f      	b.n	8001df2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fafa 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c04:	f000 ffe0 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4a7b      	ldr	r2, [pc, #492]	; (8001dfc <HAL_I2C_Init+0x25c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d807      	bhi.n	8001c24 <HAL_I2C_Init+0x84>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a7a      	ldr	r2, [pc, #488]	; (8001e00 <HAL_I2C_Init+0x260>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e006      	b.n	8001c32 <HAL_I2C_Init+0x92>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a77      	ldr	r2, [pc, #476]	; (8001e04 <HAL_I2C_Init+0x264>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf94      	ite	ls
 8001c2c:	2301      	movls	r3, #1
 8001c2e:	2300      	movhi	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0db      	b.n	8001df2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4a72      	ldr	r2, [pc, #456]	; (8001e08 <HAL_I2C_Init+0x268>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0c9b      	lsrs	r3, r3, #18
 8001c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a64      	ldr	r2, [pc, #400]	; (8001dfc <HAL_I2C_Init+0x25c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d802      	bhi.n	8001c74 <HAL_I2C_Init+0xd4>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3301      	adds	r3, #1
 8001c72:	e009      	b.n	8001c88 <HAL_I2C_Init+0xe8>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a63      	ldr	r2, [pc, #396]	; (8001e0c <HAL_I2C_Init+0x26c>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	3301      	adds	r3, #1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4956      	ldr	r1, [pc, #344]	; (8001dfc <HAL_I2C_Init+0x25c>)
 8001ca4:	428b      	cmp	r3, r1
 8001ca6:	d80d      	bhi.n	8001cc4 <HAL_I2C_Init+0x124>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e59      	subs	r1, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	bf38      	it	cc
 8001cc0:	2304      	movcc	r3, #4
 8001cc2:	e04f      	b.n	8001d64 <HAL_I2C_Init+0x1c4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <HAL_I2C_Init+0x150>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e012      	b.n	8001d16 <HAL_I2C_Init+0x176>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e58      	subs	r0, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	0099      	lsls	r1, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Init+0x17e>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e022      	b.n	8001d64 <HAL_I2C_Init+0x1c4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10e      	bne.n	8001d44 <HAL_I2C_Init+0x1a4>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e58      	subs	r0, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	440b      	add	r3, r1
 8001d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d42:	e00f      	b.n	8001d64 <HAL_I2C_Init+0x1c4>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	0099      	lsls	r1, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6911      	ldr	r1, [r2, #16]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68d2      	ldr	r2, [r2, #12]
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	000186a0 	.word	0x000186a0
 8001e00:	001e847f 	.word	0x001e847f
 8001e04:	003d08ff 	.word	0x003d08ff
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	4613      	mov	r3, r2
 8001e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff fbd6 	bl	80015d4 <HAL_GetTick>
 8001e28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	f040 80e0 	bne.w	8001ff8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2319      	movs	r3, #25
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4970      	ldr	r1, [pc, #448]	; (8002004 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f964 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0d3      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2C_Master_Transmit+0x50>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0cc      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d007      	beq.n	8001e86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2221      	movs	r2, #33	; 0x21
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	893a      	ldrh	r2, [r7, #8]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4a50      	ldr	r2, [pc, #320]	; (8002008 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	6a3a      	ldr	r2, [r7, #32]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f89c 	bl	800200c <I2C_MasterRequestWrite>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08d      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ef4:	e066      	b.n	8001fc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f9de 	bl	80022bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d107      	bne.n	8001f1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06b      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d11b      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x188>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f9ce 	bl	800233e <I2C_WaitOnBTFFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d107      	bne.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e01a      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d194      	bne.n	8001ef6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ff8:	2302      	movs	r3, #2
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	00100002 	.word	0x00100002
 8002008:	ffff0000 	.word	0xffff0000

0800200c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	460b      	mov	r3, r1
 800201a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d006      	beq.n	8002036 <I2C_MasterRequestWrite+0x2a>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d003      	beq.n	8002036 <I2C_MasterRequestWrite+0x2a>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002034:	d108      	bne.n	8002048 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e00b      	b.n	8002060 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	2b12      	cmp	r3, #18
 800204e:	d107      	bne.n	8002060 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f84f 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00d      	beq.n	8002094 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002086:	d103      	bne.n	8002090 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e035      	b.n	8002100 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800209c:	d108      	bne.n	80020b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020ac:	611a      	str	r2, [r3, #16]
 80020ae:	e01b      	b.n	80020e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	11db      	asrs	r3, r3, #7
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 0306 	and.w	r3, r3, #6
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f063 030f 	orn	r3, r3, #15
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <I2C_MasterRequestWrite+0xfc>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f875 	bl	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e010      	b.n	8002100 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <I2C_MasterRequestWrite+0x100>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f865 	bl	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	00010008 	.word	0x00010008
 800210c:	00010002 	.word	0x00010002

08002110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002120:	e025      	b.n	800216e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d021      	beq.n	800216e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff fa53 	bl	80015d4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d116      	bne.n	800216e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f043 0220 	orr.w	r2, r3, #32
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e023      	b.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10d      	bne.n	8002194 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4013      	ands	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	e00c      	b.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d0b6      	beq.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021cc:	e051      	b.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021dc:	d123      	bne.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0204 	orr.w	r2, r3, #4
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e046      	b.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d021      	beq.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7ff f9d1 	bl	80015d4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d116      	bne.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e020      	b.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10c      	bne.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4013      	ands	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e00b      	b.n	80022ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	43da      	mvns	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4013      	ands	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d18d      	bne.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c8:	e02d      	b.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f878 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e02d      	b.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d021      	beq.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7ff f977 	bl	80015d4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d116      	bne.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e007      	b.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d1ca      	bne.n	80022ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800234a:	e02d      	b.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f837 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e02d      	b.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d021      	beq.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7ff f936 	bl	80015d4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d116      	bne.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e007      	b.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d1ca      	bne.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	d11b      	bne.n	8002410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e26c      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8087 	beq.w	800254a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243c:	4b92      	ldr	r3, [pc, #584]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b04      	cmp	r3, #4
 8002446:	d00c      	beq.n	8002462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002448:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d112      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
 8002454:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06c      	beq.n	8002548 <HAL_RCC_OscConfig+0x12c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d168      	bne.n	8002548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e246      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x76>
 8002484:	4b80      	ldr	r3, [pc, #512]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7f      	ldr	r2, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7a      	ldr	r2, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b78      	ldr	r3, [pc, #480]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a77      	ldr	r2, [pc, #476]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0xbc>
 80024be:	4b72      	ldr	r3, [pc, #456]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a71      	ldr	r2, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a67      	ldr	r2, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff f86c 	bl	80015d4 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff f868 	bl	80015d4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1fa      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xe4>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff f858 	bl	80015d4 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff f854 	bl	80015d4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1e6      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x10c>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002556:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1ba      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4939      	ldr	r1, [pc, #228]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_RCC_OscConfig+0x270>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff f80d 	bl	80015d4 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff f809 	bl	80015d4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e19b      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4927      	ldr	r1, [pc, #156]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x270>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe ffec 	bl	80015d4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe ffe8 	bl	80015d4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e17a      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_RCC_OscConfig+0x274>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe ffcc 	bl	80015d4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe ffc8 	bl	80015d4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e15a      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f000 fada 	bl	8002c18 <RCC_Delay>
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_OscConfig+0x274>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7fe ffb2 	bl	80015d4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002672:	e00f      	b.n	8002694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002674:	f7fe ffae 	bl	80015d4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d908      	bls.n	8002694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e140      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	42420000 	.word	0x42420000
 8002690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b9e      	ldr	r3, [pc, #632]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e9      	bne.n	8002674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a6 	beq.w	80027fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b97      	ldr	r3, [pc, #604]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	4b94      	ldr	r3, [pc, #592]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a93      	ldr	r2, [pc, #588]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	61d3      	str	r3, [r2, #28]
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a8a      	ldr	r2, [pc, #552]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7fe ff6f 	bl	80015d4 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe ff6b 	bl	80015d4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	; 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0fd      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b81      	ldr	r3, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x312>
 8002720:	4b7b      	ldr	r3, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a7a      	ldr	r2, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e02d      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a72      	ldr	r2, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	e01c      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d10c      	bne.n	8002772 <HAL_RCC_OscConfig+0x356>
 8002758:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	e00b      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002772:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a66      	ldr	r2, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	4b64      	ldr	r3, [pc, #400]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a63      	ldr	r2, [pc, #396]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d015      	beq.n	80027be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe ff1f 	bl	80015d4 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe ff1b 	bl	80015d4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0ab      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ee      	beq.n	800279a <HAL_RCC_OscConfig+0x37e>
 80027bc:	e014      	b.n	80027e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7fe ff09 	bl	80015d4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe ff05 	bl	80015d4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e095      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ee      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8081 	beq.w	8002906 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d061      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d146      	bne.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002818:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fed9 	bl	80015d4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fed5 	bl	80015d4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e067      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	492d      	ldr	r1, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a19      	ldr	r1, [r3, #32]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	430b      	orrs	r3, r1
 8002872:	4927      	ldr	r1, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fea9 	bl	80015d4 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fea5 	bl	80015d4 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e037      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x46a>
 80028a4:	e02f      	b.n	8002906 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fe92 	bl	80015d4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fe8e 	bl	80015d4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e020      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x498>
 80028d2:	e018      	b.n	8002906 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e013      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
 8002918:	42420060 	.word	0x42420060

0800291c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0d0      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4965      	ldr	r1, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800299a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d040      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e073      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06b      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4936      	ldr	r1, [pc, #216]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fde2 	bl	80015d4 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7fe fdde 	bl	80015d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e053      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1eb      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d210      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	4922      	ldr	r1, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fd40 	bl	8001550 <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08004774 	.word	0x08004774
 8002ae8:	20000018 	.word	0x20000018
 8002aec:	2000001c 	.word	0x2000001c

08002af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b490      	push	{r4, r7}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002af8:	1d3c      	adds	r4, r7, #4
 8002afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b00:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x46>
 8002b2e:	e02d      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	e02d      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	0c9b      	lsrs	r3, r3, #18
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b42:	4413      	add	r3, r2
 8002b44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	0c5b      	lsrs	r3, r3, #17
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b62:	4413      	add	r3, r2
 8002b64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b6e:	fb02 f203 	mul.w	r2, r2, r3
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	e004      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	623b      	str	r3, [r7, #32]
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b8e:	623b      	str	r3, [r7, #32]
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6a3b      	ldr	r3, [r7, #32]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc90      	pop	{r4, r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	08004760 	.word	0x08004760
 8002ba4:	08004770 	.word	0x08004770
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	007a1200 	.word	0x007a1200
 8002bb0:	003d0900 	.word	0x003d0900

08002bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b02      	ldr	r3, [pc, #8]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	20000018 	.word	0x20000018

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bcc:	f7ff fff2 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4601      	mov	r1, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4a03      	ldr	r2, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08004784 	.word	0x08004784

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	f7ff ffde 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	0adb      	lsrs	r3, r3, #11
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08004784 	.word	0x08004784

08002c18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <RCC_Delay+0x34>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <RCC_Delay+0x38>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0a5b      	lsrs	r3, r3, #9
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c34:	bf00      	nop
  }
  while (Delay --);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e5a      	subs	r2, r3, #1
 8002c3a:	60fa      	str	r2, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f9      	bne.n	8002c34 <RCC_Delay+0x1c>
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000018 	.word	0x20000018
 8002c50:	10624dd3 	.word	0x10624dd3

08002c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e041      	b.n	8002cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe faf0 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 fa64 	bl	8003160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e03a      	b.n	8002d82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <HAL_TIM_Base_Start_IT+0x98>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x58>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d009      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x58>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x58>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d010      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	e007      	b.n	8002d80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800

08002d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0202 	mvn.w	r2, #2
 8002dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9a4 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f997 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9a6 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0204 	mvn.w	r2, #4
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f97a 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f96d 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f97c 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0208 	mvn.w	r2, #8
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2204      	movs	r2, #4
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f950 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f943 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f952 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0210 	mvn.w	r2, #16
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f926 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f919 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f928 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0201 	mvn.w	r2, #1
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe f8dc 	bl	80010d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa6b 	bl	800341e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8ec 	bl	800314c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0220 	mvn.w	r2, #32
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa36 	bl	800340c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_ConfigClockSource+0x18>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e0a6      	b.n	800310e <HAL_TIM_ConfigClockSource+0x166>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d067      	beq.n	80030c8 <HAL_TIM_ConfigClockSource+0x120>
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d80b      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x6c>
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d073      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
 8003000:	2b10      	cmp	r3, #16
 8003002:	d802      	bhi.n	800300a <HAL_TIM_ConfigClockSource+0x62>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d06f      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003008:	e078      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800300a:	2b20      	cmp	r3, #32
 800300c:	d06c      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
 800300e:	2b30      	cmp	r3, #48	; 0x30
 8003010:	d06a      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003012:	e073      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003014:	2b70      	cmp	r3, #112	; 0x70
 8003016:	d00d      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x8c>
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d804      	bhi.n	8003026 <HAL_TIM_ConfigClockSource+0x7e>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d033      	beq.n	8003088 <HAL_TIM_ConfigClockSource+0xe0>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d041      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003024:	e06a      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d066      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x152>
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	d017      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003032:	e063      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f000 f965 	bl	8003312 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003056:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]
      break;
 8003060:	e04c      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f000 f94e 	bl	8003312 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003084:	609a      	str	r2, [r3, #8]
      break;
 8003086:	e039      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	461a      	mov	r2, r3
 8003096:	f000 f8c5 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2150      	movs	r1, #80	; 0x50
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f91c 	bl	80032de <TIM_ITRx_SetConfig>
      break;
 80030a6:	e029      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f000 f8e3 	bl	8003280 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2160      	movs	r1, #96	; 0x60
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f90c 	bl	80032de <TIM_ITRx_SetConfig>
      break;
 80030c6:	e019      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 f8a5 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2140      	movs	r1, #64	; 0x40
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f8fc 	bl	80032de <TIM_ITRx_SetConfig>
      break;
 80030e6:	e009      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f000 f8f3 	bl	80032de <TIM_ITRx_SetConfig>
        break;
 80030f8:	e000      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80030fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
	...

08003160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d007      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a26      	ldr	r2, [pc, #152]	; (800321c <TIM_Base_SetConfig+0xbc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a25      	ldr	r2, [pc, #148]	; (8003220 <TIM_Base_SetConfig+0xc0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d108      	bne.n	80031a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d007      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a19      	ldr	r2, [pc, #100]	; (800321c <TIM_Base_SetConfig+0xbc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <TIM_Base_SetConfig+0xc0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d103      	bne.n	8003208 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	615a      	str	r2, [r3, #20]
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40012c00 	.word	0x40012c00
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800

08003224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 030a 	bic.w	r3, r3, #10
 8003260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 0210 	bic.w	r2, r3, #16
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	031b      	lsls	r3, r3, #12
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	621a      	str	r2, [r3, #32]
}
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f043 0307 	orr.w	r3, r3, #7
 8003300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	609a      	str	r2, [r3, #8]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	021a      	lsls	r2, r3, #8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	431a      	orrs	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4313      	orrs	r3, r2
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	609a      	str	r2, [r3, #8]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e046      	b.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a16      	ldr	r2, [pc, #88]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00e      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d009      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a10      	ldr	r2, [pc, #64]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10c      	bne.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800

0800340c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e03f      	b.n	80034c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd ff28 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f905 	bl	8003684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b08a      	sub	sp, #40	; 0x28
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d17c      	bne.n	80035e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_UART_Transmit+0x2c>
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e075      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_UART_Transmit+0x3e>
 8003504:	2302      	movs	r3, #2
 8003506:	e06e      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2221      	movs	r2, #33	; 0x21
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351e:	f7fe f859 	bl	80015d4 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d108      	bne.n	800354c <HAL_UART_Transmit+0x82>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e003      	b.n	8003554 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800355c:	e02a      	b.n	80035b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f840 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e036      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	3302      	adds	r3, #2
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e007      	b.n	80035a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1cf      	bne.n	800355e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f810 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e006      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	e02c      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d028      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0x30>
 800360e:	f7fd ffe1 	bl	80015d4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d21d      	bcs.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800362c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00f      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d0c3      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036be:	f023 030c 	bic.w	r3, r3, #12
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <UART_SetConfig+0x114>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d103      	bne.n	80036f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7ff fa80 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	e002      	b.n	80036fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7ff fa68 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80036f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <UART_SetConfig+0x118>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	0119      	lsls	r1, r3, #4
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <UART_SetConfig+0x118>)
 8003732:	fba3 0302 	umull	r0, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2064      	movs	r0, #100	; 0x64
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	3332      	adds	r3, #50	; 0x32
 8003744:	4a15      	ldr	r2, [pc, #84]	; (800379c <UART_SetConfig+0x118>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003750:	4419      	add	r1, r3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb2 f2f3 	udiv	r2, r2, r3
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <UART_SetConfig+0x118>)
 800376a:	fba3 0302 	umull	r0, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2064      	movs	r0, #100	; 0x64
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <UART_SetConfig+0x118>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 020f 	and.w	r2, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	440a      	add	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40013800 	.word	0x40013800
 800379c:	51eb851f 	.word	0x51eb851f

080037a0 <__errno>:
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <__errno+0x8>)
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000024 	.word	0x20000024

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	2500      	movs	r5, #0
 80037b0:	4e0c      	ldr	r6, [pc, #48]	; (80037e4 <__libc_init_array+0x38>)
 80037b2:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b4:	1ba4      	subs	r4, r4, r6
 80037b6:	10a4      	asrs	r4, r4, #2
 80037b8:	42a5      	cmp	r5, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	f000 ff74 	bl	80046a8 <_init>
 80037c0:	2500      	movs	r5, #0
 80037c2:	4e0a      	ldr	r6, [pc, #40]	; (80037ec <__libc_init_array+0x40>)
 80037c4:	4c0a      	ldr	r4, [pc, #40]	; (80037f0 <__libc_init_array+0x44>)
 80037c6:	1ba4      	subs	r4, r4, r6
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	42a5      	cmp	r5, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037d4:	4798      	blx	r3
 80037d6:	3501      	adds	r5, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037de:	4798      	blx	r3
 80037e0:	3501      	adds	r5, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	08004824 	.word	0x08004824
 80037e8:	08004824 	.word	0x08004824
 80037ec:	08004824 	.word	0x08004824
 80037f0:	08004828 	.word	0x08004828

080037f4 <memset>:
 80037f4:	4603      	mov	r3, r0
 80037f6:	4402      	add	r2, r0
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d100      	bne.n	80037fe <memset+0xa>
 80037fc:	4770      	bx	lr
 80037fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003802:	e7f9      	b.n	80037f8 <memset+0x4>

08003804 <iprintf>:
 8003804:	b40f      	push	{r0, r1, r2, r3}
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <iprintf+0x2c>)
 8003808:	b513      	push	{r0, r1, r4, lr}
 800380a:	681c      	ldr	r4, [r3, #0]
 800380c:	b124      	cbz	r4, 8003818 <iprintf+0x14>
 800380e:	69a3      	ldr	r3, [r4, #24]
 8003810:	b913      	cbnz	r3, 8003818 <iprintf+0x14>
 8003812:	4620      	mov	r0, r4
 8003814:	f000 fa22 	bl	8003c5c <__sinit>
 8003818:	ab05      	add	r3, sp, #20
 800381a:	9a04      	ldr	r2, [sp, #16]
 800381c:	68a1      	ldr	r1, [r4, #8]
 800381e:	4620      	mov	r0, r4
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	f000 fbd7 	bl	8003fd4 <_vfiprintf_r>
 8003826:	b002      	add	sp, #8
 8003828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800382c:	b004      	add	sp, #16
 800382e:	4770      	bx	lr
 8003830:	20000024 	.word	0x20000024

08003834 <_puts_r>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	460e      	mov	r6, r1
 8003838:	4605      	mov	r5, r0
 800383a:	b118      	cbz	r0, 8003844 <_puts_r+0x10>
 800383c:	6983      	ldr	r3, [r0, #24]
 800383e:	b90b      	cbnz	r3, 8003844 <_puts_r+0x10>
 8003840:	f000 fa0c 	bl	8003c5c <__sinit>
 8003844:	69ab      	ldr	r3, [r5, #24]
 8003846:	68ac      	ldr	r4, [r5, #8]
 8003848:	b913      	cbnz	r3, 8003850 <_puts_r+0x1c>
 800384a:	4628      	mov	r0, r5
 800384c:	f000 fa06 	bl	8003c5c <__sinit>
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <_puts_r+0xac>)
 8003852:	429c      	cmp	r4, r3
 8003854:	d117      	bne.n	8003886 <_puts_r+0x52>
 8003856:	686c      	ldr	r4, [r5, #4]
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	071b      	lsls	r3, r3, #28
 800385c:	d51d      	bpl.n	800389a <_puts_r+0x66>
 800385e:	6923      	ldr	r3, [r4, #16]
 8003860:	b1db      	cbz	r3, 800389a <_puts_r+0x66>
 8003862:	3e01      	subs	r6, #1
 8003864:	68a3      	ldr	r3, [r4, #8]
 8003866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800386a:	3b01      	subs	r3, #1
 800386c:	60a3      	str	r3, [r4, #8]
 800386e:	b9e9      	cbnz	r1, 80038ac <_puts_r+0x78>
 8003870:	2b00      	cmp	r3, #0
 8003872:	da2e      	bge.n	80038d2 <_puts_r+0x9e>
 8003874:	4622      	mov	r2, r4
 8003876:	210a      	movs	r1, #10
 8003878:	4628      	mov	r0, r5
 800387a:	f000 f83f 	bl	80038fc <__swbuf_r>
 800387e:	3001      	adds	r0, #1
 8003880:	d011      	beq.n	80038a6 <_puts_r+0x72>
 8003882:	200a      	movs	r0, #10
 8003884:	e011      	b.n	80038aa <_puts_r+0x76>
 8003886:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <_puts_r+0xb0>)
 8003888:	429c      	cmp	r4, r3
 800388a:	d101      	bne.n	8003890 <_puts_r+0x5c>
 800388c:	68ac      	ldr	r4, [r5, #8]
 800388e:	e7e3      	b.n	8003858 <_puts_r+0x24>
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <_puts_r+0xb4>)
 8003892:	429c      	cmp	r4, r3
 8003894:	bf08      	it	eq
 8003896:	68ec      	ldreq	r4, [r5, #12]
 8003898:	e7de      	b.n	8003858 <_puts_r+0x24>
 800389a:	4621      	mov	r1, r4
 800389c:	4628      	mov	r0, r5
 800389e:	f000 f87f 	bl	80039a0 <__swsetup_r>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d0dd      	beq.n	8003862 <_puts_r+0x2e>
 80038a6:	f04f 30ff 	mov.w	r0, #4294967295
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da04      	bge.n	80038ba <_puts_r+0x86>
 80038b0:	69a2      	ldr	r2, [r4, #24]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	dc06      	bgt.n	80038c4 <_puts_r+0x90>
 80038b6:	290a      	cmp	r1, #10
 80038b8:	d004      	beq.n	80038c4 <_puts_r+0x90>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	6022      	str	r2, [r4, #0]
 80038c0:	7019      	strb	r1, [r3, #0]
 80038c2:	e7cf      	b.n	8003864 <_puts_r+0x30>
 80038c4:	4622      	mov	r2, r4
 80038c6:	4628      	mov	r0, r5
 80038c8:	f000 f818 	bl	80038fc <__swbuf_r>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d1c9      	bne.n	8003864 <_puts_r+0x30>
 80038d0:	e7e9      	b.n	80038a6 <_puts_r+0x72>
 80038d2:	200a      	movs	r0, #10
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	6022      	str	r2, [r4, #0]
 80038da:	7018      	strb	r0, [r3, #0]
 80038dc:	e7e5      	b.n	80038aa <_puts_r+0x76>
 80038de:	bf00      	nop
 80038e0:	080047b0 	.word	0x080047b0
 80038e4:	080047d0 	.word	0x080047d0
 80038e8:	08004790 	.word	0x08004790

080038ec <puts>:
 80038ec:	4b02      	ldr	r3, [pc, #8]	; (80038f8 <puts+0xc>)
 80038ee:	4601      	mov	r1, r0
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f7ff bf9f 	b.w	8003834 <_puts_r>
 80038f6:	bf00      	nop
 80038f8:	20000024 	.word	0x20000024

080038fc <__swbuf_r>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	460e      	mov	r6, r1
 8003900:	4614      	mov	r4, r2
 8003902:	4605      	mov	r5, r0
 8003904:	b118      	cbz	r0, 800390e <__swbuf_r+0x12>
 8003906:	6983      	ldr	r3, [r0, #24]
 8003908:	b90b      	cbnz	r3, 800390e <__swbuf_r+0x12>
 800390a:	f000 f9a7 	bl	8003c5c <__sinit>
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <__swbuf_r+0x98>)
 8003910:	429c      	cmp	r4, r3
 8003912:	d12a      	bne.n	800396a <__swbuf_r+0x6e>
 8003914:	686c      	ldr	r4, [r5, #4]
 8003916:	69a3      	ldr	r3, [r4, #24]
 8003918:	60a3      	str	r3, [r4, #8]
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	071a      	lsls	r2, r3, #28
 800391e:	d52e      	bpl.n	800397e <__swbuf_r+0x82>
 8003920:	6923      	ldr	r3, [r4, #16]
 8003922:	b363      	cbz	r3, 800397e <__swbuf_r+0x82>
 8003924:	6923      	ldr	r3, [r4, #16]
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	b2f6      	uxtb	r6, r6
 800392a:	1ac0      	subs	r0, r0, r3
 800392c:	6963      	ldr	r3, [r4, #20]
 800392e:	4637      	mov	r7, r6
 8003930:	4283      	cmp	r3, r0
 8003932:	dc04      	bgt.n	800393e <__swbuf_r+0x42>
 8003934:	4621      	mov	r1, r4
 8003936:	4628      	mov	r0, r5
 8003938:	f000 f926 	bl	8003b88 <_fflush_r>
 800393c:	bb28      	cbnz	r0, 800398a <__swbuf_r+0x8e>
 800393e:	68a3      	ldr	r3, [r4, #8]
 8003940:	3001      	adds	r0, #1
 8003942:	3b01      	subs	r3, #1
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	6022      	str	r2, [r4, #0]
 800394c:	701e      	strb	r6, [r3, #0]
 800394e:	6963      	ldr	r3, [r4, #20]
 8003950:	4283      	cmp	r3, r0
 8003952:	d004      	beq.n	800395e <__swbuf_r+0x62>
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	07db      	lsls	r3, r3, #31
 8003958:	d519      	bpl.n	800398e <__swbuf_r+0x92>
 800395a:	2e0a      	cmp	r6, #10
 800395c:	d117      	bne.n	800398e <__swbuf_r+0x92>
 800395e:	4621      	mov	r1, r4
 8003960:	4628      	mov	r0, r5
 8003962:	f000 f911 	bl	8003b88 <_fflush_r>
 8003966:	b190      	cbz	r0, 800398e <__swbuf_r+0x92>
 8003968:	e00f      	b.n	800398a <__swbuf_r+0x8e>
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <__swbuf_r+0x9c>)
 800396c:	429c      	cmp	r4, r3
 800396e:	d101      	bne.n	8003974 <__swbuf_r+0x78>
 8003970:	68ac      	ldr	r4, [r5, #8]
 8003972:	e7d0      	b.n	8003916 <__swbuf_r+0x1a>
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <__swbuf_r+0xa0>)
 8003976:	429c      	cmp	r4, r3
 8003978:	bf08      	it	eq
 800397a:	68ec      	ldreq	r4, [r5, #12]
 800397c:	e7cb      	b.n	8003916 <__swbuf_r+0x1a>
 800397e:	4621      	mov	r1, r4
 8003980:	4628      	mov	r0, r5
 8003982:	f000 f80d 	bl	80039a0 <__swsetup_r>
 8003986:	2800      	cmp	r0, #0
 8003988:	d0cc      	beq.n	8003924 <__swbuf_r+0x28>
 800398a:	f04f 37ff 	mov.w	r7, #4294967295
 800398e:	4638      	mov	r0, r7
 8003990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003992:	bf00      	nop
 8003994:	080047b0 	.word	0x080047b0
 8003998:	080047d0 	.word	0x080047d0
 800399c:	08004790 	.word	0x08004790

080039a0 <__swsetup_r>:
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <__swsetup_r+0xcc>)
 80039a2:	b570      	push	{r4, r5, r6, lr}
 80039a4:	681d      	ldr	r5, [r3, #0]
 80039a6:	4606      	mov	r6, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	b125      	cbz	r5, 80039b6 <__swsetup_r+0x16>
 80039ac:	69ab      	ldr	r3, [r5, #24]
 80039ae:	b913      	cbnz	r3, 80039b6 <__swsetup_r+0x16>
 80039b0:	4628      	mov	r0, r5
 80039b2:	f000 f953 	bl	8003c5c <__sinit>
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <__swsetup_r+0xd0>)
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d10f      	bne.n	80039dc <__swsetup_r+0x3c>
 80039bc:	686c      	ldr	r4, [r5, #4]
 80039be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	0715      	lsls	r5, r2, #28
 80039c6:	d42c      	bmi.n	8003a22 <__swsetup_r+0x82>
 80039c8:	06d0      	lsls	r0, r2, #27
 80039ca:	d411      	bmi.n	80039f0 <__swsetup_r+0x50>
 80039cc:	2209      	movs	r2, #9
 80039ce:	6032      	str	r2, [r6, #0]
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295
 80039da:	e03e      	b.n	8003a5a <__swsetup_r+0xba>
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <__swsetup_r+0xd4>)
 80039de:	429c      	cmp	r4, r3
 80039e0:	d101      	bne.n	80039e6 <__swsetup_r+0x46>
 80039e2:	68ac      	ldr	r4, [r5, #8]
 80039e4:	e7eb      	b.n	80039be <__swsetup_r+0x1e>
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <__swsetup_r+0xd8>)
 80039e8:	429c      	cmp	r4, r3
 80039ea:	bf08      	it	eq
 80039ec:	68ec      	ldreq	r4, [r5, #12]
 80039ee:	e7e6      	b.n	80039be <__swsetup_r+0x1e>
 80039f0:	0751      	lsls	r1, r2, #29
 80039f2:	d512      	bpl.n	8003a1a <__swsetup_r+0x7a>
 80039f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039f6:	b141      	cbz	r1, 8003a0a <__swsetup_r+0x6a>
 80039f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039fc:	4299      	cmp	r1, r3
 80039fe:	d002      	beq.n	8003a06 <__swsetup_r+0x66>
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 fa19 	bl	8003e38 <_free_r>
 8003a06:	2300      	movs	r3, #0
 8003a08:	6363      	str	r3, [r4, #52]	; 0x34
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	2300      	movs	r3, #0
 8003a14:	6063      	str	r3, [r4, #4]
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	b94b      	cbnz	r3, 8003a3a <__swsetup_r+0x9a>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a30:	d003      	beq.n	8003a3a <__swsetup_r+0x9a>
 8003a32:	4621      	mov	r1, r4
 8003a34:	4630      	mov	r0, r6
 8003a36:	f000 f9bf 	bl	8003db8 <__smakebuf_r>
 8003a3a:	89a2      	ldrh	r2, [r4, #12]
 8003a3c:	f012 0301 	ands.w	r3, r2, #1
 8003a40:	d00c      	beq.n	8003a5c <__swsetup_r+0xbc>
 8003a42:	2300      	movs	r3, #0
 8003a44:	60a3      	str	r3, [r4, #8]
 8003a46:	6963      	ldr	r3, [r4, #20]
 8003a48:	425b      	negs	r3, r3
 8003a4a:	61a3      	str	r3, [r4, #24]
 8003a4c:	6923      	ldr	r3, [r4, #16]
 8003a4e:	b953      	cbnz	r3, 8003a66 <__swsetup_r+0xc6>
 8003a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a58:	d1ba      	bne.n	80039d0 <__swsetup_r+0x30>
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
 8003a5c:	0792      	lsls	r2, r2, #30
 8003a5e:	bf58      	it	pl
 8003a60:	6963      	ldrpl	r3, [r4, #20]
 8003a62:	60a3      	str	r3, [r4, #8]
 8003a64:	e7f2      	b.n	8003a4c <__swsetup_r+0xac>
 8003a66:	2000      	movs	r0, #0
 8003a68:	e7f7      	b.n	8003a5a <__swsetup_r+0xba>
 8003a6a:	bf00      	nop
 8003a6c:	20000024 	.word	0x20000024
 8003a70:	080047b0 	.word	0x080047b0
 8003a74:	080047d0 	.word	0x080047d0
 8003a78:	08004790 	.word	0x08004790

08003a7c <__sflush_r>:
 8003a7c:	898a      	ldrh	r2, [r1, #12]
 8003a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a82:	4605      	mov	r5, r0
 8003a84:	0710      	lsls	r0, r2, #28
 8003a86:	460c      	mov	r4, r1
 8003a88:	d458      	bmi.n	8003b3c <__sflush_r+0xc0>
 8003a8a:	684b      	ldr	r3, [r1, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	dc05      	bgt.n	8003a9c <__sflush_r+0x20>
 8003a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	dc02      	bgt.n	8003a9c <__sflush_r+0x20>
 8003a96:	2000      	movs	r0, #0
 8003a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a9e:	2e00      	cmp	r6, #0
 8003aa0:	d0f9      	beq.n	8003a96 <__sflush_r+0x1a>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003aa8:	682f      	ldr	r7, [r5, #0]
 8003aaa:	6a21      	ldr	r1, [r4, #32]
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	d032      	beq.n	8003b16 <__sflush_r+0x9a>
 8003ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ab2:	89a3      	ldrh	r3, [r4, #12]
 8003ab4:	075a      	lsls	r2, r3, #29
 8003ab6:	d505      	bpl.n	8003ac4 <__sflush_r+0x48>
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	1ac0      	subs	r0, r0, r3
 8003abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003abe:	b10b      	cbz	r3, 8003ac4 <__sflush_r+0x48>
 8003ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ac2:	1ac0      	subs	r0, r0, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aca:	6a21      	ldr	r1, [r4, #32]
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b0      	blx	r6
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	d106      	bne.n	8003ae4 <__sflush_r+0x68>
 8003ad6:	6829      	ldr	r1, [r5, #0]
 8003ad8:	291d      	cmp	r1, #29
 8003ada:	d848      	bhi.n	8003b6e <__sflush_r+0xf2>
 8003adc:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <__sflush_r+0x108>)
 8003ade:	40ca      	lsrs	r2, r1
 8003ae0:	07d6      	lsls	r6, r2, #31
 8003ae2:	d544      	bpl.n	8003b6e <__sflush_r+0xf2>
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	6062      	str	r2, [r4, #4]
 8003ae8:	6922      	ldr	r2, [r4, #16]
 8003aea:	04d9      	lsls	r1, r3, #19
 8003aec:	6022      	str	r2, [r4, #0]
 8003aee:	d504      	bpl.n	8003afa <__sflush_r+0x7e>
 8003af0:	1c42      	adds	r2, r0, #1
 8003af2:	d101      	bne.n	8003af8 <__sflush_r+0x7c>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b903      	cbnz	r3, 8003afa <__sflush_r+0x7e>
 8003af8:	6560      	str	r0, [r4, #84]	; 0x54
 8003afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003afc:	602f      	str	r7, [r5, #0]
 8003afe:	2900      	cmp	r1, #0
 8003b00:	d0c9      	beq.n	8003a96 <__sflush_r+0x1a>
 8003b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b06:	4299      	cmp	r1, r3
 8003b08:	d002      	beq.n	8003b10 <__sflush_r+0x94>
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 f994 	bl	8003e38 <_free_r>
 8003b10:	2000      	movs	r0, #0
 8003b12:	6360      	str	r0, [r4, #52]	; 0x34
 8003b14:	e7c0      	b.n	8003a98 <__sflush_r+0x1c>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4628      	mov	r0, r5
 8003b1a:	47b0      	blx	r6
 8003b1c:	1c41      	adds	r1, r0, #1
 8003b1e:	d1c8      	bne.n	8003ab2 <__sflush_r+0x36>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0c5      	beq.n	8003ab2 <__sflush_r+0x36>
 8003b26:	2b1d      	cmp	r3, #29
 8003b28:	d001      	beq.n	8003b2e <__sflush_r+0xb2>
 8003b2a:	2b16      	cmp	r3, #22
 8003b2c:	d101      	bne.n	8003b32 <__sflush_r+0xb6>
 8003b2e:	602f      	str	r7, [r5, #0]
 8003b30:	e7b1      	b.n	8003a96 <__sflush_r+0x1a>
 8003b32:	89a3      	ldrh	r3, [r4, #12]
 8003b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b38:	81a3      	strh	r3, [r4, #12]
 8003b3a:	e7ad      	b.n	8003a98 <__sflush_r+0x1c>
 8003b3c:	690f      	ldr	r7, [r1, #16]
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	d0a9      	beq.n	8003a96 <__sflush_r+0x1a>
 8003b42:	0793      	lsls	r3, r2, #30
 8003b44:	bf18      	it	ne
 8003b46:	2300      	movne	r3, #0
 8003b48:	680e      	ldr	r6, [r1, #0]
 8003b4a:	bf08      	it	eq
 8003b4c:	694b      	ldreq	r3, [r1, #20]
 8003b4e:	eba6 0807 	sub.w	r8, r6, r7
 8003b52:	600f      	str	r7, [r1, #0]
 8003b54:	608b      	str	r3, [r1, #8]
 8003b56:	f1b8 0f00 	cmp.w	r8, #0
 8003b5a:	dd9c      	ble.n	8003a96 <__sflush_r+0x1a>
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	463a      	mov	r2, r7
 8003b60:	6a21      	ldr	r1, [r4, #32]
 8003b62:	4628      	mov	r0, r5
 8003b64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b66:	47b0      	blx	r6
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	dc06      	bgt.n	8003b7a <__sflush_r+0xfe>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b72:	81a3      	strh	r3, [r4, #12]
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	e78e      	b.n	8003a98 <__sflush_r+0x1c>
 8003b7a:	4407      	add	r7, r0
 8003b7c:	eba8 0800 	sub.w	r8, r8, r0
 8003b80:	e7e9      	b.n	8003b56 <__sflush_r+0xda>
 8003b82:	bf00      	nop
 8003b84:	20400001 	.word	0x20400001

08003b88 <_fflush_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	690b      	ldr	r3, [r1, #16]
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	b1db      	cbz	r3, 8003bca <_fflush_r+0x42>
 8003b92:	b118      	cbz	r0, 8003b9c <_fflush_r+0x14>
 8003b94:	6983      	ldr	r3, [r0, #24]
 8003b96:	b90b      	cbnz	r3, 8003b9c <_fflush_r+0x14>
 8003b98:	f000 f860 	bl	8003c5c <__sinit>
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <_fflush_r+0x48>)
 8003b9e:	429c      	cmp	r4, r3
 8003ba0:	d109      	bne.n	8003bb6 <_fflush_r+0x2e>
 8003ba2:	686c      	ldr	r4, [r5, #4]
 8003ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba8:	b17b      	cbz	r3, 8003bca <_fflush_r+0x42>
 8003baa:	4621      	mov	r1, r4
 8003bac:	4628      	mov	r0, r5
 8003bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb2:	f7ff bf63 	b.w	8003a7c <__sflush_r>
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <_fflush_r+0x4c>)
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	d101      	bne.n	8003bc0 <_fflush_r+0x38>
 8003bbc:	68ac      	ldr	r4, [r5, #8]
 8003bbe:	e7f1      	b.n	8003ba4 <_fflush_r+0x1c>
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <_fflush_r+0x50>)
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	bf08      	it	eq
 8003bc6:	68ec      	ldreq	r4, [r5, #12]
 8003bc8:	e7ec      	b.n	8003ba4 <_fflush_r+0x1c>
 8003bca:	2000      	movs	r0, #0
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	080047b0 	.word	0x080047b0
 8003bd4:	080047d0 	.word	0x080047d0
 8003bd8:	08004790 	.word	0x08004790

08003bdc <std>:
 8003bdc:	2300      	movs	r3, #0
 8003bde:	b510      	push	{r4, lr}
 8003be0:	4604      	mov	r4, r0
 8003be2:	e9c0 3300 	strd	r3, r3, [r0]
 8003be6:	6083      	str	r3, [r0, #8]
 8003be8:	8181      	strh	r1, [r0, #12]
 8003bea:	6643      	str	r3, [r0, #100]	; 0x64
 8003bec:	81c2      	strh	r2, [r0, #14]
 8003bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bf2:	6183      	str	r3, [r0, #24]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	305c      	adds	r0, #92	; 0x5c
 8003bfa:	f7ff fdfb 	bl	80037f4 <memset>
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <std+0x38>)
 8003c00:	6224      	str	r4, [r4, #32]
 8003c02:	6263      	str	r3, [r4, #36]	; 0x24
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <std+0x3c>)
 8003c06:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <std+0x40>)
 8003c0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <std+0x44>)
 8003c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	bf00      	nop
 8003c14:	08004531 	.word	0x08004531
 8003c18:	08004553 	.word	0x08004553
 8003c1c:	0800458b 	.word	0x0800458b
 8003c20:	080045af 	.word	0x080045af

08003c24 <_cleanup_r>:
 8003c24:	4901      	ldr	r1, [pc, #4]	; (8003c2c <_cleanup_r+0x8>)
 8003c26:	f000 b885 	b.w	8003d34 <_fwalk_reent>
 8003c2a:	bf00      	nop
 8003c2c:	08003b89 	.word	0x08003b89

08003c30 <__sfmoreglue>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	2568      	movs	r5, #104	; 0x68
 8003c34:	1e4a      	subs	r2, r1, #1
 8003c36:	4355      	muls	r5, r2
 8003c38:	460e      	mov	r6, r1
 8003c3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c3e:	f000 f947 	bl	8003ed0 <_malloc_r>
 8003c42:	4604      	mov	r4, r0
 8003c44:	b140      	cbz	r0, 8003c58 <__sfmoreglue+0x28>
 8003c46:	2100      	movs	r1, #0
 8003c48:	e9c0 1600 	strd	r1, r6, [r0]
 8003c4c:	300c      	adds	r0, #12
 8003c4e:	60a0      	str	r0, [r4, #8]
 8003c50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c54:	f7ff fdce 	bl	80037f4 <memset>
 8003c58:	4620      	mov	r0, r4
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}

08003c5c <__sinit>:
 8003c5c:	6983      	ldr	r3, [r0, #24]
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	4604      	mov	r4, r0
 8003c62:	bb33      	cbnz	r3, 8003cb2 <__sinit+0x56>
 8003c64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003c68:	6503      	str	r3, [r0, #80]	; 0x50
 8003c6a:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <__sinit+0x58>)
 8003c6c:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <__sinit+0x5c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6282      	str	r2, [r0, #40]	; 0x28
 8003c72:	4298      	cmp	r0, r3
 8003c74:	bf04      	itt	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	6183      	streq	r3, [r0, #24]
 8003c7a:	f000 f81f 	bl	8003cbc <__sfp>
 8003c7e:	6060      	str	r0, [r4, #4]
 8003c80:	4620      	mov	r0, r4
 8003c82:	f000 f81b 	bl	8003cbc <__sfp>
 8003c86:	60a0      	str	r0, [r4, #8]
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f000 f817 	bl	8003cbc <__sfp>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60e0      	str	r0, [r4, #12]
 8003c92:	2104      	movs	r1, #4
 8003c94:	6860      	ldr	r0, [r4, #4]
 8003c96:	f7ff ffa1 	bl	8003bdc <std>
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	2109      	movs	r1, #9
 8003c9e:	68a0      	ldr	r0, [r4, #8]
 8003ca0:	f7ff ff9c 	bl	8003bdc <std>
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	2112      	movs	r1, #18
 8003ca8:	68e0      	ldr	r0, [r4, #12]
 8003caa:	f7ff ff97 	bl	8003bdc <std>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61a3      	str	r3, [r4, #24]
 8003cb2:	bd10      	pop	{r4, pc}
 8003cb4:	0800478c 	.word	0x0800478c
 8003cb8:	08003c25 	.word	0x08003c25

08003cbc <__sfp>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <__sfp+0x70>)
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	681e      	ldr	r6, [r3, #0]
 8003cc4:	69b3      	ldr	r3, [r6, #24]
 8003cc6:	b913      	cbnz	r3, 8003cce <__sfp+0x12>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f7ff ffc7 	bl	8003c5c <__sinit>
 8003cce:	3648      	adds	r6, #72	; 0x48
 8003cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	d503      	bpl.n	8003ce0 <__sfp+0x24>
 8003cd8:	6833      	ldr	r3, [r6, #0]
 8003cda:	b133      	cbz	r3, 8003cea <__sfp+0x2e>
 8003cdc:	6836      	ldr	r6, [r6, #0]
 8003cde:	e7f7      	b.n	8003cd0 <__sfp+0x14>
 8003ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ce4:	b16d      	cbz	r5, 8003d02 <__sfp+0x46>
 8003ce6:	3468      	adds	r4, #104	; 0x68
 8003ce8:	e7f4      	b.n	8003cd4 <__sfp+0x18>
 8003cea:	2104      	movs	r1, #4
 8003cec:	4638      	mov	r0, r7
 8003cee:	f7ff ff9f 	bl	8003c30 <__sfmoreglue>
 8003cf2:	6030      	str	r0, [r6, #0]
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d1f1      	bne.n	8003cdc <__sfp+0x20>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	4620      	mov	r0, r4
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <__sfp+0x74>)
 8003d04:	6665      	str	r5, [r4, #100]	; 0x64
 8003d06:	e9c4 5500 	strd	r5, r5, [r4]
 8003d0a:	60a5      	str	r5, [r4, #8]
 8003d0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003d10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4629      	mov	r1, r5
 8003d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d1c:	f7ff fd6a 	bl	80037f4 <memset>
 8003d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d28:	e7e9      	b.n	8003cfe <__sfp+0x42>
 8003d2a:	bf00      	nop
 8003d2c:	0800478c 	.word	0x0800478c
 8003d30:	ffff0001 	.word	0xffff0001

08003d34 <_fwalk_reent>:
 8003d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d38:	4680      	mov	r8, r0
 8003d3a:	4689      	mov	r9, r1
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d42:	b914      	cbnz	r4, 8003d4a <_fwalk_reent+0x16>
 8003d44:	4630      	mov	r0, r6
 8003d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003d4e:	3f01      	subs	r7, #1
 8003d50:	d501      	bpl.n	8003d56 <_fwalk_reent+0x22>
 8003d52:	6824      	ldr	r4, [r4, #0]
 8003d54:	e7f5      	b.n	8003d42 <_fwalk_reent+0xe>
 8003d56:	89ab      	ldrh	r3, [r5, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d907      	bls.n	8003d6c <_fwalk_reent+0x38>
 8003d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d60:	3301      	adds	r3, #1
 8003d62:	d003      	beq.n	8003d6c <_fwalk_reent+0x38>
 8003d64:	4629      	mov	r1, r5
 8003d66:	4640      	mov	r0, r8
 8003d68:	47c8      	blx	r9
 8003d6a:	4306      	orrs	r6, r0
 8003d6c:	3568      	adds	r5, #104	; 0x68
 8003d6e:	e7ee      	b.n	8003d4e <_fwalk_reent+0x1a>

08003d70 <__swhatbuf_r>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	460e      	mov	r6, r1
 8003d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d78:	b096      	sub	sp, #88	; 0x58
 8003d7a:	2900      	cmp	r1, #0
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	461d      	mov	r5, r3
 8003d80:	da07      	bge.n	8003d92 <__swhatbuf_r+0x22>
 8003d82:	2300      	movs	r3, #0
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	89b3      	ldrh	r3, [r6, #12]
 8003d88:	061a      	lsls	r2, r3, #24
 8003d8a:	d410      	bmi.n	8003dae <__swhatbuf_r+0x3e>
 8003d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d90:	e00e      	b.n	8003db0 <__swhatbuf_r+0x40>
 8003d92:	466a      	mov	r2, sp
 8003d94:	f000 fc32 	bl	80045fc <_fstat_r>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	dbf2      	blt.n	8003d82 <__swhatbuf_r+0x12>
 8003d9c:	9a01      	ldr	r2, [sp, #4]
 8003d9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003da2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003da6:	425a      	negs	r2, r3
 8003da8:	415a      	adcs	r2, r3
 8003daa:	602a      	str	r2, [r5, #0]
 8003dac:	e7ee      	b.n	8003d8c <__swhatbuf_r+0x1c>
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	2000      	movs	r0, #0
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	b016      	add	sp, #88	; 0x58
 8003db6:	bd70      	pop	{r4, r5, r6, pc}

08003db8 <__smakebuf_r>:
 8003db8:	898b      	ldrh	r3, [r1, #12]
 8003dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003dbc:	079d      	lsls	r5, r3, #30
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	d507      	bpl.n	8003dd4 <__smakebuf_r+0x1c>
 8003dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	2301      	movs	r3, #1
 8003dce:	6163      	str	r3, [r4, #20]
 8003dd0:	b002      	add	sp, #8
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	ab01      	add	r3, sp, #4
 8003dd6:	466a      	mov	r2, sp
 8003dd8:	f7ff ffca 	bl	8003d70 <__swhatbuf_r>
 8003ddc:	9900      	ldr	r1, [sp, #0]
 8003dde:	4605      	mov	r5, r0
 8003de0:	4630      	mov	r0, r6
 8003de2:	f000 f875 	bl	8003ed0 <_malloc_r>
 8003de6:	b948      	cbnz	r0, 8003dfc <__smakebuf_r+0x44>
 8003de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dec:	059a      	lsls	r2, r3, #22
 8003dee:	d4ef      	bmi.n	8003dd0 <__smakebuf_r+0x18>
 8003df0:	f023 0303 	bic.w	r3, r3, #3
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	e7e3      	b.n	8003dc4 <__smakebuf_r+0xc>
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <__smakebuf_r+0x7c>)
 8003dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	6020      	str	r0, [r4, #0]
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	9b00      	ldr	r3, [sp, #0]
 8003e0c:	6120      	str	r0, [r4, #16]
 8003e0e:	6163      	str	r3, [r4, #20]
 8003e10:	9b01      	ldr	r3, [sp, #4]
 8003e12:	b15b      	cbz	r3, 8003e2c <__smakebuf_r+0x74>
 8003e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f000 fc01 	bl	8004620 <_isatty_r>
 8003e1e:	b128      	cbz	r0, 8003e2c <__smakebuf_r+0x74>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	431d      	orrs	r5, r3
 8003e30:	81a5      	strh	r5, [r4, #12]
 8003e32:	e7cd      	b.n	8003dd0 <__smakebuf_r+0x18>
 8003e34:	08003c25 	.word	0x08003c25

08003e38 <_free_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	2900      	cmp	r1, #0
 8003e3e:	d043      	beq.n	8003ec8 <_free_r+0x90>
 8003e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e44:	1f0c      	subs	r4, r1, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bfb8      	it	lt
 8003e4a:	18e4      	addlt	r4, r4, r3
 8003e4c:	f000 fc18 	bl	8004680 <__malloc_lock>
 8003e50:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <_free_r+0x94>)
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	4610      	mov	r0, r2
 8003e56:	b933      	cbnz	r3, 8003e66 <_free_r+0x2e>
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	6014      	str	r4, [r2, #0]
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e62:	f000 bc0e 	b.w	8004682 <__malloc_unlock>
 8003e66:	42a3      	cmp	r3, r4
 8003e68:	d90b      	bls.n	8003e82 <_free_r+0x4a>
 8003e6a:	6821      	ldr	r1, [r4, #0]
 8003e6c:	1862      	adds	r2, r4, r1
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	bf01      	itttt	eq
 8003e72:	681a      	ldreq	r2, [r3, #0]
 8003e74:	685b      	ldreq	r3, [r3, #4]
 8003e76:	1852      	addeq	r2, r2, r1
 8003e78:	6022      	streq	r2, [r4, #0]
 8003e7a:	6063      	str	r3, [r4, #4]
 8003e7c:	6004      	str	r4, [r0, #0]
 8003e7e:	e7ed      	b.n	8003e5c <_free_r+0x24>
 8003e80:	4613      	mov	r3, r2
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	b10a      	cbz	r2, 8003e8a <_free_r+0x52>
 8003e86:	42a2      	cmp	r2, r4
 8003e88:	d9fa      	bls.n	8003e80 <_free_r+0x48>
 8003e8a:	6819      	ldr	r1, [r3, #0]
 8003e8c:	1858      	adds	r0, r3, r1
 8003e8e:	42a0      	cmp	r0, r4
 8003e90:	d10b      	bne.n	8003eaa <_free_r+0x72>
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	4401      	add	r1, r0
 8003e96:	1858      	adds	r0, r3, r1
 8003e98:	4282      	cmp	r2, r0
 8003e9a:	6019      	str	r1, [r3, #0]
 8003e9c:	d1de      	bne.n	8003e5c <_free_r+0x24>
 8003e9e:	6810      	ldr	r0, [r2, #0]
 8003ea0:	6852      	ldr	r2, [r2, #4]
 8003ea2:	4401      	add	r1, r0
 8003ea4:	6019      	str	r1, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	e7d8      	b.n	8003e5c <_free_r+0x24>
 8003eaa:	d902      	bls.n	8003eb2 <_free_r+0x7a>
 8003eac:	230c      	movs	r3, #12
 8003eae:	602b      	str	r3, [r5, #0]
 8003eb0:	e7d4      	b.n	8003e5c <_free_r+0x24>
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	1821      	adds	r1, r4, r0
 8003eb6:	428a      	cmp	r2, r1
 8003eb8:	bf01      	itttt	eq
 8003eba:	6811      	ldreq	r1, [r2, #0]
 8003ebc:	6852      	ldreq	r2, [r2, #4]
 8003ebe:	1809      	addeq	r1, r1, r0
 8003ec0:	6021      	streq	r1, [r4, #0]
 8003ec2:	6062      	str	r2, [r4, #4]
 8003ec4:	605c      	str	r4, [r3, #4]
 8003ec6:	e7c9      	b.n	8003e5c <_free_r+0x24>
 8003ec8:	bd38      	pop	{r3, r4, r5, pc}
 8003eca:	bf00      	nop
 8003ecc:	200000b4 	.word	0x200000b4

08003ed0 <_malloc_r>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	1ccd      	adds	r5, r1, #3
 8003ed4:	f025 0503 	bic.w	r5, r5, #3
 8003ed8:	3508      	adds	r5, #8
 8003eda:	2d0c      	cmp	r5, #12
 8003edc:	bf38      	it	cc
 8003ede:	250c      	movcc	r5, #12
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	db01      	blt.n	8003eea <_malloc_r+0x1a>
 8003ee6:	42a9      	cmp	r1, r5
 8003ee8:	d903      	bls.n	8003ef2 <_malloc_r+0x22>
 8003eea:	230c      	movs	r3, #12
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	2000      	movs	r0, #0
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	f000 fbc5 	bl	8004680 <__malloc_lock>
 8003ef6:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <_malloc_r+0xac>)
 8003ef8:	6814      	ldr	r4, [r2, #0]
 8003efa:	4621      	mov	r1, r4
 8003efc:	b991      	cbnz	r1, 8003f24 <_malloc_r+0x54>
 8003efe:	4c20      	ldr	r4, [pc, #128]	; (8003f80 <_malloc_r+0xb0>)
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	b91b      	cbnz	r3, 8003f0c <_malloc_r+0x3c>
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 fb03 	bl	8004510 <_sbrk_r>
 8003f0a:	6020      	str	r0, [r4, #0]
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f000 fafe 	bl	8004510 <_sbrk_r>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d124      	bne.n	8003f62 <_malloc_r+0x92>
 8003f18:	230c      	movs	r3, #12
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	f000 fbb0 	bl	8004682 <__malloc_unlock>
 8003f22:	e7e4      	b.n	8003eee <_malloc_r+0x1e>
 8003f24:	680b      	ldr	r3, [r1, #0]
 8003f26:	1b5b      	subs	r3, r3, r5
 8003f28:	d418      	bmi.n	8003f5c <_malloc_r+0x8c>
 8003f2a:	2b0b      	cmp	r3, #11
 8003f2c:	d90f      	bls.n	8003f4e <_malloc_r+0x7e>
 8003f2e:	600b      	str	r3, [r1, #0]
 8003f30:	18cc      	adds	r4, r1, r3
 8003f32:	50cd      	str	r5, [r1, r3]
 8003f34:	4630      	mov	r0, r6
 8003f36:	f000 fba4 	bl	8004682 <__malloc_unlock>
 8003f3a:	f104 000b 	add.w	r0, r4, #11
 8003f3e:	1d23      	adds	r3, r4, #4
 8003f40:	f020 0007 	bic.w	r0, r0, #7
 8003f44:	1ac3      	subs	r3, r0, r3
 8003f46:	d0d3      	beq.n	8003ef0 <_malloc_r+0x20>
 8003f48:	425a      	negs	r2, r3
 8003f4a:	50e2      	str	r2, [r4, r3]
 8003f4c:	e7d0      	b.n	8003ef0 <_malloc_r+0x20>
 8003f4e:	684b      	ldr	r3, [r1, #4]
 8003f50:	428c      	cmp	r4, r1
 8003f52:	bf16      	itet	ne
 8003f54:	6063      	strne	r3, [r4, #4]
 8003f56:	6013      	streq	r3, [r2, #0]
 8003f58:	460c      	movne	r4, r1
 8003f5a:	e7eb      	b.n	8003f34 <_malloc_r+0x64>
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	6849      	ldr	r1, [r1, #4]
 8003f60:	e7cc      	b.n	8003efc <_malloc_r+0x2c>
 8003f62:	1cc4      	adds	r4, r0, #3
 8003f64:	f024 0403 	bic.w	r4, r4, #3
 8003f68:	42a0      	cmp	r0, r4
 8003f6a:	d005      	beq.n	8003f78 <_malloc_r+0xa8>
 8003f6c:	1a21      	subs	r1, r4, r0
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f000 face 	bl	8004510 <_sbrk_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d0cf      	beq.n	8003f18 <_malloc_r+0x48>
 8003f78:	6025      	str	r5, [r4, #0]
 8003f7a:	e7db      	b.n	8003f34 <_malloc_r+0x64>
 8003f7c:	200000b4 	.word	0x200000b4
 8003f80:	200000b8 	.word	0x200000b8

08003f84 <__sfputc_r>:
 8003f84:	6893      	ldr	r3, [r2, #8]
 8003f86:	b410      	push	{r4}
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	6093      	str	r3, [r2, #8]
 8003f8e:	da07      	bge.n	8003fa0 <__sfputc_r+0x1c>
 8003f90:	6994      	ldr	r4, [r2, #24]
 8003f92:	42a3      	cmp	r3, r4
 8003f94:	db01      	blt.n	8003f9a <__sfputc_r+0x16>
 8003f96:	290a      	cmp	r1, #10
 8003f98:	d102      	bne.n	8003fa0 <__sfputc_r+0x1c>
 8003f9a:	bc10      	pop	{r4}
 8003f9c:	f7ff bcae 	b.w	80038fc <__swbuf_r>
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	1c58      	adds	r0, r3, #1
 8003fa4:	6010      	str	r0, [r2, #0]
 8003fa6:	7019      	strb	r1, [r3, #0]
 8003fa8:	4608      	mov	r0, r1
 8003faa:	bc10      	pop	{r4}
 8003fac:	4770      	bx	lr

08003fae <__sfputs_r>:
 8003fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	460f      	mov	r7, r1
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	18d5      	adds	r5, r2, r3
 8003fb8:	42ac      	cmp	r4, r5
 8003fba:	d101      	bne.n	8003fc0 <__sfputs_r+0x12>
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e007      	b.n	8003fd0 <__sfputs_r+0x22>
 8003fc0:	463a      	mov	r2, r7
 8003fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f7ff ffdc 	bl	8003f84 <__sfputc_r>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d1f3      	bne.n	8003fb8 <__sfputs_r+0xa>
 8003fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fd4 <_vfiprintf_r>:
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	460c      	mov	r4, r1
 8003fda:	b09d      	sub	sp, #116	; 0x74
 8003fdc:	4617      	mov	r7, r2
 8003fde:	461d      	mov	r5, r3
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	b118      	cbz	r0, 8003fec <_vfiprintf_r+0x18>
 8003fe4:	6983      	ldr	r3, [r0, #24]
 8003fe6:	b90b      	cbnz	r3, 8003fec <_vfiprintf_r+0x18>
 8003fe8:	f7ff fe38 	bl	8003c5c <__sinit>
 8003fec:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <_vfiprintf_r+0x20c>)
 8003fee:	429c      	cmp	r4, r3
 8003ff0:	d158      	bne.n	80040a4 <_vfiprintf_r+0xd0>
 8003ff2:	6874      	ldr	r4, [r6, #4]
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	0718      	lsls	r0, r3, #28
 8003ff8:	d55e      	bpl.n	80040b8 <_vfiprintf_r+0xe4>
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05b      	beq.n	80040b8 <_vfiprintf_r+0xe4>
 8004000:	2300      	movs	r3, #0
 8004002:	9309      	str	r3, [sp, #36]	; 0x24
 8004004:	2320      	movs	r3, #32
 8004006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800400a:	2330      	movs	r3, #48	; 0x30
 800400c:	f04f 0b01 	mov.w	fp, #1
 8004010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004014:	9503      	str	r5, [sp, #12]
 8004016:	46b8      	mov	r8, r7
 8004018:	4645      	mov	r5, r8
 800401a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800401e:	b10b      	cbz	r3, 8004024 <_vfiprintf_r+0x50>
 8004020:	2b25      	cmp	r3, #37	; 0x25
 8004022:	d154      	bne.n	80040ce <_vfiprintf_r+0xfa>
 8004024:	ebb8 0a07 	subs.w	sl, r8, r7
 8004028:	d00b      	beq.n	8004042 <_vfiprintf_r+0x6e>
 800402a:	4653      	mov	r3, sl
 800402c:	463a      	mov	r2, r7
 800402e:	4621      	mov	r1, r4
 8004030:	4630      	mov	r0, r6
 8004032:	f7ff ffbc 	bl	8003fae <__sfputs_r>
 8004036:	3001      	adds	r0, #1
 8004038:	f000 80c2 	beq.w	80041c0 <_vfiprintf_r+0x1ec>
 800403c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800403e:	4453      	add	r3, sl
 8004040:	9309      	str	r3, [sp, #36]	; 0x24
 8004042:	f898 3000 	ldrb.w	r3, [r8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80ba 	beq.w	80041c0 <_vfiprintf_r+0x1ec>
 800404c:	2300      	movs	r3, #0
 800404e:	f04f 32ff 	mov.w	r2, #4294967295
 8004052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004056:	9304      	str	r3, [sp, #16]
 8004058:	9307      	str	r3, [sp, #28]
 800405a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800405e:	931a      	str	r3, [sp, #104]	; 0x68
 8004060:	46a8      	mov	r8, r5
 8004062:	2205      	movs	r2, #5
 8004064:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004068:	485e      	ldr	r0, [pc, #376]	; (80041e4 <_vfiprintf_r+0x210>)
 800406a:	f000 fafb 	bl	8004664 <memchr>
 800406e:	9b04      	ldr	r3, [sp, #16]
 8004070:	bb78      	cbnz	r0, 80040d2 <_vfiprintf_r+0xfe>
 8004072:	06d9      	lsls	r1, r3, #27
 8004074:	bf44      	itt	mi
 8004076:	2220      	movmi	r2, #32
 8004078:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800407c:	071a      	lsls	r2, r3, #28
 800407e:	bf44      	itt	mi
 8004080:	222b      	movmi	r2, #43	; 0x2b
 8004082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004086:	782a      	ldrb	r2, [r5, #0]
 8004088:	2a2a      	cmp	r2, #42	; 0x2a
 800408a:	d02a      	beq.n	80040e2 <_vfiprintf_r+0x10e>
 800408c:	46a8      	mov	r8, r5
 800408e:	2000      	movs	r0, #0
 8004090:	250a      	movs	r5, #10
 8004092:	9a07      	ldr	r2, [sp, #28]
 8004094:	4641      	mov	r1, r8
 8004096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800409a:	3b30      	subs	r3, #48	; 0x30
 800409c:	2b09      	cmp	r3, #9
 800409e:	d969      	bls.n	8004174 <_vfiprintf_r+0x1a0>
 80040a0:	b360      	cbz	r0, 80040fc <_vfiprintf_r+0x128>
 80040a2:	e024      	b.n	80040ee <_vfiprintf_r+0x11a>
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <_vfiprintf_r+0x214>)
 80040a6:	429c      	cmp	r4, r3
 80040a8:	d101      	bne.n	80040ae <_vfiprintf_r+0xda>
 80040aa:	68b4      	ldr	r4, [r6, #8]
 80040ac:	e7a2      	b.n	8003ff4 <_vfiprintf_r+0x20>
 80040ae:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <_vfiprintf_r+0x218>)
 80040b0:	429c      	cmp	r4, r3
 80040b2:	bf08      	it	eq
 80040b4:	68f4      	ldreq	r4, [r6, #12]
 80040b6:	e79d      	b.n	8003ff4 <_vfiprintf_r+0x20>
 80040b8:	4621      	mov	r1, r4
 80040ba:	4630      	mov	r0, r6
 80040bc:	f7ff fc70 	bl	80039a0 <__swsetup_r>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d09d      	beq.n	8004000 <_vfiprintf_r+0x2c>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b01d      	add	sp, #116	; 0x74
 80040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ce:	46a8      	mov	r8, r5
 80040d0:	e7a2      	b.n	8004018 <_vfiprintf_r+0x44>
 80040d2:	4a44      	ldr	r2, [pc, #272]	; (80041e4 <_vfiprintf_r+0x210>)
 80040d4:	4645      	mov	r5, r8
 80040d6:	1a80      	subs	r0, r0, r2
 80040d8:	fa0b f000 	lsl.w	r0, fp, r0
 80040dc:	4318      	orrs	r0, r3
 80040de:	9004      	str	r0, [sp, #16]
 80040e0:	e7be      	b.n	8004060 <_vfiprintf_r+0x8c>
 80040e2:	9a03      	ldr	r2, [sp, #12]
 80040e4:	1d11      	adds	r1, r2, #4
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	9103      	str	r1, [sp, #12]
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	db01      	blt.n	80040f2 <_vfiprintf_r+0x11e>
 80040ee:	9207      	str	r2, [sp, #28]
 80040f0:	e004      	b.n	80040fc <_vfiprintf_r+0x128>
 80040f2:	4252      	negs	r2, r2
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	9207      	str	r2, [sp, #28]
 80040fa:	9304      	str	r3, [sp, #16]
 80040fc:	f898 3000 	ldrb.w	r3, [r8]
 8004100:	2b2e      	cmp	r3, #46	; 0x2e
 8004102:	d10e      	bne.n	8004122 <_vfiprintf_r+0x14e>
 8004104:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004108:	2b2a      	cmp	r3, #42	; 0x2a
 800410a:	d138      	bne.n	800417e <_vfiprintf_r+0x1aa>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	f108 0802 	add.w	r8, r8, #2
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	9203      	str	r2, [sp, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	bfb8      	it	lt
 800411c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004120:	9305      	str	r3, [sp, #20]
 8004122:	4d33      	ldr	r5, [pc, #204]	; (80041f0 <_vfiprintf_r+0x21c>)
 8004124:	2203      	movs	r2, #3
 8004126:	f898 1000 	ldrb.w	r1, [r8]
 800412a:	4628      	mov	r0, r5
 800412c:	f000 fa9a 	bl	8004664 <memchr>
 8004130:	b140      	cbz	r0, 8004144 <_vfiprintf_r+0x170>
 8004132:	2340      	movs	r3, #64	; 0x40
 8004134:	1b40      	subs	r0, r0, r5
 8004136:	fa03 f000 	lsl.w	r0, r3, r0
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	f108 0801 	add.w	r8, r8, #1
 8004140:	4303      	orrs	r3, r0
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	f898 1000 	ldrb.w	r1, [r8]
 8004148:	2206      	movs	r2, #6
 800414a:	482a      	ldr	r0, [pc, #168]	; (80041f4 <_vfiprintf_r+0x220>)
 800414c:	f108 0701 	add.w	r7, r8, #1
 8004150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004154:	f000 fa86 	bl	8004664 <memchr>
 8004158:	2800      	cmp	r0, #0
 800415a:	d037      	beq.n	80041cc <_vfiprintf_r+0x1f8>
 800415c:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <_vfiprintf_r+0x224>)
 800415e:	bb1b      	cbnz	r3, 80041a8 <_vfiprintf_r+0x1d4>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	3307      	adds	r3, #7
 8004164:	f023 0307 	bic.w	r3, r3, #7
 8004168:	3308      	adds	r3, #8
 800416a:	9303      	str	r3, [sp, #12]
 800416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416e:	444b      	add	r3, r9
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	e750      	b.n	8004016 <_vfiprintf_r+0x42>
 8004174:	fb05 3202 	mla	r2, r5, r2, r3
 8004178:	2001      	movs	r0, #1
 800417a:	4688      	mov	r8, r1
 800417c:	e78a      	b.n	8004094 <_vfiprintf_r+0xc0>
 800417e:	2300      	movs	r3, #0
 8004180:	250a      	movs	r5, #10
 8004182:	4619      	mov	r1, r3
 8004184:	f108 0801 	add.w	r8, r8, #1
 8004188:	9305      	str	r3, [sp, #20]
 800418a:	4640      	mov	r0, r8
 800418c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004190:	3a30      	subs	r2, #48	; 0x30
 8004192:	2a09      	cmp	r2, #9
 8004194:	d903      	bls.n	800419e <_vfiprintf_r+0x1ca>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0c3      	beq.n	8004122 <_vfiprintf_r+0x14e>
 800419a:	9105      	str	r1, [sp, #20]
 800419c:	e7c1      	b.n	8004122 <_vfiprintf_r+0x14e>
 800419e:	fb05 2101 	mla	r1, r5, r1, r2
 80041a2:	2301      	movs	r3, #1
 80041a4:	4680      	mov	r8, r0
 80041a6:	e7f0      	b.n	800418a <_vfiprintf_r+0x1b6>
 80041a8:	ab03      	add	r3, sp, #12
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4622      	mov	r2, r4
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <_vfiprintf_r+0x228>)
 80041b0:	a904      	add	r1, sp, #16
 80041b2:	4630      	mov	r0, r6
 80041b4:	f3af 8000 	nop.w
 80041b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041bc:	4681      	mov	r9, r0
 80041be:	d1d5      	bne.n	800416c <_vfiprintf_r+0x198>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	065b      	lsls	r3, r3, #25
 80041c4:	f53f af7e 	bmi.w	80040c4 <_vfiprintf_r+0xf0>
 80041c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ca:	e77d      	b.n	80040c8 <_vfiprintf_r+0xf4>
 80041cc:	ab03      	add	r3, sp, #12
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4622      	mov	r2, r4
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <_vfiprintf_r+0x228>)
 80041d4:	a904      	add	r1, sp, #16
 80041d6:	4630      	mov	r0, r6
 80041d8:	f000 f888 	bl	80042ec <_printf_i>
 80041dc:	e7ec      	b.n	80041b8 <_vfiprintf_r+0x1e4>
 80041de:	bf00      	nop
 80041e0:	080047b0 	.word	0x080047b0
 80041e4:	080047f0 	.word	0x080047f0
 80041e8:	080047d0 	.word	0x080047d0
 80041ec:	08004790 	.word	0x08004790
 80041f0:	080047f6 	.word	0x080047f6
 80041f4:	080047fa 	.word	0x080047fa
 80041f8:	00000000 	.word	0x00000000
 80041fc:	08003faf 	.word	0x08003faf

08004200 <_printf_common>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	4691      	mov	r9, r2
 8004206:	461f      	mov	r7, r3
 8004208:	688a      	ldr	r2, [r1, #8]
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	4606      	mov	r6, r0
 800420e:	4293      	cmp	r3, r2
 8004210:	bfb8      	it	lt
 8004212:	4613      	movlt	r3, r2
 8004214:	f8c9 3000 	str.w	r3, [r9]
 8004218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800421c:	460c      	mov	r4, r1
 800421e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004222:	b112      	cbz	r2, 800422a <_printf_common+0x2a>
 8004224:	3301      	adds	r3, #1
 8004226:	f8c9 3000 	str.w	r3, [r9]
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	0699      	lsls	r1, r3, #26
 800422e:	bf42      	ittt	mi
 8004230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004234:	3302      	addmi	r3, #2
 8004236:	f8c9 3000 	strmi.w	r3, [r9]
 800423a:	6825      	ldr	r5, [r4, #0]
 800423c:	f015 0506 	ands.w	r5, r5, #6
 8004240:	d107      	bne.n	8004252 <_printf_common+0x52>
 8004242:	f104 0a19 	add.w	sl, r4, #25
 8004246:	68e3      	ldr	r3, [r4, #12]
 8004248:	f8d9 2000 	ldr.w	r2, [r9]
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	42ab      	cmp	r3, r5
 8004250:	dc29      	bgt.n	80042a6 <_printf_common+0xa6>
 8004252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	3300      	adds	r3, #0
 800425a:	bf18      	it	ne
 800425c:	2301      	movne	r3, #1
 800425e:	0692      	lsls	r2, r2, #26
 8004260:	d42e      	bmi.n	80042c0 <_printf_common+0xc0>
 8004262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004266:	4639      	mov	r1, r7
 8004268:	4630      	mov	r0, r6
 800426a:	47c0      	blx	r8
 800426c:	3001      	adds	r0, #1
 800426e:	d021      	beq.n	80042b4 <_printf_common+0xb4>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	68e5      	ldr	r5, [r4, #12]
 8004274:	f003 0306 	and.w	r3, r3, #6
 8004278:	2b04      	cmp	r3, #4
 800427a:	bf18      	it	ne
 800427c:	2500      	movne	r5, #0
 800427e:	f8d9 2000 	ldr.w	r2, [r9]
 8004282:	f04f 0900 	mov.w	r9, #0
 8004286:	bf08      	it	eq
 8004288:	1aad      	subeq	r5, r5, r2
 800428a:	68a3      	ldr	r3, [r4, #8]
 800428c:	6922      	ldr	r2, [r4, #16]
 800428e:	bf08      	it	eq
 8004290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004294:	4293      	cmp	r3, r2
 8004296:	bfc4      	itt	gt
 8004298:	1a9b      	subgt	r3, r3, r2
 800429a:	18ed      	addgt	r5, r5, r3
 800429c:	341a      	adds	r4, #26
 800429e:	454d      	cmp	r5, r9
 80042a0:	d11a      	bne.n	80042d8 <_printf_common+0xd8>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e008      	b.n	80042b8 <_printf_common+0xb8>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4652      	mov	r2, sl
 80042aa:	4639      	mov	r1, r7
 80042ac:	4630      	mov	r0, r6
 80042ae:	47c0      	blx	r8
 80042b0:	3001      	adds	r0, #1
 80042b2:	d103      	bne.n	80042bc <_printf_common+0xbc>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042bc:	3501      	adds	r5, #1
 80042be:	e7c2      	b.n	8004246 <_printf_common+0x46>
 80042c0:	2030      	movs	r0, #48	; 0x30
 80042c2:	18e1      	adds	r1, r4, r3
 80042c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042ce:	4422      	add	r2, r4
 80042d0:	3302      	adds	r3, #2
 80042d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042d6:	e7c4      	b.n	8004262 <_printf_common+0x62>
 80042d8:	2301      	movs	r3, #1
 80042da:	4622      	mov	r2, r4
 80042dc:	4639      	mov	r1, r7
 80042de:	4630      	mov	r0, r6
 80042e0:	47c0      	blx	r8
 80042e2:	3001      	adds	r0, #1
 80042e4:	d0e6      	beq.n	80042b4 <_printf_common+0xb4>
 80042e6:	f109 0901 	add.w	r9, r9, #1
 80042ea:	e7d8      	b.n	800429e <_printf_common+0x9e>

080042ec <_printf_i>:
 80042ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042f4:	460c      	mov	r4, r1
 80042f6:	7e09      	ldrb	r1, [r1, #24]
 80042f8:	b085      	sub	sp, #20
 80042fa:	296e      	cmp	r1, #110	; 0x6e
 80042fc:	4617      	mov	r7, r2
 80042fe:	4606      	mov	r6, r0
 8004300:	4698      	mov	r8, r3
 8004302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004304:	f000 80b3 	beq.w	800446e <_printf_i+0x182>
 8004308:	d822      	bhi.n	8004350 <_printf_i+0x64>
 800430a:	2963      	cmp	r1, #99	; 0x63
 800430c:	d036      	beq.n	800437c <_printf_i+0x90>
 800430e:	d80a      	bhi.n	8004326 <_printf_i+0x3a>
 8004310:	2900      	cmp	r1, #0
 8004312:	f000 80b9 	beq.w	8004488 <_printf_i+0x19c>
 8004316:	2958      	cmp	r1, #88	; 0x58
 8004318:	f000 8083 	beq.w	8004422 <_printf_i+0x136>
 800431c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004324:	e032      	b.n	800438c <_printf_i+0xa0>
 8004326:	2964      	cmp	r1, #100	; 0x64
 8004328:	d001      	beq.n	800432e <_printf_i+0x42>
 800432a:	2969      	cmp	r1, #105	; 0x69
 800432c:	d1f6      	bne.n	800431c <_printf_i+0x30>
 800432e:	6820      	ldr	r0, [r4, #0]
 8004330:	6813      	ldr	r3, [r2, #0]
 8004332:	0605      	lsls	r5, r0, #24
 8004334:	f103 0104 	add.w	r1, r3, #4
 8004338:	d52a      	bpl.n	8004390 <_printf_i+0xa4>
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6011      	str	r1, [r2, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	da03      	bge.n	800434a <_printf_i+0x5e>
 8004342:	222d      	movs	r2, #45	; 0x2d
 8004344:	425b      	negs	r3, r3
 8004346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800434a:	486f      	ldr	r0, [pc, #444]	; (8004508 <_printf_i+0x21c>)
 800434c:	220a      	movs	r2, #10
 800434e:	e039      	b.n	80043c4 <_printf_i+0xd8>
 8004350:	2973      	cmp	r1, #115	; 0x73
 8004352:	f000 809d 	beq.w	8004490 <_printf_i+0x1a4>
 8004356:	d808      	bhi.n	800436a <_printf_i+0x7e>
 8004358:	296f      	cmp	r1, #111	; 0x6f
 800435a:	d020      	beq.n	800439e <_printf_i+0xb2>
 800435c:	2970      	cmp	r1, #112	; 0x70
 800435e:	d1dd      	bne.n	800431c <_printf_i+0x30>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	f043 0320 	orr.w	r3, r3, #32
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e003      	b.n	8004372 <_printf_i+0x86>
 800436a:	2975      	cmp	r1, #117	; 0x75
 800436c:	d017      	beq.n	800439e <_printf_i+0xb2>
 800436e:	2978      	cmp	r1, #120	; 0x78
 8004370:	d1d4      	bne.n	800431c <_printf_i+0x30>
 8004372:	2378      	movs	r3, #120	; 0x78
 8004374:	4865      	ldr	r0, [pc, #404]	; (800450c <_printf_i+0x220>)
 8004376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800437a:	e055      	b.n	8004428 <_printf_i+0x13c>
 800437c:	6813      	ldr	r3, [r2, #0]
 800437e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004382:	1d19      	adds	r1, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6011      	str	r1, [r2, #0]
 8004388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800438c:	2301      	movs	r3, #1
 800438e:	e08c      	b.n	80044aa <_printf_i+0x1be>
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004396:	6011      	str	r1, [r2, #0]
 8004398:	bf18      	it	ne
 800439a:	b21b      	sxthne	r3, r3
 800439c:	e7cf      	b.n	800433e <_printf_i+0x52>
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	6825      	ldr	r5, [r4, #0]
 80043a2:	1d18      	adds	r0, r3, #4
 80043a4:	6010      	str	r0, [r2, #0]
 80043a6:	0628      	lsls	r0, r5, #24
 80043a8:	d501      	bpl.n	80043ae <_printf_i+0xc2>
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	e002      	b.n	80043b4 <_printf_i+0xc8>
 80043ae:	0668      	lsls	r0, r5, #25
 80043b0:	d5fb      	bpl.n	80043aa <_printf_i+0xbe>
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	296f      	cmp	r1, #111	; 0x6f
 80043b6:	bf14      	ite	ne
 80043b8:	220a      	movne	r2, #10
 80043ba:	2208      	moveq	r2, #8
 80043bc:	4852      	ldr	r0, [pc, #328]	; (8004508 <_printf_i+0x21c>)
 80043be:	2100      	movs	r1, #0
 80043c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043c4:	6865      	ldr	r5, [r4, #4]
 80043c6:	2d00      	cmp	r5, #0
 80043c8:	60a5      	str	r5, [r4, #8]
 80043ca:	f2c0 8095 	blt.w	80044f8 <_printf_i+0x20c>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	f021 0104 	bic.w	r1, r1, #4
 80043d4:	6021      	str	r1, [r4, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d13d      	bne.n	8004456 <_printf_i+0x16a>
 80043da:	2d00      	cmp	r5, #0
 80043dc:	f040 808e 	bne.w	80044fc <_printf_i+0x210>
 80043e0:	4665      	mov	r5, ip
 80043e2:	2a08      	cmp	r2, #8
 80043e4:	d10b      	bne.n	80043fe <_printf_i+0x112>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	07db      	lsls	r3, r3, #31
 80043ea:	d508      	bpl.n	80043fe <_printf_i+0x112>
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	bfde      	ittt	le
 80043f4:	2330      	movle	r3, #48	; 0x30
 80043f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043fe:	ebac 0305 	sub.w	r3, ip, r5
 8004402:	6123      	str	r3, [r4, #16]
 8004404:	f8cd 8000 	str.w	r8, [sp]
 8004408:	463b      	mov	r3, r7
 800440a:	aa03      	add	r2, sp, #12
 800440c:	4621      	mov	r1, r4
 800440e:	4630      	mov	r0, r6
 8004410:	f7ff fef6 	bl	8004200 <_printf_common>
 8004414:	3001      	adds	r0, #1
 8004416:	d14d      	bne.n	80044b4 <_printf_i+0x1c8>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	b005      	add	sp, #20
 800441e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004422:	4839      	ldr	r0, [pc, #228]	; (8004508 <_printf_i+0x21c>)
 8004424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	6821      	ldr	r1, [r4, #0]
 800442c:	1d1d      	adds	r5, r3, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6015      	str	r5, [r2, #0]
 8004432:	060a      	lsls	r2, r1, #24
 8004434:	d50b      	bpl.n	800444e <_printf_i+0x162>
 8004436:	07ca      	lsls	r2, r1, #31
 8004438:	bf44      	itt	mi
 800443a:	f041 0120 	orrmi.w	r1, r1, #32
 800443e:	6021      	strmi	r1, [r4, #0]
 8004440:	b91b      	cbnz	r3, 800444a <_printf_i+0x15e>
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	f022 0220 	bic.w	r2, r2, #32
 8004448:	6022      	str	r2, [r4, #0]
 800444a:	2210      	movs	r2, #16
 800444c:	e7b7      	b.n	80043be <_printf_i+0xd2>
 800444e:	064d      	lsls	r5, r1, #25
 8004450:	bf48      	it	mi
 8004452:	b29b      	uxthmi	r3, r3
 8004454:	e7ef      	b.n	8004436 <_printf_i+0x14a>
 8004456:	4665      	mov	r5, ip
 8004458:	fbb3 f1f2 	udiv	r1, r3, r2
 800445c:	fb02 3311 	mls	r3, r2, r1, r3
 8004460:	5cc3      	ldrb	r3, [r0, r3]
 8004462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004466:	460b      	mov	r3, r1
 8004468:	2900      	cmp	r1, #0
 800446a:	d1f5      	bne.n	8004458 <_printf_i+0x16c>
 800446c:	e7b9      	b.n	80043e2 <_printf_i+0xf6>
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	6825      	ldr	r5, [r4, #0]
 8004472:	1d18      	adds	r0, r3, #4
 8004474:	6961      	ldr	r1, [r4, #20]
 8004476:	6010      	str	r0, [r2, #0]
 8004478:	0628      	lsls	r0, r5, #24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	d501      	bpl.n	8004482 <_printf_i+0x196>
 800447e:	6019      	str	r1, [r3, #0]
 8004480:	e002      	b.n	8004488 <_printf_i+0x19c>
 8004482:	066a      	lsls	r2, r5, #25
 8004484:	d5fb      	bpl.n	800447e <_printf_i+0x192>
 8004486:	8019      	strh	r1, [r3, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	4665      	mov	r5, ip
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	e7b9      	b.n	8004404 <_printf_i+0x118>
 8004490:	6813      	ldr	r3, [r2, #0]
 8004492:	1d19      	adds	r1, r3, #4
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	681d      	ldr	r5, [r3, #0]
 8004498:	6862      	ldr	r2, [r4, #4]
 800449a:	2100      	movs	r1, #0
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f8e1 	bl	8004664 <memchr>
 80044a2:	b108      	cbz	r0, 80044a8 <_printf_i+0x1bc>
 80044a4:	1b40      	subs	r0, r0, r5
 80044a6:	6060      	str	r0, [r4, #4]
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	2300      	movs	r3, #0
 80044ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b2:	e7a7      	b.n	8004404 <_printf_i+0x118>
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	462a      	mov	r2, r5
 80044b8:	4639      	mov	r1, r7
 80044ba:	4630      	mov	r0, r6
 80044bc:	47c0      	blx	r8
 80044be:	3001      	adds	r0, #1
 80044c0:	d0aa      	beq.n	8004418 <_printf_i+0x12c>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	079b      	lsls	r3, r3, #30
 80044c6:	d413      	bmi.n	80044f0 <_printf_i+0x204>
 80044c8:	68e0      	ldr	r0, [r4, #12]
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	4298      	cmp	r0, r3
 80044ce:	bfb8      	it	lt
 80044d0:	4618      	movlt	r0, r3
 80044d2:	e7a3      	b.n	800441c <_printf_i+0x130>
 80044d4:	2301      	movs	r3, #1
 80044d6:	464a      	mov	r2, r9
 80044d8:	4639      	mov	r1, r7
 80044da:	4630      	mov	r0, r6
 80044dc:	47c0      	blx	r8
 80044de:	3001      	adds	r0, #1
 80044e0:	d09a      	beq.n	8004418 <_printf_i+0x12c>
 80044e2:	3501      	adds	r5, #1
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	9a03      	ldr	r2, [sp, #12]
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	dcf2      	bgt.n	80044d4 <_printf_i+0x1e8>
 80044ee:	e7eb      	b.n	80044c8 <_printf_i+0x1dc>
 80044f0:	2500      	movs	r5, #0
 80044f2:	f104 0919 	add.w	r9, r4, #25
 80044f6:	e7f5      	b.n	80044e4 <_printf_i+0x1f8>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ac      	bne.n	8004456 <_printf_i+0x16a>
 80044fc:	7803      	ldrb	r3, [r0, #0]
 80044fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004506:	e76c      	b.n	80043e2 <_printf_i+0xf6>
 8004508:	08004801 	.word	0x08004801
 800450c:	08004812 	.word	0x08004812

08004510 <_sbrk_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	2300      	movs	r3, #0
 8004514:	4c05      	ldr	r4, [pc, #20]	; (800452c <_sbrk_r+0x1c>)
 8004516:	4605      	mov	r5, r0
 8004518:	4608      	mov	r0, r1
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	f7fc ffaa 	bl	8001474 <_sbrk>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_sbrk_r+0x1a>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	b103      	cbz	r3, 800452a <_sbrk_r+0x1a>
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	200001a8 	.word	0x200001a8

08004530 <__sread>:
 8004530:	b510      	push	{r4, lr}
 8004532:	460c      	mov	r4, r1
 8004534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004538:	f000 f8a4 	bl	8004684 <_read_r>
 800453c:	2800      	cmp	r0, #0
 800453e:	bfab      	itete	ge
 8004540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004542:	89a3      	ldrhlt	r3, [r4, #12]
 8004544:	181b      	addge	r3, r3, r0
 8004546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800454a:	bfac      	ite	ge
 800454c:	6563      	strge	r3, [r4, #84]	; 0x54
 800454e:	81a3      	strhlt	r3, [r4, #12]
 8004550:	bd10      	pop	{r4, pc}

08004552 <__swrite>:
 8004552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004556:	461f      	mov	r7, r3
 8004558:	898b      	ldrh	r3, [r1, #12]
 800455a:	4605      	mov	r5, r0
 800455c:	05db      	lsls	r3, r3, #23
 800455e:	460c      	mov	r4, r1
 8004560:	4616      	mov	r6, r2
 8004562:	d505      	bpl.n	8004570 <__swrite+0x1e>
 8004564:	2302      	movs	r3, #2
 8004566:	2200      	movs	r2, #0
 8004568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800456c:	f000 f868 	bl	8004640 <_lseek_r>
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	4632      	mov	r2, r6
 8004574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004578:	81a3      	strh	r3, [r4, #12]
 800457a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800457e:	463b      	mov	r3, r7
 8004580:	4628      	mov	r0, r5
 8004582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	f000 b817 	b.w	80045b8 <_write_r>

0800458a <__sseek>:
 800458a:	b510      	push	{r4, lr}
 800458c:	460c      	mov	r4, r1
 800458e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004592:	f000 f855 	bl	8004640 <_lseek_r>
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	bf15      	itete	ne
 800459c:	6560      	strne	r0, [r4, #84]	; 0x54
 800459e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045a6:	81a3      	strheq	r3, [r4, #12]
 80045a8:	bf18      	it	ne
 80045aa:	81a3      	strhne	r3, [r4, #12]
 80045ac:	bd10      	pop	{r4, pc}

080045ae <__sclose>:
 80045ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b2:	f000 b813 	b.w	80045dc <_close_r>
	...

080045b8 <_write_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4605      	mov	r5, r0
 80045bc:	4608      	mov	r0, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	2200      	movs	r2, #0
 80045c2:	4c05      	ldr	r4, [pc, #20]	; (80045d8 <_write_r+0x20>)
 80045c4:	6022      	str	r2, [r4, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f7fc ff07 	bl	80013da <_write>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d102      	bne.n	80045d6 <_write_r+0x1e>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	b103      	cbz	r3, 80045d6 <_write_r+0x1e>
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	200001a8 	.word	0x200001a8

080045dc <_close_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	2300      	movs	r3, #0
 80045e0:	4c05      	ldr	r4, [pc, #20]	; (80045f8 <_close_r+0x1c>)
 80045e2:	4605      	mov	r5, r0
 80045e4:	4608      	mov	r0, r1
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	f7fc ff13 	bl	8001412 <_close>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_close_r+0x1a>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_close_r+0x1a>
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	200001a8 	.word	0x200001a8

080045fc <_fstat_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	2300      	movs	r3, #0
 8004600:	4c06      	ldr	r4, [pc, #24]	; (800461c <_fstat_r+0x20>)
 8004602:	4605      	mov	r5, r0
 8004604:	4608      	mov	r0, r1
 8004606:	4611      	mov	r1, r2
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	f7fc ff0d 	bl	8001428 <_fstat>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d102      	bne.n	8004618 <_fstat_r+0x1c>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	b103      	cbz	r3, 8004618 <_fstat_r+0x1c>
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	bd38      	pop	{r3, r4, r5, pc}
 800461a:	bf00      	nop
 800461c:	200001a8 	.word	0x200001a8

08004620 <_isatty_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	2300      	movs	r3, #0
 8004624:	4c05      	ldr	r4, [pc, #20]	; (800463c <_isatty_r+0x1c>)
 8004626:	4605      	mov	r5, r0
 8004628:	4608      	mov	r0, r1
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	f7fc ff0b 	bl	8001446 <_isatty>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_isatty_r+0x1a>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	b103      	cbz	r3, 800463a <_isatty_r+0x1a>
 8004638:	602b      	str	r3, [r5, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	200001a8 	.word	0x200001a8

08004640 <_lseek_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4605      	mov	r5, r0
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	2200      	movs	r2, #0
 800464a:	4c05      	ldr	r4, [pc, #20]	; (8004660 <_lseek_r+0x20>)
 800464c:	6022      	str	r2, [r4, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	f7fc ff03 	bl	800145a <_lseek>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_lseek_r+0x1e>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	b103      	cbz	r3, 800465e <_lseek_r+0x1e>
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	200001a8 	.word	0x200001a8

08004664 <memchr>:
 8004664:	b510      	push	{r4, lr}
 8004666:	b2c9      	uxtb	r1, r1
 8004668:	4402      	add	r2, r0
 800466a:	4290      	cmp	r0, r2
 800466c:	4603      	mov	r3, r0
 800466e:	d101      	bne.n	8004674 <memchr+0x10>
 8004670:	2300      	movs	r3, #0
 8004672:	e003      	b.n	800467c <memchr+0x18>
 8004674:	781c      	ldrb	r4, [r3, #0]
 8004676:	3001      	adds	r0, #1
 8004678:	428c      	cmp	r4, r1
 800467a:	d1f6      	bne.n	800466a <memchr+0x6>
 800467c:	4618      	mov	r0, r3
 800467e:	bd10      	pop	{r4, pc}

08004680 <__malloc_lock>:
 8004680:	4770      	bx	lr

08004682 <__malloc_unlock>:
 8004682:	4770      	bx	lr

08004684 <_read_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4605      	mov	r5, r0
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	2200      	movs	r2, #0
 800468e:	4c05      	ldr	r4, [pc, #20]	; (80046a4 <_read_r+0x20>)
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fc fe84 	bl	80013a0 <_read>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_read_r+0x1e>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_read_r+0x1e>
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	200001a8 	.word	0x200001a8

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
