
4x4keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004564  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080047f0  080047f0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f0  080047f0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080047f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000088  08004880  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004880  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdfd  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021fc  00000000  00000000  0002feae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001058  00000000  00000000  000320b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  00033108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019634  00000000  00000000  000340e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c15d  00000000  00000000  0004d714  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e578  00000000  00000000  00059871  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7de9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c4c  00000000  00000000  000e7e64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004658 	.word	0x08004658

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004658 	.word	0x08004658

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <scan_Rx>:
short enable_remainTime_progress = 0;

static Pos pos;

char scan_Rx(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016a:	4890      	ldr	r0, [pc, #576]	; (80003ac <scan_Rx+0x24c>)
 800016c:	f001 fcad 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000176:	488e      	ldr	r0, [pc, #568]	; (80003b0 <scan_Rx+0x250>)
 8000178:	f001 fca7 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000182:	488b      	ldr	r0, [pc, #556]	; (80003b0 <scan_Rx+0x250>)
 8000184:	f001 fca1 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2180      	movs	r1, #128	; 0x80
 800018c:	4889      	ldr	r0, [pc, #548]	; (80003b4 <scan_Rx+0x254>)
 800018e:	f001 fc9c 	bl	8001aca <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000192:	2110      	movs	r1, #16
 8000194:	4885      	ldr	r0, [pc, #532]	; (80003ac <scan_Rx+0x24c>)
 8000196:	f001 fc81 	bl	8001a9c <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d109      	bne.n	80001b4 <scan_Rx+0x54>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80001a0:	bf00      	nop
 80001a2:	2110      	movs	r1, #16
 80001a4:	4881      	ldr	r0, [pc, #516]	; (80003ac <scan_Rx+0x24c>)
 80001a6:	f001 fc79 	bl	8001a9c <HAL_GPIO_ReadPin>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0f8      	beq.n	80001a2 <scan_Rx+0x42>
		return '1';
 80001b0:	2331      	movs	r3, #49	; 0x31
 80001b2:	e0f8      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80001b4:	2120      	movs	r1, #32
 80001b6:	487d      	ldr	r0, [pc, #500]	; (80003ac <scan_Rx+0x24c>)
 80001b8:	f001 fc70 	bl	8001a9c <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d109      	bne.n	80001d6 <scan_Rx+0x76>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80001c2:	bf00      	nop
 80001c4:	2120      	movs	r1, #32
 80001c6:	4879      	ldr	r0, [pc, #484]	; (80003ac <scan_Rx+0x24c>)
 80001c8:	f001 fc68 	bl	8001a9c <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f8      	beq.n	80001c4 <scan_Rx+0x64>
		return '2';
 80001d2:	2332      	movs	r3, #50	; 0x32
 80001d4:	e0e7      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80001d6:	2108      	movs	r1, #8
 80001d8:	4874      	ldr	r0, [pc, #464]	; (80003ac <scan_Rx+0x24c>)
 80001da:	f001 fc5f 	bl	8001a9c <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d109      	bne.n	80001f8 <scan_Rx+0x98>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80001e4:	bf00      	nop
 80001e6:	2108      	movs	r1, #8
 80001e8:	4870      	ldr	r0, [pc, #448]	; (80003ac <scan_Rx+0x24c>)
 80001ea:	f001 fc57 	bl	8001a9c <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f8      	beq.n	80001e6 <scan_Rx+0x86>
		return '3';
 80001f4:	2333      	movs	r3, #51	; 0x33
 80001f6:	e0d6      	b.n	80003a6 <scan_Rx+0x246>
//	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
//	{
//		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
//		return 'A';
//	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fe:	486b      	ldr	r0, [pc, #428]	; (80003ac <scan_Rx+0x24c>)
 8000200:	f001 fc63 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800020a:	4869      	ldr	r0, [pc, #420]	; (80003b0 <scan_Rx+0x250>)
 800020c:	f001 fc5d 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000216:	4866      	ldr	r0, [pc, #408]	; (80003b0 <scan_Rx+0x250>)
 8000218:	f001 fc57 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2180      	movs	r1, #128	; 0x80
 8000220:	4864      	ldr	r0, [pc, #400]	; (80003b4 <scan_Rx+0x254>)
 8000222:	f001 fc52 	bl	8001aca <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000226:	2110      	movs	r1, #16
 8000228:	4860      	ldr	r0, [pc, #384]	; (80003ac <scan_Rx+0x24c>)
 800022a:	f001 fc37 	bl	8001a9c <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d109      	bne.n	8000248 <scan_Rx+0xe8>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000234:	bf00      	nop
 8000236:	2110      	movs	r1, #16
 8000238:	485c      	ldr	r0, [pc, #368]	; (80003ac <scan_Rx+0x24c>)
 800023a:	f001 fc2f 	bl	8001a9c <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f8      	beq.n	8000236 <scan_Rx+0xd6>
		return '4';
 8000244:	2334      	movs	r3, #52	; 0x34
 8000246:	e0ae      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000248:	2120      	movs	r1, #32
 800024a:	4858      	ldr	r0, [pc, #352]	; (80003ac <scan_Rx+0x24c>)
 800024c:	f001 fc26 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d109      	bne.n	800026a <scan_Rx+0x10a>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000256:	bf00      	nop
 8000258:	2120      	movs	r1, #32
 800025a:	4854      	ldr	r0, [pc, #336]	; (80003ac <scan_Rx+0x24c>)
 800025c:	f001 fc1e 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f8      	beq.n	8000258 <scan_Rx+0xf8>
		return '5';
 8000266:	2335      	movs	r3, #53	; 0x35
 8000268:	e09d      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 800026a:	2108      	movs	r1, #8
 800026c:	484f      	ldr	r0, [pc, #316]	; (80003ac <scan_Rx+0x24c>)
 800026e:	f001 fc15 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d109      	bne.n	800028c <scan_Rx+0x12c>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000278:	bf00      	nop
 800027a:	2108      	movs	r1, #8
 800027c:	484b      	ldr	r0, [pc, #300]	; (80003ac <scan_Rx+0x24c>)
 800027e:	f001 fc0d 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f8      	beq.n	800027a <scan_Rx+0x11a>
		return '6';
 8000288:	2336      	movs	r3, #54	; 0x36
 800028a:	e08c      	b.n	80003a6 <scan_Rx+0x246>
//	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
//	{
//		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
//		return 'B';
//	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000292:	4846      	ldr	r0, [pc, #280]	; (80003ac <scan_Rx+0x24c>)
 8000294:	f001 fc19 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029e:	4844      	ldr	r0, [pc, #272]	; (80003b0 <scan_Rx+0x250>)
 80002a0:	f001 fc13 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002aa:	4841      	ldr	r0, [pc, #260]	; (80003b0 <scan_Rx+0x250>)
 80002ac:	f001 fc0d 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	483f      	ldr	r0, [pc, #252]	; (80003b4 <scan_Rx+0x254>)
 80002b6:	f001 fc08 	bl	8001aca <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80002ba:	2110      	movs	r1, #16
 80002bc:	483b      	ldr	r0, [pc, #236]	; (80003ac <scan_Rx+0x24c>)
 80002be:	f001 fbed 	bl	8001a9c <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d109      	bne.n	80002dc <scan_Rx+0x17c>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80002c8:	bf00      	nop
 80002ca:	2110      	movs	r1, #16
 80002cc:	4837      	ldr	r0, [pc, #220]	; (80003ac <scan_Rx+0x24c>)
 80002ce:	f001 fbe5 	bl	8001a9c <HAL_GPIO_ReadPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f8      	beq.n	80002ca <scan_Rx+0x16a>
		return '7';
 80002d8:	2337      	movs	r3, #55	; 0x37
 80002da:	e064      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80002dc:	2120      	movs	r1, #32
 80002de:	4833      	ldr	r0, [pc, #204]	; (80003ac <scan_Rx+0x24c>)
 80002e0:	f001 fbdc 	bl	8001a9c <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d109      	bne.n	80002fe <scan_Rx+0x19e>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80002ea:	bf00      	nop
 80002ec:	2120      	movs	r1, #32
 80002ee:	482f      	ldr	r0, [pc, #188]	; (80003ac <scan_Rx+0x24c>)
 80002f0:	f001 fbd4 	bl	8001a9c <HAL_GPIO_ReadPin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f8      	beq.n	80002ec <scan_Rx+0x18c>
		return '8';
 80002fa:	2338      	movs	r3, #56	; 0x38
 80002fc:	e053      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80002fe:	2108      	movs	r1, #8
 8000300:	482a      	ldr	r0, [pc, #168]	; (80003ac <scan_Rx+0x24c>)
 8000302:	f001 fbcb 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <scan_Rx+0x1c0>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800030c:	bf00      	nop
 800030e:	2108      	movs	r1, #8
 8000310:	4826      	ldr	r0, [pc, #152]	; (80003ac <scan_Rx+0x24c>)
 8000312:	f001 fbc3 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f8      	beq.n	800030e <scan_Rx+0x1ae>
		return '9';
 800031c:	2339      	movs	r3, #57	; 0x39
 800031e:	e042      	b.n	80003a6 <scan_Rx+0x246>
//	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
//	{
//		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
//		return 'C';
//	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000326:	4821      	ldr	r0, [pc, #132]	; (80003ac <scan_Rx+0x24c>)
 8000328:	f001 fbcf 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000332:	481f      	ldr	r0, [pc, #124]	; (80003b0 <scan_Rx+0x250>)
 8000334:	f001 fbc9 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033e:	481c      	ldr	r0, [pc, #112]	; (80003b0 <scan_Rx+0x250>)
 8000340:	f001 fbc3 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2180      	movs	r1, #128	; 0x80
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <scan_Rx+0x254>)
 800034a:	f001 fbbe 	bl	8001aca <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 800034e:	2110      	movs	r1, #16
 8000350:	4816      	ldr	r0, [pc, #88]	; (80003ac <scan_Rx+0x24c>)
 8000352:	f001 fba3 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d109      	bne.n	8000370 <scan_Rx+0x210>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800035c:	bf00      	nop
 800035e:	2110      	movs	r1, #16
 8000360:	4812      	ldr	r0, [pc, #72]	; (80003ac <scan_Rx+0x24c>)
 8000362:	f001 fb9b 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f8      	beq.n	800035e <scan_Rx+0x1fe>
		return '*';
 800036c:	232a      	movs	r3, #42	; 0x2a
 800036e:	e01a      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000370:	2120      	movs	r1, #32
 8000372:	480e      	ldr	r0, [pc, #56]	; (80003ac <scan_Rx+0x24c>)
 8000374:	f001 fb92 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d109      	bne.n	8000392 <scan_Rx+0x232>
	{

		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800037e:	bf00      	nop
 8000380:	2120      	movs	r1, #32
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <scan_Rx+0x24c>)
 8000384:	f001 fb8a 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f8      	beq.n	8000380 <scan_Rx+0x220>
		return '0';
 800038e:	2330      	movs	r3, #48	; 0x30
 8000390:	e009      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000392:	2108      	movs	r1, #8
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <scan_Rx+0x24c>)
 8000396:	f001 fb81 	bl	8001a9c <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d101      	bne.n	80003a4 <scan_Rx+0x244>
	{
//		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
		return '#';
 80003a0:	2323      	movs	r3, #35	; 0x23
 80003a2:	e000      	b.n	80003a6 <scan_Rx+0x246>
	}

	return 255;
 80003a4:	23ff      	movs	r3, #255	; 0xff
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	40010800 	.word	0x40010800
 80003b4:	40011000 	.word	0x40011000

080003b8 <checkPassword>:
/*
 * pw 		 : pw that user press
 * setted_pw : door-lock password
 */
char checkPassword(const char *pw, const char *setted_pw)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	if(!strcmp(pw, setted_pw))
 80003c2:	6839      	ldr	r1, [r7, #0]
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff fec1 	bl	800014c <strcmp>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d106      	bne.n	80003de <checkPassword+0x26>
	{
		printf("Good\n");
 80003d0:	4807      	ldr	r0, [pc, #28]	; (80003f0 <checkPassword+0x38>)
 80003d2:	f003 fa5b 	bl	800388c <puts>
		finish_system("Door Unlocked");
 80003d6:	4807      	ldr	r0, [pc, #28]	; (80003f4 <checkPassword+0x3c>)
 80003d8:	f000 f912 	bl	8000600 <finish_system>
 80003dc:	e002      	b.n	80003e4 <checkPassword+0x2c>
	}else
	{
		printf("Failed!!\n");
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <checkPassword+0x40>)
 80003e0:	f003 fa54 	bl	800388c <puts>
	}
}
 80003e4:	bf00      	nop
 80003e6:	4618      	mov	r0, r3
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	08004670 	.word	0x08004670
 80003f4:	08004678 	.word	0x08004678
 80003f8:	08004688 	.word	0x08004688

080003fc <set_remain_time_progress>:

void set_remain_time_progress(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	for(int i = 0; i < remain_time; i++)
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	e009      	b.n	800041c <set_remain_time_progress+0x20>
	{
	  HD44780_SetCursor(i, 1);
 8000408:	2101      	movs	r1, #1
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 f9b2 	bl	8000774 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(0xFF);
 8000410:	20ff      	movs	r0, #255	; 0xff
 8000412:	f000 fa35 	bl	8000880 <HD44780_PrintSpecialChar>
	for(int i = 0; i < remain_time; i++)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b09      	cmp	r3, #9
 8000420:	ddf2      	ble.n	8000408 <set_remain_time_progress+0xc>
	}
	enable_remainTime_progress = 1;
 8000422:	4b03      	ldr	r3, [pc, #12]	; (8000430 <set_remain_time_progress+0x34>)
 8000424:	2201      	movs	r2, #1
 8000426:	801a      	strh	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200000a4 	.word	0x200000a4

08000434 <decrease_remainTime>:

void decrease_remainTime(short rt)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	80fb      	strh	r3, [r7, #6]
  HD44780_SetCursor(rt, 1);
 800043e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000442:	2101      	movs	r1, #1
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f995 	bl	8000774 <HD44780_SetCursor>
  HD44780_PrintSpecialChar(0x20);
 800044a:	2020      	movs	r0, #32
 800044c:	f000 fa18 	bl	8000880 <HD44780_PrintSpecialChar>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <set_cursor_pos>:
{
	HD44780_SetCursor(col, row);
	HD44780_PrintSpecialChar(0x20);
}
void set_cursor_pos(short col, short row)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	460a      	mov	r2, r1
 8000462:	80fb      	strh	r3, [r7, #6]
 8000464:	4613      	mov	r3, r2
 8000466:	80bb      	strh	r3, [r7, #4]
	pos.col = col;
 8000468:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <set_cursor_pos+0x4c>)
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	8013      	strh	r3, [r2, #0]
	pos.row = row;
 800046e:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <set_cursor_pos+0x4c>)
 8000470:	88bb      	ldrh	r3, [r7, #4]
 8000472:	8053      	strh	r3, [r2, #2]
	HD44780_SetCursor(col, row);
 8000474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000478:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f978 	bl	8000774 <HD44780_SetCursor>
	printf("col : %d row : %d\n", pos.col, pos.row);
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <set_cursor_pos+0x4c>)
 8000486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800048a:	4619      	mov	r1, r3
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <set_cursor_pos+0x4c>)
 800048e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000492:	461a      	mov	r2, r3
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <set_cursor_pos+0x50>)
 8000496:	f003 f985 	bl	80037a4 <iprintf>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000a8 	.word	0x200000a8
 80004a8:	08004694 	.word	0x08004694

080004ac <check_change_pw_key_pressed>:
{
	return pos;
}

short check_change_pw_key_pressed(short* long_press_cnt, short* gp_timer)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 80004b6:	e017      	b.n	80004e8 <check_change_pw_key_pressed+0x3c>
		   !HAL_GPIO_ReadPin(R4_GPIO_Port, R4_Pin) )
	{
		if(*long_press_cnt == 0)	// 0s
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d105      	bne.n	80004ce <check_change_pw_key_pressed+0x22>
		{
			*long_press_cnt = *gp_timer;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	801a      	strh	r2, [r3, #0]
 80004cc:	e00c      	b.n	80004e8 <check_change_pw_key_pressed+0x3c>
		}else if(*gp_timer >= *long_press_cnt + 2000)	// 2s
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004d4:	461a      	mov	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80004e0:	429a      	cmp	r2, r3
 80004e2:	db01      	blt.n	80004e8 <check_change_pw_key_pressed+0x3c>
		{

			return 1;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e011      	b.n	800050c <check_change_pw_key_pressed+0x60>
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 80004e8:	2108      	movs	r1, #8
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <check_change_pw_key_pressed+0x68>)
 80004ec:	f001 fad6 	bl	8001a9c <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d106      	bne.n	8000504 <check_change_pw_key_pressed+0x58>
		   !HAL_GPIO_ReadPin(R4_GPIO_Port, R4_Pin) )
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <check_change_pw_key_pressed+0x6c>)
 80004fa:	f001 facf 	bl	8001a9c <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <check_change_pw_key_pressed+0xc>
		}
	}

	*long_press_cnt = 0;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	801a      	strh	r2, [r3, #0]
	return 0;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40010c00 	.word	0x40010c00
 8000518:	40011000 	.word	0x40011000

0800051c <changePassword>:
short changePassword(char original_password[], short size)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	807b      	strh	r3, [r7, #2]
	HD44780_Clear();
 8000528:	f000 f90e 	bl	8000748 <HD44780_Clear>
	HD44780_PrintStr("Change Password");
 800052c:	482b      	ldr	r0, [pc, #172]	; (80005dc <changePassword+0xc0>)
 800052e:	f000 f9b4 	bl	800089a <HD44780_PrintStr>

	char key;
	short pw_idx = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	83fb      	strh	r3, [r7, #30]
	char pw[10] = "\0";
 8000536:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <changePassword+0xc4>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	81bb      	strh	r3, [r7, #12]
 800053c:	f107 030e 	add.w	r3, r7, #14
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
	while(1)
	{
		while((key = scan_Rx()) == 255) ;
 8000546:	bf00      	nop
 8000548:	f7ff fe0a 	bl	8000160 <scan_Rx>
 800054c:	4603      	mov	r3, r0
 800054e:	75fb      	strb	r3, [r7, #23]
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	2bff      	cmp	r3, #255	; 0xff
 8000554:	d0f8      	beq.n	8000548 <changePassword+0x2c>

		if( key == '#')
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	2b23      	cmp	r3, #35	; 0x23
 800055a:	d039      	beq.n	80005d0 <changePassword+0xb4>
		{
			continue;
		}else if(key != '*' && key != 255 && pw_idx < MAX_SIZE)
 800055c:	7dfb      	ldrb	r3, [r7, #23]
 800055e:	2b2a      	cmp	r3, #42	; 0x2a
 8000560:	d01b      	beq.n	800059a <changePassword+0x7e>
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d018      	beq.n	800059a <changePassword+0x7e>
 8000568:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800056c:	2b05      	cmp	r3, #5
 800056e:	dc14      	bgt.n	800059a <changePassword+0x7e>
		{
			HD44780_Clear();
 8000570:	f000 f8ea 	bl	8000748 <HD44780_Clear>
			pw[pw_idx++] = key;
 8000574:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000578:	b293      	uxth	r3, r2
 800057a:	3301      	adds	r3, #1
 800057c:	b29b      	uxth	r3, r3
 800057e:	83fb      	strh	r3, [r7, #30]
 8000580:	4613      	mov	r3, r2
 8000582:	f107 0220 	add.w	r2, r7, #32
 8000586:	4413      	add	r3, r2
 8000588:	7dfa      	ldrb	r2, [r7, #23]
 800058a:	f803 2c14 	strb.w	r2, [r3, #-20]
			HD44780_PrintStr(pw);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f981 	bl	800089a <HD44780_PrintStr>
 8000598:	e01b      	b.n	80005d2 <changePassword+0xb6>
		}else if(key == '*')
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	2b2a      	cmp	r3, #42	; 0x2a
 800059e:	d1d3      	bne.n	8000548 <changePassword+0x2c>
		{
			for(int i = 0 ; i < 6; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	e00b      	b.n	80005be <changePassword+0xa2>
				original_password[i] = pw[i];
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	440a      	add	r2, r1
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
			for(int i = 0 ; i < 6; i++)
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	3301      	adds	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	ddf0      	ble.n	80005a6 <changePassword+0x8a>
			original_password[6] = '\0';
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3306      	adds	r3, #6
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
			return 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e001      	b.n	80005d4 <changePassword+0xb8>
			continue;
 80005d0:	bf00      	nop
		while((key = scan_Rx()) == 255) ;
 80005d2:	e7b9      	b.n	8000548 <changePassword+0x2c>
		}
	}

	return 0;
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	080046a8 	.word	0x080046a8
 80005e0:	080046b8 	.word	0x080046b8

080005e4 <home>:
void home(char* str)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HD44780_Init(2);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 f821 	bl	8000634 <HD44780_Init>
	HD44780_PrintStr(str);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f951 	bl	800089a <HD44780_PrintStr>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <finish_system>:
void finish_system(char* msg)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HD44780_Clear();
 8000608:	f000 f89e 	bl	8000748 <HD44780_Clear>
	HD44780_PrintStr(msg);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f944 	bl	800089a <HD44780_PrintStr>
	HAL_Delay(2000);
 8000612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000616:	f000 ffb7 	bl	8001588 <HAL_Delay>
	HD44780_Clear();
 800061a:	f000 f895 	bl	8000748 <HD44780_Clear>
	HD44780_Home();
 800061e:	f000 f89e 	bl	800075e <HD44780_Home>
	HD44780_NoBacklight();
 8000622:	f000 f94f 	bl	80008c4 <HD44780_NoBacklight>
	HD44780_NoDisplay();
 8000626:	f000 f8d7 	bl	80007d8 <HD44780_NoDisplay>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]

  dpRows = rows;
 800063e:	4a3b      	ldr	r2, [pc, #236]	; (800072c <HD44780_Init+0xf8>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000644:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <HD44780_Init+0xfc>)
 8000646:	2208      	movs	r2, #8
 8000648:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <HD44780_Init+0x100>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000650:	4b36      	ldr	r3, [pc, #216]	; (800072c <HD44780_Init+0xf8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d907      	bls.n	8000668 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <HD44780_Init+0x100>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <HD44780_Init+0x100>)
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e006      	b.n	8000676 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HD44780_Init+0x100>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <HD44780_Init+0x100>)
 8000674:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000676:	f000 f9b9 	bl	80009ec <DelayInit>
  HAL_Delay(50);
 800067a:	2032      	movs	r0, #50	; 0x32
 800067c:	f000 ff84 	bl	8001588 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HD44780_Init+0xfc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f977 	bl	8000978 <ExpanderWrite>
  HAL_Delay(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068e:	f000 ff7b 	bl	8001588 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000692:	2030      	movs	r0, #48	; 0x30
 8000694:	f000 f95f 	bl	8000956 <Write4Bits>
  DelayUS(4500);
 8000698:	f241 1094 	movw	r0, #4500	; 0x1194
 800069c:	f000 f9ce 	bl	8000a3c <DelayUS>

  Write4Bits(0x03 << 4);
 80006a0:	2030      	movs	r0, #48	; 0x30
 80006a2:	f000 f958 	bl	8000956 <Write4Bits>
  DelayUS(4500);
 80006a6:	f241 1094 	movw	r0, #4500	; 0x1194
 80006aa:	f000 f9c7 	bl	8000a3c <DelayUS>

  Write4Bits(0x03 << 4);
 80006ae:	2030      	movs	r0, #48	; 0x30
 80006b0:	f000 f951 	bl	8000956 <Write4Bits>
  DelayUS(4500);
 80006b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80006b8:	f000 f9c0 	bl	8000a3c <DelayUS>

  Write4Bits(0x02 << 4);
 80006bc:	2020      	movs	r0, #32
 80006be:	f000 f94a 	bl	8000956 <Write4Bits>
  DelayUS(100);
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f000 f9ba 	bl	8000a3c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <HD44780_Init+0x100>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f902 	bl	80008dc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HD44780_Init+0x104>)
 80006da:	2204      	movs	r2, #4
 80006dc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80006de:	f000 f891 	bl	8000804 <HD44780_Display>
  HD44780_Clear();
 80006e2:	f000 f831 	bl	8000748 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <HD44780_Init+0x108>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HD44780_Init+0x108>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f8f0 	bl	80008dc <SendCommand>
  DelayUS(4500);
 80006fc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000700:	f000 f99c 	bl	8000a3c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000704:	490e      	ldr	r1, [pc, #56]	; (8000740 <HD44780_Init+0x10c>)
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f892 	bl	8000830 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800070c:	490d      	ldr	r1, [pc, #52]	; (8000744 <HD44780_Init+0x110>)
 800070e:	2001      	movs	r0, #1
 8000710:	f000 f88e 	bl	8000830 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000714:	f000 f823 	bl	800075e <HD44780_Home>
  set_cursor_pos(-1, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	f7ff fe9b 	bl	8000458 <set_cursor_pos>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c2 	.word	0x200000c2
 8000730:	200000c4 	.word	0x200000c4
 8000734:	200000c0 	.word	0x200000c0
 8000738:	200000c3 	.word	0x200000c3
 800073c:	200000c1 	.word	0x200000c1
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008

08000748 <HD44780_Clear>:

void HD44780_Clear()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);	// LCD_CLEARDISPLAY = 0x01
 800074c:	2001      	movs	r0, #1
 800074e:	f000 f8c5 	bl	80008dc <SendCommand>
  DelayUS(2000);
 8000752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000756:	f000 f971 	bl	8000a3c <DelayUS>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <HD44780_Home>:

void HD44780_Home()
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000762:	2002      	movs	r0, #2
 8000764:	f000 f8ba 	bl	80008dc <SendCommand>
  DelayUS(2000);
 8000768:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800076c:	f000 f966 	bl	8000a3c <DelayUS>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HD44780_SetCursor+0x5c>)
 8000786:	f107 0408 	add.w	r4, r7, #8
 800078a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800078c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HD44780_SetCursor+0x60>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d303      	bcc.n	80007a2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HD44780_SetCursor+0x60>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	f107 0218 	add.w	r2, r7, #24
 80007aa:	4413      	add	r3, r2
 80007ac:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f88a 	bl	80008dc <SendCommand>
}
 80007c8:	bf00      	nop
 80007ca:	371c      	adds	r7, #28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	080046c4 	.word	0x080046c4
 80007d4:	200000c2 	.word	0x200000c2

080007d8 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HD44780_NoDisplay+0x28>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	f023 0304 	bic.w	r3, r3, #4
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HD44780_NoDisplay+0x28>)
 80007e8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HD44780_NoDisplay+0x28>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	f043 0308 	orr.w	r3, r3, #8
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f871 	bl	80008dc <SendCommand>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000c3 	.word	0x200000c3

08000804 <HD44780_Display>:

void HD44780_Display()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HD44780_Display+0x28>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HD44780_Display+0x28>)
 8000814:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HD44780_Display+0x28>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f85b 	bl	80008dc <SendCommand>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000c3 	.word	0x200000c3

08000830 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	b25b      	sxtb	r3, r3
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	b25b      	sxtb	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f842 	bl	80008dc <SendCommand>
  for (int i=0; i<8; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e009      	b.n	8000872 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f846 	bl	80008f8 <SendChar>
  for (int i=0; i<8; i++)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b07      	cmp	r3, #7
 8000876:	ddf2      	ble.n	800085e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f833 	bl	80008f8 <SendChar>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80008a2:	e006      	b.n	80008b2 <HD44780_PrintStr+0x18>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	607a      	str	r2, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f823 	bl	80008f8 <SendChar>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f4      	bne.n	80008a4 <HD44780_PrintStr+0xa>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HD44780_NoBacklight+0x14>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f852 	bl	8000978 <ExpanderWrite>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000c4 	.word	0x200000c4

080008dc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f812 	bl	8000914 <Send>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f804 	bl	8000914 <Send>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	4613      	mov	r3, r2
 8000922:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;		// 0
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;	// decimal : 16, hexadecimal : 0x20 = 20H
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	4313      	orrs	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f80b 	bl	8000956 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000940:	7bba      	ldrb	r2, [r7, #14]
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	4313      	orrs	r3, r2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f804 	bl	8000956 <Write4Bits>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f808 	bl	8000978 <ExpanderWrite>
  PulseEnable(value);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f820 	bl	80009b0 <PulseEnable>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af02      	add	r7, sp, #8
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight; // 0 | 0x08
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <ExpanderWrite+0x30>)
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4313      	orrs	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800098e:	f107 020f 	add.w	r2, r7, #15
 8000992:	230a      	movs	r3, #10
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	214e      	movs	r1, #78	; 0x4e
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <ExpanderWrite+0x34>)
 800099c:	f001 fa08 	bl	8001db0 <HAL_I2C_Master_Transmit>
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000c4 	.word	0x200000c4
 80009ac:	200000c8 	.word	0x200000c8

080009b0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffd8 	bl	8000978 <ExpanderWrite>
  DelayUS(20);
 80009c8:	2014      	movs	r0, #20
 80009ca:	f000 f837 	bl	8000a3c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f023 0304 	bic.w	r3, r3, #4
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffce 	bl	8000978 <ExpanderWrite>
  DelayUS(20);
 80009dc:	2014      	movs	r0, #20
 80009de:	f000 f82d 	bl	8000a3c <DelayUS>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <DelayInit>:

static void DelayInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <DelayInit+0x48>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <DelayInit+0x48>)
 80009f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009fa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <DelayInit+0x48>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <DelayInit+0x48>)
 8000a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a06:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <DelayInit+0x4c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <DelayInit+0x4c>)
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <DelayInit+0x4c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <DelayInit+0x4c>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <DelayInit+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000a26:	bf00      	nop
  __ASM volatile ("NOP");
 8000a28:	bf00      	nop
  __ASM volatile ("NOP");
 8000a2a:	bf00      	nop
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000edf0 	.word	0xe000edf0
 8000a38:	e0001000 	.word	0xe0001000

08000a3c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <DelayUS+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <DelayUS+0x44>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9a      	lsrs	r2, r3, #18
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <DelayUS+0x48>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <DelayUS+0x48>)
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f6      	bhi.n	8000a5e <DelayUS+0x22>
}
 8000a70:	bf00      	nop
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000018 	.word	0x20000018
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	e0001000 	.word	0xe0001000

08000a88 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0a      	cmp	r3, #10
 8000a94:	d106      	bne.n	8000aa4 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 8000a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__io_putchar+0x34>)
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <__io_putchar+0x38>)
 8000aa0:	f002 fce3 	bl	800346a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000aa4:	1d39      	adds	r1, r7, #4
 8000aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <__io_putchar+0x38>)
 8000aae:	f002 fcdc 	bl	800346a <HAL_UART_Transmit>

	return ch;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	080046d4 	.word	0x080046d4
 8000ac0:	20000164 	.word	0x20000164

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fcfb 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f92b 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f000 fa11 	bl	8000ef8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ad6:	f000 f9e5 	bl	8000ea4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ada:	f000 f967 	bl	8000dac <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ade:	f000 f993 	bl	8000e08 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  char* str = "Enter Password";
 8000ae2:	4b82      	ldr	r3, [pc, #520]	; (8000cec <main+0x228>)
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  short isTextRemoved = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	86fb      	strh	r3, [r7, #54]	; 0x36
  char btn_key;									// a character that user press([1~9], [A-D])
  char input_key[2] = "\0";
 8000aea:	4b81      	ldr	r3, [pc, #516]	; (8000cf0 <main+0x22c>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	83bb      	strh	r3, [r7, #28]
  char pw[MAX_CHAR_SIZE] = "\0";					// password that has input_numkey
 8000af0:	4b7f      	ldr	r3, [pc, #508]	; (8000cf0 <main+0x22c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	81bb      	strh	r3, [r7, #12]
 8000af6:	f107 030e 	add.w	r3, r7, #14
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	819a      	strh	r2, [r3, #12]
  short long_press_cnt = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	817b      	strh	r3, [r7, #10]
  char password[PW_MAX_SIZE] = "123456\0";		// door-lock password
 8000b08:	4a7a      	ldr	r2, [pc, #488]	; (8000cf4 <main+0x230>)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b10:	6018      	str	r0, [r3, #0]
 8000b12:	3304      	adds	r3, #4
 8000b14:	8019      	strh	r1, [r3, #0]
 8000b16:	3302      	adds	r3, #2
 8000b18:	0c0a      	lsrs	r2, r1, #16
 8000b1a:	701a      	strb	r2, [r3, #0]
  short change_pw_key_pressed = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	857b      	strh	r3, [r7, #42]	; 0x2a
  int timeout;
  home(str);
 8000b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b22:	f7ff fd5f 	bl	80005e4 <home>


  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000b26:	4874      	ldr	r0, [pc, #464]	; (8000cf8 <main+0x234>)
 8000b28:	f002 f8b4 	bl	8002c94 <HAL_TIM_Base_Start_IT>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <main+0x72>
  {
	  /* Starting Error */
	  Error_Handler();
 8000b32:	f000 fadd 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  short pw_idx = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	86bb      	strh	r3, [r7, #52]	; 0x34
  while (1)
  {
	  /* time out */
	  timeout = ((remainTime_idx < 0) ? 0x10 : 0x00);
 8000b3a:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <main+0x238>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da01      	bge.n	8000b46 <main+0x82>
 8000b42:	2310      	movs	r3, #16
 8000b44:	e000      	b.n	8000b48 <main+0x84>
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24

	  /* input key and check correct input key */
	  if( (btn_key = scan_Rx()) == 255)
 8000b4a:	f7ff fb09 	bl	8000160 <scan_Rx>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b58:	2bff      	cmp	r3, #255	; 0xff
 8000b5a:	d105      	bne.n	8000b68 <main+0xa4>
	  {
		  /* if time is 0 */
		  if(!(timeout & 0x10))
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d160      	bne.n	8000c28 <main+0x164>
		  {
			  continue;
 8000b66:	e0bf      	b.n	8000ce8 <main+0x224>
			  goto checkPw;
		  }
	  }

	  // 비밀번호 변경 키 -> 2초간 Long Press
	  if(btn_key == '#' && !running_pw)		// 비밀번호 입력 화면에서는 변경 기능 사용할 수 없음
 8000b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b6c:	2b23      	cmp	r3, #35	; 0x23
 8000b6e:	d125      	bne.n	8000bbc <main+0xf8>
 8000b70:	4b63      	ldr	r3, [pc, #396]	; (8000d00 <main+0x23c>)
 8000b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d120      	bne.n	8000bbc <main+0xf8>
	  {
		  short is_longPress = check_change_pw_key_pressed(&long_press_cnt, &gp_timer);
 8000b7a:	f107 030a 	add.w	r3, r7, #10
 8000b7e:	4961      	ldr	r1, [pc, #388]	; (8000d04 <main+0x240>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fc93 	bl	80004ac <check_change_pw_key_pressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	843b      	strh	r3, [r7, #32]
		  if(is_longPress)
 8000b8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80a9 	beq.w	8000ce6 <main+0x222>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
		  {
			  __disable_irq();
			  if(changePassword(password, PW_MAX_SIZE))
 8000b96:	463b      	mov	r3, r7
 8000b98:	2107      	movs	r1, #7
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fcbe 	bl	800051c <changePassword>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d005      	beq.n	8000bb2 <main+0xee>
			  {
				  printf("success password %s\n", password);
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4857      	ldr	r0, [pc, #348]	; (8000d08 <main+0x244>)
 8000bac:	f002 fdfa 	bl	80037a4 <iprintf>
 8000bb0:	e002      	b.n	8000bb8 <main+0xf4>
			  }else
			  {
				  printf("failed password\n");
 8000bb2:	4856      	ldr	r0, [pc, #344]	; (8000d0c <main+0x248>)
 8000bb4:	f002 fe6a 	bl	800388c <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bb8:	b662      	cpsie	i
			  }
			  __enable_irq();
		  }
		  continue;
 8000bba:	e094      	b.n	8000ce6 <main+0x222>
	  }

	  /* set isTextRemoved when condition is true */
	  if( (btn_key != 255 && btn_key != '-') && (isTextRemoved == 0x00) )
 8000bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bc0:	2bff      	cmp	r3, #255	; 0xff
 8000bc2:	d009      	beq.n	8000bd8 <main+0x114>
 8000bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bc8:	2b2d      	cmp	r3, #45	; 0x2d
 8000bca:	d005      	beq.n	8000bd8 <main+0x114>
 8000bcc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <main+0x114>
	  {
		  isTextRemoved = 0x01;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	86fb      	strh	r3, [r7, #54]	; 0x36
	  }
//	  isStart_inputPw(btn_key, &isTextRemoved, btn_key);
	  /* if "Enter Password" string is removed 딱 한 번 실행되는 블록*/
	  if(isTextRemoved == 0x01)
 8000bd8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d10d      	bne.n	8000bfc <main+0x138>
	  {
		  HD44780_Clear();
 8000be0:	f7ff fdb2 	bl	8000748 <HD44780_Clear>
		  isTextRemoved = -1;
 8000be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be8:	86fb      	strh	r3, [r7, #54]	; 0x36
		  enable_inputPw = 0x01;
 8000bea:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <main+0x24c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	801a      	strh	r2, [r3, #0]

		  set_remain_time_progress();
 8000bf0:	f7ff fc04 	bl	80003fc <set_remain_time_progress>
		  gTimerCnt = 999;
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <main+0x250>)
 8000bf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfa:	601a      	str	r2, [r3, #0]
	  }

	  /* print keypad value into i2c lcd */
	  if(enable_inputPw)
 8000bfc:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <main+0x24c>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d068      	beq.n	8000cd8 <main+0x214>
	  {

		  input_key[0] = btn_key;
 8000c06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c0a:	773b      	strb	r3, [r7, #28]
//				  pw[pw_idx--] = NULL;
//			  }
//			  continue;
//		  }
		  /* check time out */
		  int checkPw = (((!strcmp(input_key, "*")) == 1) ? 0x01 : 0x00);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4941      	ldr	r1, [pc, #260]	; (8000d18 <main+0x254>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fa9a 	bl	800014c <strcmp>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
 8000c26:	e000      	b.n	8000c2a <main+0x166>
			  goto checkPw;
 8000c28:	bf00      	nop
	  checkPw:
		  if(checkPw || timeout)
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <main+0x172>
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d02f      	beq.n	8000c96 <main+0x1d2>
		  {

			  if(checkPw & 0x01)
 8000c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d007      	beq.n	8000c50 <main+0x18c>
			  {
				  checkPassword(pw, password);
 8000c40:	463a      	mov	r2, r7
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fbb5 	bl	80003b8 <checkPassword>
 8000c4e:	e00e      	b.n	8000c6e <main+0x1aa>
			  }else if(timeout & 0x10)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d009      	beq.n	8000c6e <main+0x1aa>
			  {
				  printf("timeout\n");
 8000c5a:	4830      	ldr	r0, [pc, #192]	; (8000d1c <main+0x258>)
 8000c5c:	f002 fe16 	bl	800388c <puts>
				  checkPassword(pw, password);
 8000c60:	463a      	mov	r2, r7
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fba5 	bl	80003b8 <checkPassword>
			  }
			  HD44780_Clear();
 8000c6e:	f7ff fd6b 	bl	8000748 <HD44780_Clear>
			  enable_remainTime_progress = 0;
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <main+0x25c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	801a      	strh	r2, [r3, #0]
			  set_remain_time_progress();
 8000c78:	f7ff fbc0 	bl	80003fc <set_remain_time_progress>
			  remainTime_idx = 10;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <main+0x238>)
 8000c7e:	220a      	movs	r2, #10
 8000c80:	601a      	str	r2, [r3, #0]
			  pw_idx = -1;
 8000c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c86:	86bb      	strh	r3, [r7, #52]	; 0x34

			  sprintf(pw, "%s", '\0');
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 fe04 	bl	800389c <strcpy>
 8000c94:	e020      	b.n	8000cd8 <main+0x214>
		  }else
		  {
			  /* write */
			  if(pw_idx < MAX_CHAR_SIZE && strcmp(input_key,"#"))
 8000c96:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000c9a:	2b0f      	cmp	r3, #15
 8000c9c:	dc1c      	bgt.n	8000cd8 <main+0x214>
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4920      	ldr	r1, [pc, #128]	; (8000d24 <main+0x260>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fa51 	bl	800014c <strcmp>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d013      	beq.n	8000cd8 <main+0x214>
			  {
				  pw[pw_idx] = btn_key;
 8000cb0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000cb4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000cb8:	4413      	add	r3, r2
 8000cba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cbe:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  set_cursor_pos(pw_idx, 0);
 8000cc2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fbc5 	bl	8000458 <set_cursor_pos>
				  HD44780_PrintStr(input_key);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fde1 	bl	800089a <HD44780_PrintStr>
			  }
		  }
	  }
	  pw_idx++;
 8000cd8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000ce4:	e729      	b.n	8000b3a <main+0x76>
		  continue;
 8000ce6:	bf00      	nop
	  timeout = ((remainTime_idx < 0) ? 0x10 : 0x00);
 8000ce8:	e727      	b.n	8000b3a <main+0x76>
 8000cea:	bf00      	nop
 8000cec:	080046d8 	.word	0x080046d8
 8000cf0:	08004720 	.word	0x08004720
 8000cf4:	08004724 	.word	0x08004724
 8000cf8:	2000011c 	.word	0x2000011c
 8000cfc:	20000014 	.word	0x20000014
 8000d00:	200000b0 	.word	0x200000b0
 8000d04:	200000ae 	.word	0x200000ae
 8000d08:	080046e8 	.word	0x080046e8
 8000d0c:	08004700 	.word	0x08004700
 8000d10:	200000ac 	.word	0x200000ac
 8000d14:	20000010 	.word	0x20000010
 8000d18:	08004710 	.word	0x08004710
 8000d1c:	08004714 	.word	0x08004714
 8000d20:	200000a4 	.word	0x200000a4
 8000d24:	0800471c 	.word	0x0800471c

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	; 0x40
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	2228      	movs	r2, #40	; 0x28
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fd2c 	bl	8003794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d52:	2310      	movs	r3, #16
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d5e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fb27 	bl	80023bc <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d74:	f000 f9bc 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2102      	movs	r1, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fd92 	bl	80028bc <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d9e:	f000 f9a7 	bl	80010f0 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3740      	adds	r7, #64	; 0x40
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <MX_I2C1_Init+0x54>)
 8000db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000db8:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <MX_I2C1_Init+0x58>)
 8000dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dea:	f000 fea9 	bl	8001b40 <HAL_I2C_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000df4:	f000 f97c 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000c8 	.word	0x200000c8
 8000e00:	40005400 	.word	0x40005400
 8000e04:	000186a0 	.word	0x000186a0

08000e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <MX_TIM3_Init+0x98>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e2c:	223f      	movs	r2, #63	; 0x3f
 8000e2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e4a:	4814      	ldr	r0, [pc, #80]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e4c:	f001 fed2 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 f94b 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e68:	f002 f86e 	bl	8002f48 <HAL_TIM_ConfigClockSource>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e72:	f000 f93d 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_TIM3_Init+0x94>)
 8000e84:	f002 fa34 	bl	80032f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e8e:	f000 f92f 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000011c 	.word	0x2000011c
 8000ea0:	40000400 	.word	0x40000400

08000ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <MX_USART2_UART_Init+0x50>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000edc:	f002 fa78 	bl	80033d0 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ee6:	f000 f903 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000164 	.word	0x20000164
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	4b4f      	ldr	r3, [pc, #316]	; (800104c <MX_GPIO_Init+0x154>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	; (800104c <MX_GPIO_Init+0x154>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <MX_GPIO_Init+0x154>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	4b49      	ldr	r3, [pc, #292]	; (800104c <MX_GPIO_Init+0x154>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a48      	ldr	r2, [pc, #288]	; (800104c <MX_GPIO_Init+0x154>)
 8000f2a:	f043 0320 	orr.w	r3, r3, #32
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b46      	ldr	r3, [pc, #280]	; (800104c <MX_GPIO_Init+0x154>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0320 	and.w	r3, r3, #32
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <MX_GPIO_Init+0x154>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a42      	ldr	r2, [pc, #264]	; (800104c <MX_GPIO_Init+0x154>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b40      	ldr	r3, [pc, #256]	; (800104c <MX_GPIO_Init+0x154>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_GPIO_Init+0x154>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a3c      	ldr	r2, [pc, #240]	; (800104c <MX_GPIO_Init+0x154>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_GPIO_Init+0x154>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|R2_Pin|R3_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000f72:	4837      	ldr	r0, [pc, #220]	; (8001050 <MX_GPIO_Init+0x158>)
 8000f74:	f000 fda9 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4835      	ldr	r0, [pc, #212]	; (8001054 <MX_GPIO_Init+0x15c>)
 8000f80:	f000 fda3 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4833      	ldr	r0, [pc, #204]	; (8001058 <MX_GPIO_Init+0x160>)
 8000f8a:	f000 fd9e 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f94:	4b31      	ldr	r3, [pc, #196]	; (800105c <MX_GPIO_Init+0x164>)
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482d      	ldr	r0, [pc, #180]	; (8001058 <MX_GPIO_Init+0x160>)
 8000fa4:	f000 fc20 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin R2_Pin R3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|R2_Pin|R3_Pin;
 8000fa8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4823      	ldr	r0, [pc, #140]	; (8001050 <MX_GPIO_Init+0x158>)
 8000fc2:	f000 fc11 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 8000fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <MX_GPIO_Init+0x15c>)
 8000fe0:	f000 fc02 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_Pin */
  GPIO_InitStruct.Pin = R4_Pin;
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R4_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4817      	ldr	r0, [pc, #92]	; (8001058 <MX_GPIO_Init+0x160>)
 8000ffc:	f000 fbf4 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4619      	mov	r1, r3
 8001014:	480e      	ldr	r0, [pc, #56]	; (8001050 <MX_GPIO_Init+0x158>)
 8001016:	f000 fbe7 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin|C2_Pin;
 800101a:	2338      	movs	r3, #56	; 0x38
 800101c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_GPIO_Init+0x15c>)
 800102e:	f000 fbdb 	bl	80017e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2028      	movs	r0, #40	; 0x28
 8001038:	f000 fb9f 	bl	800177a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800103c:	2028      	movs	r0, #40	; 0x28
 800103e:	f000 fbb8 	bl	80017b2 <HAL_NVIC_EnableIRQ>

}
 8001042:	bf00      	nop
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800
 8001054:	40010c00 	.word	0x40010c00
 8001058:	40011000 	.word	0x40011000
 800105c:	10110000 	.word	0x10110000

08001060 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	gp_timer++;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001072:	801a      	strh	r2, [r3, #0]
	if(enable_inputPw)
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	b21b      	sxth	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d027      	beq.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		gTimerCnt++;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001086:	6013      	str	r3, [r2, #0]
		if(gTimerCnt == 1000)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			if(remainTime_idx >= 0 && enable_remainTime_progress)
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db16      	blt.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x68>
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d011      	beq.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				running_pw = 1;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	801a      	strh	r2, [r3, #0]
				decrease_remainTime(remainTime_idx);
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9bf 	bl	8000434 <decrease_remainTime>
				remainTime_idx--;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010be:	6013      	str	r3, [r2, #0]
				gTimerCnt = 0;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			}else{
				running_pw = 0;
			}
		}
	}
}
 80010c6:	e002      	b.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x6e>
				running_pw = 0;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	801a      	strh	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000ae 	.word	0x200000ae
 80010dc:	200000ac 	.word	0x200000ac
 80010e0:	20000010 	.word	0x20000010
 80010e4:	20000014 	.word	0x20000014
 80010e8:	200000a4 	.word	0x200000a4
 80010ec:	200000b0 	.word	0x200000b0

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_MspInit+0x5c>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <HAL_MspInit+0x5c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_MspInit+0x5c>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x5c>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x5c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x5c>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_MspInit+0x60>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_MspInit+0x60>)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000

08001160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_I2C_MspInit+0x90>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d132      	bne.n	80011e6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_I2C_MspInit+0x94>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_I2C_MspInit+0x94>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_I2C_MspInit+0x94>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001198:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <HAL_I2C_MspInit+0x98>)
 80011ae:	f000 fb1b 	bl	80017e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_I2C_MspInit+0x9c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
 80011c8:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_I2C_MspInit+0x9c>)
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_I2C_MspInit+0x94>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_I2C_MspInit+0x94>)
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_I2C_MspInit+0x94>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40005400 	.word	0x40005400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	40010000 	.word	0x40010000

08001200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_TIM_Base_MspInit+0x44>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d113      	bne.n	800123a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	201d      	movs	r0, #29
 8001230:	f000 faa3 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001234:	201d      	movs	r0, #29
 8001236:	f000 fabc 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40000400 	.word	0x40000400
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <HAL_UART_MspInit+0x70>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d123      	bne.n	80012b4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_UART_MspInit+0x74>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_UART_MspInit+0x74>)
 8001272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001276:	61d3      	str	r3, [r2, #28]
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_MspInit+0x74>)
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_UART_MspInit+0x74>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_UART_MspInit+0x74>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_UART_MspInit+0x74>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800129c:	230c      	movs	r3, #12
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_UART_MspInit+0x78>)
 80012b0:	f000 fa9a 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40004400 	.word	0x40004400
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010800 	.word	0x40010800

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <HardFault_Handler+0x4>

080012da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <BusFault_Handler+0x4>

080012e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <UsageFault_Handler+0x4>

080012ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f91c 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM3_IRQHandler+0x10>)
 8001322:	f001 fd09 	bl	8002d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000011c 	.word	0x2000011c

08001330 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001334:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001338:	f000 fbe0 	bl	8001afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
	}

return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e009      	b.n	80013a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fb77 	bl	8000a88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf1      	blt.n	800138c <_write+0x12>
	}
	return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_close>:

int _close(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d8:	605a      	str	r2, [r3, #4]
	return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <_isatty>:

int _isatty(int file)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	return 1;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
	return 0;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x50>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x16>
		heap_end = &end;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <_sbrk+0x50>)
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <_sbrk+0x54>)
 8001428:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <_sbrk+0x50>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <_sbrk+0x50>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	466a      	mov	r2, sp
 800143a:	4293      	cmp	r3, r2
 800143c:	d907      	bls.n	800144e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800143e:	f002 f97f 	bl	8003740 <__errno>
 8001442:	4602      	mov	r2, r0
 8001444:	230c      	movs	r3, #12
 8001446:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	e006      	b.n	800145c <_sbrk+0x48>
	}

	heap_end += incr;
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <_sbrk+0x50>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a03      	ldr	r2, [pc, #12]	; (8001464 <_sbrk+0x50>)
 8001458:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200000b4 	.word	0x200000b4
 8001468:	200001b0 	.word	0x200001b0

0800146c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149e:	f7ff ffe5 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a2:	f002 f953 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a6:	f7ff fb0d 	bl	8000ac4 <main>
  bx lr
 80014aa:	4770      	bx	lr
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80014b4:	080047f8 	.word	0x080047f8
  ldr r2, =_sbss
 80014b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80014bc:	200001b0 	.word	0x200001b0

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f945 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fe0c 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f95d 	bl	80017ce <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f925 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000018 	.word	0x20000018
 8001548:	20000020 	.word	0x20000020
 800154c:	2000001c 	.word	0x2000001c

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <HAL_IncTick+0x20>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000020 	.word	0x20000020
 8001570:	200001a8 	.word	0x200001a8

08001574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	200001a8 	.word	0x200001a8

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fff0 	bl	8001574 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_Delay+0x40>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffe0 	bl	8001574 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000020 	.word	0x20000020

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <__NVIC_EnableIRQ+0x34>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff90 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff2d 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff42 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff35 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b08b      	sub	sp, #44	; 0x2c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	e127      	b.n	8001a4c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017fc:	2201      	movs	r2, #1
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8116 	bne.w	8001a46 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b12      	cmp	r3, #18
 8001820:	d034      	beq.n	800188c <HAL_GPIO_Init+0xa4>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d80d      	bhi.n	8001842 <HAL_GPIO_Init+0x5a>
 8001826:	2b02      	cmp	r3, #2
 8001828:	d02b      	beq.n	8001882 <HAL_GPIO_Init+0x9a>
 800182a:	2b02      	cmp	r3, #2
 800182c:	d804      	bhi.n	8001838 <HAL_GPIO_Init+0x50>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d031      	beq.n	8001896 <HAL_GPIO_Init+0xae>
 8001832:	2b01      	cmp	r3, #1
 8001834:	d01c      	beq.n	8001870 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001836:	e048      	b.n	80018ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001838:	2b03      	cmp	r3, #3
 800183a:	d043      	beq.n	80018c4 <HAL_GPIO_Init+0xdc>
 800183c:	2b11      	cmp	r3, #17
 800183e:	d01b      	beq.n	8001878 <HAL_GPIO_Init+0x90>
          break;
 8001840:	e043      	b.n	80018ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001842:	4a89      	ldr	r2, [pc, #548]	; (8001a68 <HAL_GPIO_Init+0x280>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d026      	beq.n	8001896 <HAL_GPIO_Init+0xae>
 8001848:	4a87      	ldr	r2, [pc, #540]	; (8001a68 <HAL_GPIO_Init+0x280>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d806      	bhi.n	800185c <HAL_GPIO_Init+0x74>
 800184e:	4a87      	ldr	r2, [pc, #540]	; (8001a6c <HAL_GPIO_Init+0x284>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d020      	beq.n	8001896 <HAL_GPIO_Init+0xae>
 8001854:	4a86      	ldr	r2, [pc, #536]	; (8001a70 <HAL_GPIO_Init+0x288>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01d      	beq.n	8001896 <HAL_GPIO_Init+0xae>
          break;
 800185a:	e036      	b.n	80018ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800185c:	4a85      	ldr	r2, [pc, #532]	; (8001a74 <HAL_GPIO_Init+0x28c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0xae>
 8001862:	4a85      	ldr	r2, [pc, #532]	; (8001a78 <HAL_GPIO_Init+0x290>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d016      	beq.n	8001896 <HAL_GPIO_Init+0xae>
 8001868:	4a84      	ldr	r2, [pc, #528]	; (8001a7c <HAL_GPIO_Init+0x294>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0xae>
          break;
 800186e:	e02c      	b.n	80018ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e028      	b.n	80018ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	3304      	adds	r3, #4
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e023      	b.n	80018ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	3308      	adds	r3, #8
 8001888:	623b      	str	r3, [r7, #32]
          break;
 800188a:	e01e      	b.n	80018ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	330c      	adds	r3, #12
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e019      	b.n	80018ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189e:	2304      	movs	r3, #4
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e012      	b.n	80018ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	611a      	str	r2, [r3, #16]
          break;
 80018b6:	e008      	b.n	80018ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	615a      	str	r2, [r3, #20]
          break;
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d801      	bhi.n	80018d4 <HAL_GPIO_Init+0xec>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	e001      	b.n	80018d8 <HAL_GPIO_Init+0xf0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3304      	adds	r3, #4
 80018d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2bff      	cmp	r3, #255	; 0xff
 80018de:	d802      	bhi.n	80018e6 <HAL_GPIO_Init+0xfe>
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x104>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	3b08      	subs	r3, #8
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	210f      	movs	r1, #15
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	6a39      	ldr	r1, [r7, #32]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8096 	beq.w	8001a46 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800191a:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_GPIO_Init+0x298>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	4a58      	ldr	r2, [pc, #352]	; (8001a80 <HAL_GPIO_Init+0x298>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6193      	str	r3, [r2, #24]
 8001926:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HAL_GPIO_Init+0x298>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001932:	4a54      	ldr	r2, [pc, #336]	; (8001a84 <HAL_GPIO_Init+0x29c>)
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_GPIO_Init+0x2a0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x19e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4a      	ldr	r2, [pc, #296]	; (8001a8c <HAL_GPIO_Init+0x2a4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x19a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a49      	ldr	r2, [pc, #292]	; (8001a90 <HAL_GPIO_Init+0x2a8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x196>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <HAL_GPIO_Init+0x2ac>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x192>
 8001976:	2303      	movs	r3, #3
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x1a0>
 800197a:	2304      	movs	r3, #4
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x1a0>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x1a0>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x1a0>
 8001986:	2300      	movs	r3, #0
 8001988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001998:	493a      	ldr	r1, [pc, #232]	; (8001a84 <HAL_GPIO_Init+0x29c>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4938      	ldr	r1, [pc, #224]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4933      	ldr	r1, [pc, #204]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	492e      	ldr	r1, [pc, #184]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
 80019e6:	e006      	b.n	80019f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	4929      	ldr	r1, [pc, #164]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	4924      	ldr	r1, [pc, #144]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
 8001a0e:	e006      	b.n	8001a1e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	491f      	ldr	r1, [pc, #124]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	491a      	ldr	r1, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60cb      	str	r3, [r1, #12]
 8001a36:	e006      	b.n	8001a46 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4915      	ldr	r1, [pc, #84]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f47f aed0 	bne.w	80017fc <HAL_GPIO_Init+0x14>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	372c      	adds	r7, #44	; 0x2c
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	10210000 	.word	0x10210000
 8001a6c:	10110000 	.word	0x10110000
 8001a70:	10120000 	.word	0x10120000
 8001a74:	10310000 	.word	0x10310000
 8001a78:	10320000 	.word	0x10320000
 8001a7c:	10220000 	.word	0x10220000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	40010c00 	.word	0x40010c00
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40011400 	.word	0x40011400
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ada:	787b      	ldrb	r3, [r7, #1]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f806 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e11f      	b.n	8001d92 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fafa 	bl	8001160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ba4:	f000 ffe0 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8001ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a7b      	ldr	r2, [pc, #492]	; (8001d9c <HAL_I2C_Init+0x25c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d807      	bhi.n	8001bc4 <HAL_I2C_Init+0x84>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_I2C_Init+0x260>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	bf94      	ite	ls
 8001bbc:	2301      	movls	r3, #1
 8001bbe:	2300      	movhi	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	e006      	b.n	8001bd2 <HAL_I2C_Init+0x92>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4a77      	ldr	r2, [pc, #476]	; (8001da4 <HAL_I2C_Init+0x264>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	bf94      	ite	ls
 8001bcc:	2301      	movls	r3, #1
 8001bce:	2300      	movhi	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0db      	b.n	8001d92 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <HAL_I2C_Init+0x268>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9b      	lsrs	r3, r3, #18
 8001be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a64      	ldr	r2, [pc, #400]	; (8001d9c <HAL_I2C_Init+0x25c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d802      	bhi.n	8001c14 <HAL_I2C_Init+0xd4>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3301      	adds	r3, #1
 8001c12:	e009      	b.n	8001c28 <HAL_I2C_Init+0xe8>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	4a63      	ldr	r2, [pc, #396]	; (8001dac <HAL_I2C_Init+0x26c>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	099b      	lsrs	r3, r3, #6
 8001c26:	3301      	adds	r3, #1
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4956      	ldr	r1, [pc, #344]	; (8001d9c <HAL_I2C_Init+0x25c>)
 8001c44:	428b      	cmp	r3, r1
 8001c46:	d80d      	bhi.n	8001c64 <HAL_I2C_Init+0x124>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1e59      	subs	r1, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	bf38      	it	cc
 8001c60:	2304      	movcc	r3, #4
 8001c62:	e04f      	b.n	8001d04 <HAL_I2C_Init+0x1c4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d111      	bne.n	8001c90 <HAL_I2C_Init+0x150>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e58      	subs	r0, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e012      	b.n	8001cb6 <HAL_I2C_Init+0x176>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e58      	subs	r0, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	0099      	lsls	r1, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Init+0x17e>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e022      	b.n	8001d04 <HAL_I2C_Init+0x1c4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_I2C_Init+0x1a4>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1e58      	subs	r0, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce2:	e00f      	b.n	8001d04 <HAL_I2C_Init+0x1c4>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e58      	subs	r0, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	0099      	lsls	r1, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	6809      	ldr	r1, [r1, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6911      	ldr	r1, [r2, #16]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68d2      	ldr	r2, [r2, #12]
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	000186a0 	.word	0x000186a0
 8001da0:	001e847f 	.word	0x001e847f
 8001da4:	003d08ff 	.word	0x003d08ff
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	10624dd3 	.word	0x10624dd3

08001db0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	817b      	strh	r3, [r7, #10]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff fbd6 	bl	8001574 <HAL_GetTick>
 8001dc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	f040 80e0 	bne.w	8001f98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2319      	movs	r3, #25
 8001dde:	2201      	movs	r2, #1
 8001de0:	4970      	ldr	r1, [pc, #448]	; (8001fa4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f964 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0d3      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_I2C_Master_Transmit+0x50>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0cc      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d007      	beq.n	8001e26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2221      	movs	r2, #33	; 0x21
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2210      	movs	r2, #16
 8001e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	893a      	ldrh	r2, [r7, #8]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e68:	8979      	ldrh	r1, [r7, #10]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	6a3a      	ldr	r2, [r7, #32]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f89c 	bl	8001fac <I2C_MasterRequestWrite>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e08d      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e94:	e066      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f9de 	bl	800225c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d107      	bne.n	8001ebe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06b      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d11b      	bne.n	8001f38 <HAL_I2C_Master_Transmit+0x188>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d017      	beq.n	8001f38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	6a39      	ldr	r1, [r7, #32]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f9ce 	bl	80022de <I2C_WaitOnBTFFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00d      	beq.n	8001f64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d107      	bne.n	8001f60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e01a      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d194      	bne.n	8001e96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	00100002 	.word	0x00100002
 8001fa8:	ffff0000 	.word	0xffff0000

08001fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d006      	beq.n	8001fd6 <I2C_MasterRequestWrite+0x2a>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d003      	beq.n	8001fd6 <I2C_MasterRequestWrite+0x2a>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00b      	b.n	8002000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d107      	bne.n	8002000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f84f 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002026:	d103      	bne.n	8002030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e035      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800203c:	d108      	bne.n	8002050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203e:	897b      	ldrh	r3, [r7, #10]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	e01b      	b.n	8002088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	11db      	asrs	r3, r3, #7
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 0306 	and.w	r3, r3, #6
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f063 030f 	orn	r3, r3, #15
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <I2C_MasterRequestWrite+0xfc>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f875 	bl	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e010      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <I2C_MasterRequestWrite+0x100>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f865 	bl	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	00010008 	.word	0x00010008
 80020ac:	00010002 	.word	0x00010002

080020b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c0:	e025      	b.n	800210e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d021      	beq.n	800210e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7ff fa53 	bl	8001574 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d116      	bne.n	800210e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0220 	orr.w	r2, r3, #32
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e023      	b.n	8002156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10d      	bne.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	e00c      	b.n	800214e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	429a      	cmp	r2, r3
 8002152:	d0b6      	beq.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800216c:	e051      	b.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d123      	bne.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e046      	b.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d021      	beq.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7ff f9d1 	bl	8001574 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d116      	bne.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e020      	b.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10c      	bne.n	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	e00b      	b.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	43da      	mvns	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4013      	ands	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d18d      	bne.n	800216e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002268:	e02d      	b.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f878 	bl	8002360 <I2C_IsAcknowledgeFailed>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e02d      	b.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d021      	beq.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff f977 	bl	8001574 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e007      	b.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d1ca      	bne.n	800226a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ea:	e02d      	b.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f837 	bl	8002360 <I2C_IsAcknowledgeFailed>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e02d      	b.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d021      	beq.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002304:	f7ff f936 	bl	8001574 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d1ca      	bne.n	80022ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002376:	d11b      	bne.n	80023b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e26c      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8087 	beq.w	80024ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023dc:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00c      	beq.n	8002402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e8:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d112      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
 80023f4:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d10b      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x12c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d168      	bne.n	80024e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e246      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x76>
 8002424:	4b80      	ldr	r3, [pc, #512]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7f      	ldr	r2, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e02e      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0xbc>
 800245e:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a71      	ldr	r2, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002478:	4b6b      	ldr	r3, [pc, #428]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6a      	ldr	r2, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b68      	ldr	r3, [pc, #416]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a67      	ldr	r2, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff f86c 	bl	8001574 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff f868 	bl	8001574 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1fa      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe4>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff f858 	bl	8001574 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff f854 	bl	8001574 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1e6      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x10c>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1ba      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4939      	ldr	r1, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff f80d 	bl	8001574 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7ff f809 	bl	8001574 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e19b      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe ffec 	bl	8001574 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe ffe8 	bl	8001574 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e17a      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03a      	beq.n	8002640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d019      	beq.n	8002606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7fe ffcc 	bl	8001574 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe ffc8 	bl	8001574 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e15a      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f000 fada 	bl	8002bb8 <RCC_Delay>
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe ffb2 	bl	8001574 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e00f      	b.n	8002634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe ffae 	bl	8001574 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d908      	bls.n	8002634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e140      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	42420000 	.word	0x42420000
 8002630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e9      	bne.n	8002614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a6 	beq.w	800279a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a93      	ldr	r2, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b8e      	ldr	r3, [pc, #568]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b8b      	ldr	r3, [pc, #556]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a8a      	ldr	r2, [pc, #552]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe ff6f 	bl	8001574 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe ff6b 	bl	8001574 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0fd      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x312>
 80026c0:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a7a      	ldr	r2, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	e02d      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x334>
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a72      	ldr	r2, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	e01c      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x356>
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a6c      	ldr	r2, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a66      	ldr	r2, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe ff1f 	bl	8001574 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe ff1b 	bl	8001574 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0ab      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ee      	beq.n	800273a <HAL_RCC_OscConfig+0x37e>
 800275c:	e014      	b.n	8002788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe ff09 	bl	8001574 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe ff05 	bl	8001574 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e095      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8081 	beq.w	80028a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d061      	beq.n	8002874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d146      	bne.n	8002846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fed9 	bl	8001574 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe fed5 	bl	8001574 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e067      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	492d      	ldr	r1, [pc, #180]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a19      	ldr	r1, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	430b      	orrs	r3, r1
 8002812:	4927      	ldr	r1, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fea9 	bl	8001574 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fea5 	bl	8001574 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e037      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x46a>
 8002844:	e02f      	b.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fe92 	bl	8001574 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fe8e 	bl	8001574 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e020      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x498>
 8002872:	e018      	b.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e013      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	429a      	cmp	r2, r3
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42420060 	.word	0x42420060

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800293a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fde2 	bl	8001574 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fdde 	bl	8001574 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4922      	ldr	r1, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fd40 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08004740 	.word	0x08004740
 8002a88:	20000018 	.word	0x20000018
 8002a8c:	2000001c 	.word	0x2000001c

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b490      	push	{r4, r7}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a98:	1d3c      	adds	r4, r7, #4
 8002a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x46>
 8002ace:	e02d      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	e02d      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ae8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0c5b      	lsrs	r3, r3, #17
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b02:	4413      	add	r3, r2
 8002b04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0e:	fb02 f203 	mul.w	r2, r2, r3
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e004      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	623b      	str	r3, [r7, #32]
      break;
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b2e:	623b      	str	r3, [r7, #32]
      break;
 8002b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b32:	6a3b      	ldr	r3, [r7, #32]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc90      	pop	{r4, r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	0800472c 	.word	0x0800472c
 8002b44:	0800473c 	.word	0x0800473c
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	003d0900 	.word	0x003d0900

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000018 	.word	0x20000018

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff2 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b70:	4601      	mov	r1, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4a03      	ldr	r2, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08004750 	.word	0x08004750

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08004750 	.word	0x08004750

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000018 	.word	0x20000018
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe faf0 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fa64 	bl	8003100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e03a      	b.n	8002d22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <HAL_TIM_Base_Start_IT+0x98>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x58>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd6:	d009      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x58>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x58>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d111      	bne.n	8002d10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d010      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	e007      	b.n	8002d20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800

08002d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0202 	mvn.w	r2, #2
 8002d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9a4 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f997 	bl	80030b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f9a6 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0204 	mvn.w	r2, #4
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f97a 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f96d 	bl	80030b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f97c 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d122      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d11b      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0208 	mvn.w	r2, #8
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2204      	movs	r2, #4
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f950 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f943 	bl	80030b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f952 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0210 	mvn.w	r2, #16
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2208      	movs	r2, #8
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f926 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f919 	bl	80030b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f928 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0201 	mvn.w	r2, #1
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe f8d2 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b80      	cmp	r3, #128	; 0x80
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa6b 	bl	80033be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8ec 	bl	80030ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d10e      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d107      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0220 	mvn.w	r2, #32
 8002f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa36 	bl	80033ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_ConfigClockSource+0x18>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0a6      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x166>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d067      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0x120>
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d80b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x6c>
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d073      	beq.n	8003088 <HAL_TIM_ConfigClockSource+0x140>
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d802      	bhi.n	8002faa <HAL_TIM_ConfigClockSource+0x62>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d06f      	beq.n	8003088 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fa8:	e078      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d06c      	beq.n	8003088 <HAL_TIM_ConfigClockSource+0x140>
 8002fae:	2b30      	cmp	r3, #48	; 0x30
 8002fb0:	d06a      	beq.n	8003088 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002fb2:	e073      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fb4:	2b70      	cmp	r3, #112	; 0x70
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0x8c>
 8002fb8:	2b70      	cmp	r3, #112	; 0x70
 8002fba:	d804      	bhi.n	8002fc6 <HAL_TIM_ConfigClockSource+0x7e>
 8002fbc:	2b50      	cmp	r3, #80	; 0x50
 8002fbe:	d033      	beq.n	8003028 <HAL_TIM_ConfigClockSource+0xe0>
 8002fc0:	2b60      	cmp	r3, #96	; 0x60
 8002fc2:	d041      	beq.n	8003048 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002fc4:	e06a      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d066      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x152>
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	d017      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002fd2:	e063      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6899      	ldr	r1, [r3, #8]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f000 f965 	bl	80032b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ff6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e04c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f000 f94e 	bl	80032b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003024:	609a      	str	r2, [r3, #8]
      break;
 8003026:	e039      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	461a      	mov	r2, r3
 8003036:	f000 f8c5 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2150      	movs	r1, #80	; 0x50
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f91c 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8003046:	e029      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	461a      	mov	r2, r3
 8003056:	f000 f8e3 	bl	8003220 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2160      	movs	r1, #96	; 0x60
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f90c 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8003066:	e019      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	461a      	mov	r2, r3
 8003076:	f000 f8a5 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2140      	movs	r1, #64	; 0x40
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f8fc 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8003086:	e009      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 f8f3 	bl	800327e <TIM_ITRx_SetConfig>
        break;
 8003098:	e000      	b.n	800309c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800309a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
	...

08003100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a29      	ldr	r2, [pc, #164]	; (80031b8 <TIM_Base_SetConfig+0xb8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00b      	beq.n	8003130 <TIM_Base_SetConfig+0x30>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311e:	d007      	beq.n	8003130 <TIM_Base_SetConfig+0x30>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <TIM_Base_SetConfig+0xbc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x30>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <TIM_Base_SetConfig+0xc0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <TIM_Base_SetConfig+0xb8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <TIM_Base_SetConfig+0x62>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0x62>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a19      	ldr	r2, [pc, #100]	; (80031bc <TIM_Base_SetConfig+0xbc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0x62>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <TIM_Base_SetConfig+0xc0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <TIM_Base_SetConfig+0xb8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d103      	bne.n	80031a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	615a      	str	r2, [r3, #20]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800

080031c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f023 030a 	bic.w	r3, r3, #10
 8003200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f023 0210 	bic.w	r2, r3, #16
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800324a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800325c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	621a      	str	r2, [r3, #32]
}
 8003274:	bf00      	nop
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	f043 0307 	orr.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	021a      	lsls	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4313      	orrs	r3, r2
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003304:	2302      	movs	r3, #2
 8003306:	e046      	b.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d009      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10c      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	4313      	orrs	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800

080033ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e03f      	b.n	8003462 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd ff28 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f905 	bl	8003624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08a      	sub	sp, #40	; 0x28
 800346e:	af02      	add	r7, sp, #8
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	d17c      	bne.n	8003584 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_UART_Transmit+0x2c>
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e075      	b.n	8003586 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Transmit+0x3e>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e06e      	b.n	8003586 <HAL_UART_Transmit+0x11c>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2221      	movs	r2, #33	; 0x21
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034be:	f7fe f859 	bl	8001574 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x82>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034fc:	e02a      	b.n	8003554 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f840 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e036      	b.n	8003586 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800352c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	3302      	adds	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e007      	b.n	8003546 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1cf      	bne.n	80034fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f810 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e006      	b.n	8003586 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	e02c      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d028      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0x30>
 80035ae:	f7fd ffe1 	bl	8001574 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d21d      	bcs.n	80035fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e00f      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	429a      	cmp	r2, r3
 8003616:	d0c3      	beq.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800365e:	f023 030c 	bic.w	r3, r3, #12
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	430b      	orrs	r3, r1
 800366a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <UART_SetConfig+0x114>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d103      	bne.n	8003694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800368c:	f7ff fa80 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	e002      	b.n	800369a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7ff fa68 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009a      	lsls	r2, r3, #2
 80036a4:	441a      	add	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	4a22      	ldr	r2, [pc, #136]	; (800373c <UART_SetConfig+0x118>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	0119      	lsls	r1, r3, #4
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009a      	lsls	r2, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <UART_SetConfig+0x118>)
 80036d2:	fba3 0302 	umull	r0, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2064      	movs	r0, #100	; 0x64
 80036da:	fb00 f303 	mul.w	r3, r0, r3
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	3332      	adds	r3, #50	; 0x32
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <UART_SetConfig+0x118>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f0:	4419      	add	r1, r3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009a      	lsls	r2, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	fbb2 f2f3 	udiv	r2, r2, r3
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <UART_SetConfig+0x118>)
 800370a:	fba3 0302 	umull	r0, r3, r3, r2
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2064      	movs	r0, #100	; 0x64
 8003712:	fb00 f303 	mul.w	r3, r0, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	3332      	adds	r3, #50	; 0x32
 800371c:	4a07      	ldr	r2, [pc, #28]	; (800373c <UART_SetConfig+0x118>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	f003 020f 	and.w	r2, r3, #15
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	440a      	add	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40013800 	.word	0x40013800
 800373c:	51eb851f 	.word	0x51eb851f

08003740 <__errno>:
 8003740:	4b01      	ldr	r3, [pc, #4]	; (8003748 <__errno+0x8>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000024 	.word	0x20000024

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	2500      	movs	r5, #0
 8003750:	4e0c      	ldr	r6, [pc, #48]	; (8003784 <__libc_init_array+0x38>)
 8003752:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003754:	1ba4      	subs	r4, r4, r6
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	42a5      	cmp	r5, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	f000 ff7c 	bl	8004658 <_init>
 8003760:	2500      	movs	r5, #0
 8003762:	4e0a      	ldr	r6, [pc, #40]	; (800378c <__libc_init_array+0x40>)
 8003764:	4c0a      	ldr	r4, [pc, #40]	; (8003790 <__libc_init_array+0x44>)
 8003766:	1ba4      	subs	r4, r4, r6
 8003768:	10a4      	asrs	r4, r4, #2
 800376a:	42a5      	cmp	r5, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003774:	4798      	blx	r3
 8003776:	3501      	adds	r5, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800377e:	4798      	blx	r3
 8003780:	3501      	adds	r5, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	080047f0 	.word	0x080047f0
 8003788:	080047f0 	.word	0x080047f0
 800378c:	080047f0 	.word	0x080047f0
 8003790:	080047f4 	.word	0x080047f4

08003794 <memset>:
 8003794:	4603      	mov	r3, r0
 8003796:	4402      	add	r2, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <iprintf>:
 80037a4:	b40f      	push	{r0, r1, r2, r3}
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <iprintf+0x2c>)
 80037a8:	b513      	push	{r0, r1, r4, lr}
 80037aa:	681c      	ldr	r4, [r3, #0]
 80037ac:	b124      	cbz	r4, 80037b8 <iprintf+0x14>
 80037ae:	69a3      	ldr	r3, [r4, #24]
 80037b0:	b913      	cbnz	r3, 80037b8 <iprintf+0x14>
 80037b2:	4620      	mov	r0, r4
 80037b4:	f000 fa2a 	bl	8003c0c <__sinit>
 80037b8:	ab05      	add	r3, sp, #20
 80037ba:	9a04      	ldr	r2, [sp, #16]
 80037bc:	68a1      	ldr	r1, [r4, #8]
 80037be:	4620      	mov	r0, r4
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	f000 fbdf 	bl	8003f84 <_vfiprintf_r>
 80037c6:	b002      	add	sp, #8
 80037c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037cc:	b004      	add	sp, #16
 80037ce:	4770      	bx	lr
 80037d0:	20000024 	.word	0x20000024

080037d4 <_puts_r>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	460e      	mov	r6, r1
 80037d8:	4605      	mov	r5, r0
 80037da:	b118      	cbz	r0, 80037e4 <_puts_r+0x10>
 80037dc:	6983      	ldr	r3, [r0, #24]
 80037de:	b90b      	cbnz	r3, 80037e4 <_puts_r+0x10>
 80037e0:	f000 fa14 	bl	8003c0c <__sinit>
 80037e4:	69ab      	ldr	r3, [r5, #24]
 80037e6:	68ac      	ldr	r4, [r5, #8]
 80037e8:	b913      	cbnz	r3, 80037f0 <_puts_r+0x1c>
 80037ea:	4628      	mov	r0, r5
 80037ec:	f000 fa0e 	bl	8003c0c <__sinit>
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <_puts_r+0xac>)
 80037f2:	429c      	cmp	r4, r3
 80037f4:	d117      	bne.n	8003826 <_puts_r+0x52>
 80037f6:	686c      	ldr	r4, [r5, #4]
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	071b      	lsls	r3, r3, #28
 80037fc:	d51d      	bpl.n	800383a <_puts_r+0x66>
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	b1db      	cbz	r3, 800383a <_puts_r+0x66>
 8003802:	3e01      	subs	r6, #1
 8003804:	68a3      	ldr	r3, [r4, #8]
 8003806:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800380a:	3b01      	subs	r3, #1
 800380c:	60a3      	str	r3, [r4, #8]
 800380e:	b9e9      	cbnz	r1, 800384c <_puts_r+0x78>
 8003810:	2b00      	cmp	r3, #0
 8003812:	da2e      	bge.n	8003872 <_puts_r+0x9e>
 8003814:	4622      	mov	r2, r4
 8003816:	210a      	movs	r1, #10
 8003818:	4628      	mov	r0, r5
 800381a:	f000 f847 	bl	80038ac <__swbuf_r>
 800381e:	3001      	adds	r0, #1
 8003820:	d011      	beq.n	8003846 <_puts_r+0x72>
 8003822:	200a      	movs	r0, #10
 8003824:	e011      	b.n	800384a <_puts_r+0x76>
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <_puts_r+0xb0>)
 8003828:	429c      	cmp	r4, r3
 800382a:	d101      	bne.n	8003830 <_puts_r+0x5c>
 800382c:	68ac      	ldr	r4, [r5, #8]
 800382e:	e7e3      	b.n	80037f8 <_puts_r+0x24>
 8003830:	4b15      	ldr	r3, [pc, #84]	; (8003888 <_puts_r+0xb4>)
 8003832:	429c      	cmp	r4, r3
 8003834:	bf08      	it	eq
 8003836:	68ec      	ldreq	r4, [r5, #12]
 8003838:	e7de      	b.n	80037f8 <_puts_r+0x24>
 800383a:	4621      	mov	r1, r4
 800383c:	4628      	mov	r0, r5
 800383e:	f000 f887 	bl	8003950 <__swsetup_r>
 8003842:	2800      	cmp	r0, #0
 8003844:	d0dd      	beq.n	8003802 <_puts_r+0x2e>
 8003846:	f04f 30ff 	mov.w	r0, #4294967295
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	2b00      	cmp	r3, #0
 800384e:	da04      	bge.n	800385a <_puts_r+0x86>
 8003850:	69a2      	ldr	r2, [r4, #24]
 8003852:	429a      	cmp	r2, r3
 8003854:	dc06      	bgt.n	8003864 <_puts_r+0x90>
 8003856:	290a      	cmp	r1, #10
 8003858:	d004      	beq.n	8003864 <_puts_r+0x90>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	6022      	str	r2, [r4, #0]
 8003860:	7019      	strb	r1, [r3, #0]
 8003862:	e7cf      	b.n	8003804 <_puts_r+0x30>
 8003864:	4622      	mov	r2, r4
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f820 	bl	80038ac <__swbuf_r>
 800386c:	3001      	adds	r0, #1
 800386e:	d1c9      	bne.n	8003804 <_puts_r+0x30>
 8003870:	e7e9      	b.n	8003846 <_puts_r+0x72>
 8003872:	200a      	movs	r0, #10
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	6022      	str	r2, [r4, #0]
 800387a:	7018      	strb	r0, [r3, #0]
 800387c:	e7e5      	b.n	800384a <_puts_r+0x76>
 800387e:	bf00      	nop
 8003880:	0800477c 	.word	0x0800477c
 8003884:	0800479c 	.word	0x0800479c
 8003888:	0800475c 	.word	0x0800475c

0800388c <puts>:
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <puts+0xc>)
 800388e:	4601      	mov	r1, r0
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	f7ff bf9f 	b.w	80037d4 <_puts_r>
 8003896:	bf00      	nop
 8003898:	20000024 	.word	0x20000024

0800389c <strcpy>:
 800389c:	4603      	mov	r3, r0
 800389e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038a2:	f803 2b01 	strb.w	r2, [r3], #1
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d1f9      	bne.n	800389e <strcpy+0x2>
 80038aa:	4770      	bx	lr

080038ac <__swbuf_r>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	460e      	mov	r6, r1
 80038b0:	4614      	mov	r4, r2
 80038b2:	4605      	mov	r5, r0
 80038b4:	b118      	cbz	r0, 80038be <__swbuf_r+0x12>
 80038b6:	6983      	ldr	r3, [r0, #24]
 80038b8:	b90b      	cbnz	r3, 80038be <__swbuf_r+0x12>
 80038ba:	f000 f9a7 	bl	8003c0c <__sinit>
 80038be:	4b21      	ldr	r3, [pc, #132]	; (8003944 <__swbuf_r+0x98>)
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d12a      	bne.n	800391a <__swbuf_r+0x6e>
 80038c4:	686c      	ldr	r4, [r5, #4]
 80038c6:	69a3      	ldr	r3, [r4, #24]
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	071a      	lsls	r2, r3, #28
 80038ce:	d52e      	bpl.n	800392e <__swbuf_r+0x82>
 80038d0:	6923      	ldr	r3, [r4, #16]
 80038d2:	b363      	cbz	r3, 800392e <__swbuf_r+0x82>
 80038d4:	6923      	ldr	r3, [r4, #16]
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	b2f6      	uxtb	r6, r6
 80038da:	1ac0      	subs	r0, r0, r3
 80038dc:	6963      	ldr	r3, [r4, #20]
 80038de:	4637      	mov	r7, r6
 80038e0:	4283      	cmp	r3, r0
 80038e2:	dc04      	bgt.n	80038ee <__swbuf_r+0x42>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 f926 	bl	8003b38 <_fflush_r>
 80038ec:	bb28      	cbnz	r0, 800393a <__swbuf_r+0x8e>
 80038ee:	68a3      	ldr	r3, [r4, #8]
 80038f0:	3001      	adds	r0, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60a3      	str	r3, [r4, #8]
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	6022      	str	r2, [r4, #0]
 80038fc:	701e      	strb	r6, [r3, #0]
 80038fe:	6963      	ldr	r3, [r4, #20]
 8003900:	4283      	cmp	r3, r0
 8003902:	d004      	beq.n	800390e <__swbuf_r+0x62>
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	07db      	lsls	r3, r3, #31
 8003908:	d519      	bpl.n	800393e <__swbuf_r+0x92>
 800390a:	2e0a      	cmp	r6, #10
 800390c:	d117      	bne.n	800393e <__swbuf_r+0x92>
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	f000 f911 	bl	8003b38 <_fflush_r>
 8003916:	b190      	cbz	r0, 800393e <__swbuf_r+0x92>
 8003918:	e00f      	b.n	800393a <__swbuf_r+0x8e>
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <__swbuf_r+0x9c>)
 800391c:	429c      	cmp	r4, r3
 800391e:	d101      	bne.n	8003924 <__swbuf_r+0x78>
 8003920:	68ac      	ldr	r4, [r5, #8]
 8003922:	e7d0      	b.n	80038c6 <__swbuf_r+0x1a>
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <__swbuf_r+0xa0>)
 8003926:	429c      	cmp	r4, r3
 8003928:	bf08      	it	eq
 800392a:	68ec      	ldreq	r4, [r5, #12]
 800392c:	e7cb      	b.n	80038c6 <__swbuf_r+0x1a>
 800392e:	4621      	mov	r1, r4
 8003930:	4628      	mov	r0, r5
 8003932:	f000 f80d 	bl	8003950 <__swsetup_r>
 8003936:	2800      	cmp	r0, #0
 8003938:	d0cc      	beq.n	80038d4 <__swbuf_r+0x28>
 800393a:	f04f 37ff 	mov.w	r7, #4294967295
 800393e:	4638      	mov	r0, r7
 8003940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003942:	bf00      	nop
 8003944:	0800477c 	.word	0x0800477c
 8003948:	0800479c 	.word	0x0800479c
 800394c:	0800475c 	.word	0x0800475c

08003950 <__swsetup_r>:
 8003950:	4b32      	ldr	r3, [pc, #200]	; (8003a1c <__swsetup_r+0xcc>)
 8003952:	b570      	push	{r4, r5, r6, lr}
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	4606      	mov	r6, r0
 8003958:	460c      	mov	r4, r1
 800395a:	b125      	cbz	r5, 8003966 <__swsetup_r+0x16>
 800395c:	69ab      	ldr	r3, [r5, #24]
 800395e:	b913      	cbnz	r3, 8003966 <__swsetup_r+0x16>
 8003960:	4628      	mov	r0, r5
 8003962:	f000 f953 	bl	8003c0c <__sinit>
 8003966:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <__swsetup_r+0xd0>)
 8003968:	429c      	cmp	r4, r3
 800396a:	d10f      	bne.n	800398c <__swsetup_r+0x3c>
 800396c:	686c      	ldr	r4, [r5, #4]
 800396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003972:	b29a      	uxth	r2, r3
 8003974:	0715      	lsls	r5, r2, #28
 8003976:	d42c      	bmi.n	80039d2 <__swsetup_r+0x82>
 8003978:	06d0      	lsls	r0, r2, #27
 800397a:	d411      	bmi.n	80039a0 <__swsetup_r+0x50>
 800397c:	2209      	movs	r2, #9
 800397e:	6032      	str	r2, [r6, #0]
 8003980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003984:	81a3      	strh	r3, [r4, #12]
 8003986:	f04f 30ff 	mov.w	r0, #4294967295
 800398a:	e03e      	b.n	8003a0a <__swsetup_r+0xba>
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <__swsetup_r+0xd4>)
 800398e:	429c      	cmp	r4, r3
 8003990:	d101      	bne.n	8003996 <__swsetup_r+0x46>
 8003992:	68ac      	ldr	r4, [r5, #8]
 8003994:	e7eb      	b.n	800396e <__swsetup_r+0x1e>
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <__swsetup_r+0xd8>)
 8003998:	429c      	cmp	r4, r3
 800399a:	bf08      	it	eq
 800399c:	68ec      	ldreq	r4, [r5, #12]
 800399e:	e7e6      	b.n	800396e <__swsetup_r+0x1e>
 80039a0:	0751      	lsls	r1, r2, #29
 80039a2:	d512      	bpl.n	80039ca <__swsetup_r+0x7a>
 80039a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039a6:	b141      	cbz	r1, 80039ba <__swsetup_r+0x6a>
 80039a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039ac:	4299      	cmp	r1, r3
 80039ae:	d002      	beq.n	80039b6 <__swsetup_r+0x66>
 80039b0:	4630      	mov	r0, r6
 80039b2:	f000 fa19 	bl	8003de8 <_free_r>
 80039b6:	2300      	movs	r3, #0
 80039b8:	6363      	str	r3, [r4, #52]	; 0x34
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039c0:	81a3      	strh	r3, [r4, #12]
 80039c2:	2300      	movs	r3, #0
 80039c4:	6063      	str	r3, [r4, #4]
 80039c6:	6923      	ldr	r3, [r4, #16]
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f043 0308 	orr.w	r3, r3, #8
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	6923      	ldr	r3, [r4, #16]
 80039d4:	b94b      	cbnz	r3, 80039ea <__swsetup_r+0x9a>
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e0:	d003      	beq.n	80039ea <__swsetup_r+0x9a>
 80039e2:	4621      	mov	r1, r4
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f9bf 	bl	8003d68 <__smakebuf_r>
 80039ea:	89a2      	ldrh	r2, [r4, #12]
 80039ec:	f012 0301 	ands.w	r3, r2, #1
 80039f0:	d00c      	beq.n	8003a0c <__swsetup_r+0xbc>
 80039f2:	2300      	movs	r3, #0
 80039f4:	60a3      	str	r3, [r4, #8]
 80039f6:	6963      	ldr	r3, [r4, #20]
 80039f8:	425b      	negs	r3, r3
 80039fa:	61a3      	str	r3, [r4, #24]
 80039fc:	6923      	ldr	r3, [r4, #16]
 80039fe:	b953      	cbnz	r3, 8003a16 <__swsetup_r+0xc6>
 8003a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a08:	d1ba      	bne.n	8003980 <__swsetup_r+0x30>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	0792      	lsls	r2, r2, #30
 8003a0e:	bf58      	it	pl
 8003a10:	6963      	ldrpl	r3, [r4, #20]
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	e7f2      	b.n	80039fc <__swsetup_r+0xac>
 8003a16:	2000      	movs	r0, #0
 8003a18:	e7f7      	b.n	8003a0a <__swsetup_r+0xba>
 8003a1a:	bf00      	nop
 8003a1c:	20000024 	.word	0x20000024
 8003a20:	0800477c 	.word	0x0800477c
 8003a24:	0800479c 	.word	0x0800479c
 8003a28:	0800475c 	.word	0x0800475c

08003a2c <__sflush_r>:
 8003a2c:	898a      	ldrh	r2, [r1, #12]
 8003a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	4605      	mov	r5, r0
 8003a34:	0710      	lsls	r0, r2, #28
 8003a36:	460c      	mov	r4, r1
 8003a38:	d458      	bmi.n	8003aec <__sflush_r+0xc0>
 8003a3a:	684b      	ldr	r3, [r1, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	dc05      	bgt.n	8003a4c <__sflush_r+0x20>
 8003a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dc02      	bgt.n	8003a4c <__sflush_r+0x20>
 8003a46:	2000      	movs	r0, #0
 8003a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	d0f9      	beq.n	8003a46 <__sflush_r+0x1a>
 8003a52:	2300      	movs	r3, #0
 8003a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a58:	682f      	ldr	r7, [r5, #0]
 8003a5a:	6a21      	ldr	r1, [r4, #32]
 8003a5c:	602b      	str	r3, [r5, #0]
 8003a5e:	d032      	beq.n	8003ac6 <__sflush_r+0x9a>
 8003a60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	075a      	lsls	r2, r3, #29
 8003a66:	d505      	bpl.n	8003a74 <__sflush_r+0x48>
 8003a68:	6863      	ldr	r3, [r4, #4]
 8003a6a:	1ac0      	subs	r0, r0, r3
 8003a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a6e:	b10b      	cbz	r3, 8003a74 <__sflush_r+0x48>
 8003a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a72:	1ac0      	subs	r0, r0, r3
 8003a74:	2300      	movs	r3, #0
 8003a76:	4602      	mov	r2, r0
 8003a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a7a:	6a21      	ldr	r1, [r4, #32]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	47b0      	blx	r6
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	d106      	bne.n	8003a94 <__sflush_r+0x68>
 8003a86:	6829      	ldr	r1, [r5, #0]
 8003a88:	291d      	cmp	r1, #29
 8003a8a:	d848      	bhi.n	8003b1e <__sflush_r+0xf2>
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <__sflush_r+0x108>)
 8003a8e:	40ca      	lsrs	r2, r1
 8003a90:	07d6      	lsls	r6, r2, #31
 8003a92:	d544      	bpl.n	8003b1e <__sflush_r+0xf2>
 8003a94:	2200      	movs	r2, #0
 8003a96:	6062      	str	r2, [r4, #4]
 8003a98:	6922      	ldr	r2, [r4, #16]
 8003a9a:	04d9      	lsls	r1, r3, #19
 8003a9c:	6022      	str	r2, [r4, #0]
 8003a9e:	d504      	bpl.n	8003aaa <__sflush_r+0x7e>
 8003aa0:	1c42      	adds	r2, r0, #1
 8003aa2:	d101      	bne.n	8003aa8 <__sflush_r+0x7c>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	b903      	cbnz	r3, 8003aaa <__sflush_r+0x7e>
 8003aa8:	6560      	str	r0, [r4, #84]	; 0x54
 8003aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aac:	602f      	str	r7, [r5, #0]
 8003aae:	2900      	cmp	r1, #0
 8003ab0:	d0c9      	beq.n	8003a46 <__sflush_r+0x1a>
 8003ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ab6:	4299      	cmp	r1, r3
 8003ab8:	d002      	beq.n	8003ac0 <__sflush_r+0x94>
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 f994 	bl	8003de8 <_free_r>
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	6360      	str	r0, [r4, #52]	; 0x34
 8003ac4:	e7c0      	b.n	8003a48 <__sflush_r+0x1c>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4628      	mov	r0, r5
 8003aca:	47b0      	blx	r6
 8003acc:	1c41      	adds	r1, r0, #1
 8003ace:	d1c8      	bne.n	8003a62 <__sflush_r+0x36>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0c5      	beq.n	8003a62 <__sflush_r+0x36>
 8003ad6:	2b1d      	cmp	r3, #29
 8003ad8:	d001      	beq.n	8003ade <__sflush_r+0xb2>
 8003ada:	2b16      	cmp	r3, #22
 8003adc:	d101      	bne.n	8003ae2 <__sflush_r+0xb6>
 8003ade:	602f      	str	r7, [r5, #0]
 8003ae0:	e7b1      	b.n	8003a46 <__sflush_r+0x1a>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae8:	81a3      	strh	r3, [r4, #12]
 8003aea:	e7ad      	b.n	8003a48 <__sflush_r+0x1c>
 8003aec:	690f      	ldr	r7, [r1, #16]
 8003aee:	2f00      	cmp	r7, #0
 8003af0:	d0a9      	beq.n	8003a46 <__sflush_r+0x1a>
 8003af2:	0793      	lsls	r3, r2, #30
 8003af4:	bf18      	it	ne
 8003af6:	2300      	movne	r3, #0
 8003af8:	680e      	ldr	r6, [r1, #0]
 8003afa:	bf08      	it	eq
 8003afc:	694b      	ldreq	r3, [r1, #20]
 8003afe:	eba6 0807 	sub.w	r8, r6, r7
 8003b02:	600f      	str	r7, [r1, #0]
 8003b04:	608b      	str	r3, [r1, #8]
 8003b06:	f1b8 0f00 	cmp.w	r8, #0
 8003b0a:	dd9c      	ble.n	8003a46 <__sflush_r+0x1a>
 8003b0c:	4643      	mov	r3, r8
 8003b0e:	463a      	mov	r2, r7
 8003b10:	6a21      	ldr	r1, [r4, #32]
 8003b12:	4628      	mov	r0, r5
 8003b14:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b16:	47b0      	blx	r6
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	dc06      	bgt.n	8003b2a <__sflush_r+0xfe>
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b22:	81a3      	strh	r3, [r4, #12]
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	e78e      	b.n	8003a48 <__sflush_r+0x1c>
 8003b2a:	4407      	add	r7, r0
 8003b2c:	eba8 0800 	sub.w	r8, r8, r0
 8003b30:	e7e9      	b.n	8003b06 <__sflush_r+0xda>
 8003b32:	bf00      	nop
 8003b34:	20400001 	.word	0x20400001

08003b38 <_fflush_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	690b      	ldr	r3, [r1, #16]
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	b1db      	cbz	r3, 8003b7a <_fflush_r+0x42>
 8003b42:	b118      	cbz	r0, 8003b4c <_fflush_r+0x14>
 8003b44:	6983      	ldr	r3, [r0, #24]
 8003b46:	b90b      	cbnz	r3, 8003b4c <_fflush_r+0x14>
 8003b48:	f000 f860 	bl	8003c0c <__sinit>
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <_fflush_r+0x48>)
 8003b4e:	429c      	cmp	r4, r3
 8003b50:	d109      	bne.n	8003b66 <_fflush_r+0x2e>
 8003b52:	686c      	ldr	r4, [r5, #4]
 8003b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b58:	b17b      	cbz	r3, 8003b7a <_fflush_r+0x42>
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b62:	f7ff bf63 	b.w	8003a2c <__sflush_r>
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <_fflush_r+0x4c>)
 8003b68:	429c      	cmp	r4, r3
 8003b6a:	d101      	bne.n	8003b70 <_fflush_r+0x38>
 8003b6c:	68ac      	ldr	r4, [r5, #8]
 8003b6e:	e7f1      	b.n	8003b54 <_fflush_r+0x1c>
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <_fflush_r+0x50>)
 8003b72:	429c      	cmp	r4, r3
 8003b74:	bf08      	it	eq
 8003b76:	68ec      	ldreq	r4, [r5, #12]
 8003b78:	e7ec      	b.n	8003b54 <_fflush_r+0x1c>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
 8003b7e:	bf00      	nop
 8003b80:	0800477c 	.word	0x0800477c
 8003b84:	0800479c 	.word	0x0800479c
 8003b88:	0800475c 	.word	0x0800475c

08003b8c <std>:
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	b510      	push	{r4, lr}
 8003b90:	4604      	mov	r4, r0
 8003b92:	e9c0 3300 	strd	r3, r3, [r0]
 8003b96:	6083      	str	r3, [r0, #8]
 8003b98:	8181      	strh	r1, [r0, #12]
 8003b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b9c:	81c2      	strh	r2, [r0, #14]
 8003b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ba2:	6183      	str	r3, [r0, #24]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	305c      	adds	r0, #92	; 0x5c
 8003baa:	f7ff fdf3 	bl	8003794 <memset>
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <std+0x38>)
 8003bb0:	6224      	str	r4, [r4, #32]
 8003bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <std+0x3c>)
 8003bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <std+0x40>)
 8003bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <std+0x44>)
 8003bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8003bc0:	bd10      	pop	{r4, pc}
 8003bc2:	bf00      	nop
 8003bc4:	080044e1 	.word	0x080044e1
 8003bc8:	08004503 	.word	0x08004503
 8003bcc:	0800453b 	.word	0x0800453b
 8003bd0:	0800455f 	.word	0x0800455f

08003bd4 <_cleanup_r>:
 8003bd4:	4901      	ldr	r1, [pc, #4]	; (8003bdc <_cleanup_r+0x8>)
 8003bd6:	f000 b885 	b.w	8003ce4 <_fwalk_reent>
 8003bda:	bf00      	nop
 8003bdc:	08003b39 	.word	0x08003b39

08003be0 <__sfmoreglue>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	2568      	movs	r5, #104	; 0x68
 8003be4:	1e4a      	subs	r2, r1, #1
 8003be6:	4355      	muls	r5, r2
 8003be8:	460e      	mov	r6, r1
 8003bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bee:	f000 f947 	bl	8003e80 <_malloc_r>
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	b140      	cbz	r0, 8003c08 <__sfmoreglue+0x28>
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8003bfc:	300c      	adds	r0, #12
 8003bfe:	60a0      	str	r0, [r4, #8]
 8003c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c04:	f7ff fdc6 	bl	8003794 <memset>
 8003c08:	4620      	mov	r0, r4
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}

08003c0c <__sinit>:
 8003c0c:	6983      	ldr	r3, [r0, #24]
 8003c0e:	b510      	push	{r4, lr}
 8003c10:	4604      	mov	r4, r0
 8003c12:	bb33      	cbnz	r3, 8003c62 <__sinit+0x56>
 8003c14:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003c18:	6503      	str	r3, [r0, #80]	; 0x50
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <__sinit+0x58>)
 8003c1c:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <__sinit+0x5c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6282      	str	r2, [r0, #40]	; 0x28
 8003c22:	4298      	cmp	r0, r3
 8003c24:	bf04      	itt	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	6183      	streq	r3, [r0, #24]
 8003c2a:	f000 f81f 	bl	8003c6c <__sfp>
 8003c2e:	6060      	str	r0, [r4, #4]
 8003c30:	4620      	mov	r0, r4
 8003c32:	f000 f81b 	bl	8003c6c <__sfp>
 8003c36:	60a0      	str	r0, [r4, #8]
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f000 f817 	bl	8003c6c <__sfp>
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60e0      	str	r0, [r4, #12]
 8003c42:	2104      	movs	r1, #4
 8003c44:	6860      	ldr	r0, [r4, #4]
 8003c46:	f7ff ffa1 	bl	8003b8c <std>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2109      	movs	r1, #9
 8003c4e:	68a0      	ldr	r0, [r4, #8]
 8003c50:	f7ff ff9c 	bl	8003b8c <std>
 8003c54:	2202      	movs	r2, #2
 8003c56:	2112      	movs	r1, #18
 8003c58:	68e0      	ldr	r0, [r4, #12]
 8003c5a:	f7ff ff97 	bl	8003b8c <std>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61a3      	str	r3, [r4, #24]
 8003c62:	bd10      	pop	{r4, pc}
 8003c64:	08004758 	.word	0x08004758
 8003c68:	08003bd5 	.word	0x08003bd5

08003c6c <__sfp>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <__sfp+0x70>)
 8003c70:	4607      	mov	r7, r0
 8003c72:	681e      	ldr	r6, [r3, #0]
 8003c74:	69b3      	ldr	r3, [r6, #24]
 8003c76:	b913      	cbnz	r3, 8003c7e <__sfp+0x12>
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f7ff ffc7 	bl	8003c0c <__sinit>
 8003c7e:	3648      	adds	r6, #72	; 0x48
 8003c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	d503      	bpl.n	8003c90 <__sfp+0x24>
 8003c88:	6833      	ldr	r3, [r6, #0]
 8003c8a:	b133      	cbz	r3, 8003c9a <__sfp+0x2e>
 8003c8c:	6836      	ldr	r6, [r6, #0]
 8003c8e:	e7f7      	b.n	8003c80 <__sfp+0x14>
 8003c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c94:	b16d      	cbz	r5, 8003cb2 <__sfp+0x46>
 8003c96:	3468      	adds	r4, #104	; 0x68
 8003c98:	e7f4      	b.n	8003c84 <__sfp+0x18>
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7ff ff9f 	bl	8003be0 <__sfmoreglue>
 8003ca2:	6030      	str	r0, [r6, #0]
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d1f1      	bne.n	8003c8c <__sfp+0x20>
 8003ca8:	230c      	movs	r3, #12
 8003caa:	4604      	mov	r4, r0
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	4620      	mov	r0, r4
 8003cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <__sfp+0x74>)
 8003cb4:	6665      	str	r5, [r4, #100]	; 0x64
 8003cb6:	e9c4 5500 	strd	r5, r5, [r4]
 8003cba:	60a5      	str	r5, [r4, #8]
 8003cbc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003cc0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ccc:	f7ff fd62 	bl	8003794 <memset>
 8003cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cd8:	e7e9      	b.n	8003cae <__sfp+0x42>
 8003cda:	bf00      	nop
 8003cdc:	08004758 	.word	0x08004758
 8003ce0:	ffff0001 	.word	0xffff0001

08003ce4 <_fwalk_reent>:
 8003ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	4680      	mov	r8, r0
 8003cea:	4689      	mov	r9, r1
 8003cec:	2600      	movs	r6, #0
 8003cee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cf2:	b914      	cbnz	r4, 8003cfa <_fwalk_reent+0x16>
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003cfe:	3f01      	subs	r7, #1
 8003d00:	d501      	bpl.n	8003d06 <_fwalk_reent+0x22>
 8003d02:	6824      	ldr	r4, [r4, #0]
 8003d04:	e7f5      	b.n	8003cf2 <_fwalk_reent+0xe>
 8003d06:	89ab      	ldrh	r3, [r5, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d907      	bls.n	8003d1c <_fwalk_reent+0x38>
 8003d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d10:	3301      	adds	r3, #1
 8003d12:	d003      	beq.n	8003d1c <_fwalk_reent+0x38>
 8003d14:	4629      	mov	r1, r5
 8003d16:	4640      	mov	r0, r8
 8003d18:	47c8      	blx	r9
 8003d1a:	4306      	orrs	r6, r0
 8003d1c:	3568      	adds	r5, #104	; 0x68
 8003d1e:	e7ee      	b.n	8003cfe <_fwalk_reent+0x1a>

08003d20 <__swhatbuf_r>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	460e      	mov	r6, r1
 8003d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d28:	b096      	sub	sp, #88	; 0x58
 8003d2a:	2900      	cmp	r1, #0
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	461d      	mov	r5, r3
 8003d30:	da07      	bge.n	8003d42 <__swhatbuf_r+0x22>
 8003d32:	2300      	movs	r3, #0
 8003d34:	602b      	str	r3, [r5, #0]
 8003d36:	89b3      	ldrh	r3, [r6, #12]
 8003d38:	061a      	lsls	r2, r3, #24
 8003d3a:	d410      	bmi.n	8003d5e <__swhatbuf_r+0x3e>
 8003d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d40:	e00e      	b.n	8003d60 <__swhatbuf_r+0x40>
 8003d42:	466a      	mov	r2, sp
 8003d44:	f000 fc32 	bl	80045ac <_fstat_r>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	dbf2      	blt.n	8003d32 <__swhatbuf_r+0x12>
 8003d4c:	9a01      	ldr	r2, [sp, #4]
 8003d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d56:	425a      	negs	r2, r3
 8003d58:	415a      	adcs	r2, r3
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	e7ee      	b.n	8003d3c <__swhatbuf_r+0x1c>
 8003d5e:	2340      	movs	r3, #64	; 0x40
 8003d60:	2000      	movs	r0, #0
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	b016      	add	sp, #88	; 0x58
 8003d66:	bd70      	pop	{r4, r5, r6, pc}

08003d68 <__smakebuf_r>:
 8003d68:	898b      	ldrh	r3, [r1, #12]
 8003d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d6c:	079d      	lsls	r5, r3, #30
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	d507      	bpl.n	8003d84 <__smakebuf_r+0x1c>
 8003d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	6123      	str	r3, [r4, #16]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	6163      	str	r3, [r4, #20]
 8003d80:	b002      	add	sp, #8
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	ab01      	add	r3, sp, #4
 8003d86:	466a      	mov	r2, sp
 8003d88:	f7ff ffca 	bl	8003d20 <__swhatbuf_r>
 8003d8c:	9900      	ldr	r1, [sp, #0]
 8003d8e:	4605      	mov	r5, r0
 8003d90:	4630      	mov	r0, r6
 8003d92:	f000 f875 	bl	8003e80 <_malloc_r>
 8003d96:	b948      	cbnz	r0, 8003dac <__smakebuf_r+0x44>
 8003d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d9c:	059a      	lsls	r2, r3, #22
 8003d9e:	d4ef      	bmi.n	8003d80 <__smakebuf_r+0x18>
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	e7e3      	b.n	8003d74 <__smakebuf_r+0xc>
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <__smakebuf_r+0x7c>)
 8003dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	6020      	str	r0, [r4, #0]
 8003db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db8:	81a3      	strh	r3, [r4, #12]
 8003dba:	9b00      	ldr	r3, [sp, #0]
 8003dbc:	6120      	str	r0, [r4, #16]
 8003dbe:	6163      	str	r3, [r4, #20]
 8003dc0:	9b01      	ldr	r3, [sp, #4]
 8003dc2:	b15b      	cbz	r3, 8003ddc <__smakebuf_r+0x74>
 8003dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 fc01 	bl	80045d0 <_isatty_r>
 8003dce:	b128      	cbz	r0, 8003ddc <__smakebuf_r+0x74>
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	431d      	orrs	r5, r3
 8003de0:	81a5      	strh	r5, [r4, #12]
 8003de2:	e7cd      	b.n	8003d80 <__smakebuf_r+0x18>
 8003de4:	08003bd5 	.word	0x08003bd5

08003de8 <_free_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	4605      	mov	r5, r0
 8003dec:	2900      	cmp	r1, #0
 8003dee:	d043      	beq.n	8003e78 <_free_r+0x90>
 8003df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df4:	1f0c      	subs	r4, r1, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bfb8      	it	lt
 8003dfa:	18e4      	addlt	r4, r4, r3
 8003dfc:	f000 fc18 	bl	8004630 <__malloc_lock>
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <_free_r+0x94>)
 8003e02:	6813      	ldr	r3, [r2, #0]
 8003e04:	4610      	mov	r0, r2
 8003e06:	b933      	cbnz	r3, 8003e16 <_free_r+0x2e>
 8003e08:	6063      	str	r3, [r4, #4]
 8003e0a:	6014      	str	r4, [r2, #0]
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e12:	f000 bc0e 	b.w	8004632 <__malloc_unlock>
 8003e16:	42a3      	cmp	r3, r4
 8003e18:	d90b      	bls.n	8003e32 <_free_r+0x4a>
 8003e1a:	6821      	ldr	r1, [r4, #0]
 8003e1c:	1862      	adds	r2, r4, r1
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	bf01      	itttt	eq
 8003e22:	681a      	ldreq	r2, [r3, #0]
 8003e24:	685b      	ldreq	r3, [r3, #4]
 8003e26:	1852      	addeq	r2, r2, r1
 8003e28:	6022      	streq	r2, [r4, #0]
 8003e2a:	6063      	str	r3, [r4, #4]
 8003e2c:	6004      	str	r4, [r0, #0]
 8003e2e:	e7ed      	b.n	8003e0c <_free_r+0x24>
 8003e30:	4613      	mov	r3, r2
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	b10a      	cbz	r2, 8003e3a <_free_r+0x52>
 8003e36:	42a2      	cmp	r2, r4
 8003e38:	d9fa      	bls.n	8003e30 <_free_r+0x48>
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	1858      	adds	r0, r3, r1
 8003e3e:	42a0      	cmp	r0, r4
 8003e40:	d10b      	bne.n	8003e5a <_free_r+0x72>
 8003e42:	6820      	ldr	r0, [r4, #0]
 8003e44:	4401      	add	r1, r0
 8003e46:	1858      	adds	r0, r3, r1
 8003e48:	4282      	cmp	r2, r0
 8003e4a:	6019      	str	r1, [r3, #0]
 8003e4c:	d1de      	bne.n	8003e0c <_free_r+0x24>
 8003e4e:	6810      	ldr	r0, [r2, #0]
 8003e50:	6852      	ldr	r2, [r2, #4]
 8003e52:	4401      	add	r1, r0
 8003e54:	6019      	str	r1, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	e7d8      	b.n	8003e0c <_free_r+0x24>
 8003e5a:	d902      	bls.n	8003e62 <_free_r+0x7a>
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	e7d4      	b.n	8003e0c <_free_r+0x24>
 8003e62:	6820      	ldr	r0, [r4, #0]
 8003e64:	1821      	adds	r1, r4, r0
 8003e66:	428a      	cmp	r2, r1
 8003e68:	bf01      	itttt	eq
 8003e6a:	6811      	ldreq	r1, [r2, #0]
 8003e6c:	6852      	ldreq	r2, [r2, #4]
 8003e6e:	1809      	addeq	r1, r1, r0
 8003e70:	6021      	streq	r1, [r4, #0]
 8003e72:	6062      	str	r2, [r4, #4]
 8003e74:	605c      	str	r4, [r3, #4]
 8003e76:	e7c9      	b.n	8003e0c <_free_r+0x24>
 8003e78:	bd38      	pop	{r3, r4, r5, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200000b8 	.word	0x200000b8

08003e80 <_malloc_r>:
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	1ccd      	adds	r5, r1, #3
 8003e84:	f025 0503 	bic.w	r5, r5, #3
 8003e88:	3508      	adds	r5, #8
 8003e8a:	2d0c      	cmp	r5, #12
 8003e8c:	bf38      	it	cc
 8003e8e:	250c      	movcc	r5, #12
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	4606      	mov	r6, r0
 8003e94:	db01      	blt.n	8003e9a <_malloc_r+0x1a>
 8003e96:	42a9      	cmp	r1, r5
 8003e98:	d903      	bls.n	8003ea2 <_malloc_r+0x22>
 8003e9a:	230c      	movs	r3, #12
 8003e9c:	6033      	str	r3, [r6, #0]
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}
 8003ea2:	f000 fbc5 	bl	8004630 <__malloc_lock>
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <_malloc_r+0xac>)
 8003ea8:	6814      	ldr	r4, [r2, #0]
 8003eaa:	4621      	mov	r1, r4
 8003eac:	b991      	cbnz	r1, 8003ed4 <_malloc_r+0x54>
 8003eae:	4c20      	ldr	r4, [pc, #128]	; (8003f30 <_malloc_r+0xb0>)
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	b91b      	cbnz	r3, 8003ebc <_malloc_r+0x3c>
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	f000 fb03 	bl	80044c0 <_sbrk_r>
 8003eba:	6020      	str	r0, [r4, #0]
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f000 fafe 	bl	80044c0 <_sbrk_r>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d124      	bne.n	8003f12 <_malloc_r+0x92>
 8003ec8:	230c      	movs	r3, #12
 8003eca:	4630      	mov	r0, r6
 8003ecc:	6033      	str	r3, [r6, #0]
 8003ece:	f000 fbb0 	bl	8004632 <__malloc_unlock>
 8003ed2:	e7e4      	b.n	8003e9e <_malloc_r+0x1e>
 8003ed4:	680b      	ldr	r3, [r1, #0]
 8003ed6:	1b5b      	subs	r3, r3, r5
 8003ed8:	d418      	bmi.n	8003f0c <_malloc_r+0x8c>
 8003eda:	2b0b      	cmp	r3, #11
 8003edc:	d90f      	bls.n	8003efe <_malloc_r+0x7e>
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	18cc      	adds	r4, r1, r3
 8003ee2:	50cd      	str	r5, [r1, r3]
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f000 fba4 	bl	8004632 <__malloc_unlock>
 8003eea:	f104 000b 	add.w	r0, r4, #11
 8003eee:	1d23      	adds	r3, r4, #4
 8003ef0:	f020 0007 	bic.w	r0, r0, #7
 8003ef4:	1ac3      	subs	r3, r0, r3
 8003ef6:	d0d3      	beq.n	8003ea0 <_malloc_r+0x20>
 8003ef8:	425a      	negs	r2, r3
 8003efa:	50e2      	str	r2, [r4, r3]
 8003efc:	e7d0      	b.n	8003ea0 <_malloc_r+0x20>
 8003efe:	684b      	ldr	r3, [r1, #4]
 8003f00:	428c      	cmp	r4, r1
 8003f02:	bf16      	itet	ne
 8003f04:	6063      	strne	r3, [r4, #4]
 8003f06:	6013      	streq	r3, [r2, #0]
 8003f08:	460c      	movne	r4, r1
 8003f0a:	e7eb      	b.n	8003ee4 <_malloc_r+0x64>
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	6849      	ldr	r1, [r1, #4]
 8003f10:	e7cc      	b.n	8003eac <_malloc_r+0x2c>
 8003f12:	1cc4      	adds	r4, r0, #3
 8003f14:	f024 0403 	bic.w	r4, r4, #3
 8003f18:	42a0      	cmp	r0, r4
 8003f1a:	d005      	beq.n	8003f28 <_malloc_r+0xa8>
 8003f1c:	1a21      	subs	r1, r4, r0
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f000 face 	bl	80044c0 <_sbrk_r>
 8003f24:	3001      	adds	r0, #1
 8003f26:	d0cf      	beq.n	8003ec8 <_malloc_r+0x48>
 8003f28:	6025      	str	r5, [r4, #0]
 8003f2a:	e7db      	b.n	8003ee4 <_malloc_r+0x64>
 8003f2c:	200000b8 	.word	0x200000b8
 8003f30:	200000bc 	.word	0x200000bc

08003f34 <__sfputc_r>:
 8003f34:	6893      	ldr	r3, [r2, #8]
 8003f36:	b410      	push	{r4}
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	6093      	str	r3, [r2, #8]
 8003f3e:	da07      	bge.n	8003f50 <__sfputc_r+0x1c>
 8003f40:	6994      	ldr	r4, [r2, #24]
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	db01      	blt.n	8003f4a <__sfputc_r+0x16>
 8003f46:	290a      	cmp	r1, #10
 8003f48:	d102      	bne.n	8003f50 <__sfputc_r+0x1c>
 8003f4a:	bc10      	pop	{r4}
 8003f4c:	f7ff bcae 	b.w	80038ac <__swbuf_r>
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	1c58      	adds	r0, r3, #1
 8003f54:	6010      	str	r0, [r2, #0]
 8003f56:	7019      	strb	r1, [r3, #0]
 8003f58:	4608      	mov	r0, r1
 8003f5a:	bc10      	pop	{r4}
 8003f5c:	4770      	bx	lr

08003f5e <__sfputs_r>:
 8003f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f60:	4606      	mov	r6, r0
 8003f62:	460f      	mov	r7, r1
 8003f64:	4614      	mov	r4, r2
 8003f66:	18d5      	adds	r5, r2, r3
 8003f68:	42ac      	cmp	r4, r5
 8003f6a:	d101      	bne.n	8003f70 <__sfputs_r+0x12>
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e007      	b.n	8003f80 <__sfputs_r+0x22>
 8003f70:	463a      	mov	r2, r7
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7ff ffdc 	bl	8003f34 <__sfputc_r>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d1f3      	bne.n	8003f68 <__sfputs_r+0xa>
 8003f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f84 <_vfiprintf_r>:
 8003f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f88:	460c      	mov	r4, r1
 8003f8a:	b09d      	sub	sp, #116	; 0x74
 8003f8c:	4617      	mov	r7, r2
 8003f8e:	461d      	mov	r5, r3
 8003f90:	4606      	mov	r6, r0
 8003f92:	b118      	cbz	r0, 8003f9c <_vfiprintf_r+0x18>
 8003f94:	6983      	ldr	r3, [r0, #24]
 8003f96:	b90b      	cbnz	r3, 8003f9c <_vfiprintf_r+0x18>
 8003f98:	f7ff fe38 	bl	8003c0c <__sinit>
 8003f9c:	4b7c      	ldr	r3, [pc, #496]	; (8004190 <_vfiprintf_r+0x20c>)
 8003f9e:	429c      	cmp	r4, r3
 8003fa0:	d158      	bne.n	8004054 <_vfiprintf_r+0xd0>
 8003fa2:	6874      	ldr	r4, [r6, #4]
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	0718      	lsls	r0, r3, #28
 8003fa8:	d55e      	bpl.n	8004068 <_vfiprintf_r+0xe4>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05b      	beq.n	8004068 <_vfiprintf_r+0xe4>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fba:	2330      	movs	r3, #48	; 0x30
 8003fbc:	f04f 0b01 	mov.w	fp, #1
 8003fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fc4:	9503      	str	r5, [sp, #12]
 8003fc6:	46b8      	mov	r8, r7
 8003fc8:	4645      	mov	r5, r8
 8003fca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003fce:	b10b      	cbz	r3, 8003fd4 <_vfiprintf_r+0x50>
 8003fd0:	2b25      	cmp	r3, #37	; 0x25
 8003fd2:	d154      	bne.n	800407e <_vfiprintf_r+0xfa>
 8003fd4:	ebb8 0a07 	subs.w	sl, r8, r7
 8003fd8:	d00b      	beq.n	8003ff2 <_vfiprintf_r+0x6e>
 8003fda:	4653      	mov	r3, sl
 8003fdc:	463a      	mov	r2, r7
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f7ff ffbc 	bl	8003f5e <__sfputs_r>
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	f000 80c2 	beq.w	8004170 <_vfiprintf_r+0x1ec>
 8003fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fee:	4453      	add	r3, sl
 8003ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff2:	f898 3000 	ldrb.w	r3, [r8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80ba 	beq.w	8004170 <_vfiprintf_r+0x1ec>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8004002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004006:	9304      	str	r3, [sp, #16]
 8004008:	9307      	str	r3, [sp, #28]
 800400a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800400e:	931a      	str	r3, [sp, #104]	; 0x68
 8004010:	46a8      	mov	r8, r5
 8004012:	2205      	movs	r2, #5
 8004014:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004018:	485e      	ldr	r0, [pc, #376]	; (8004194 <_vfiprintf_r+0x210>)
 800401a:	f000 fafb 	bl	8004614 <memchr>
 800401e:	9b04      	ldr	r3, [sp, #16]
 8004020:	bb78      	cbnz	r0, 8004082 <_vfiprintf_r+0xfe>
 8004022:	06d9      	lsls	r1, r3, #27
 8004024:	bf44      	itt	mi
 8004026:	2220      	movmi	r2, #32
 8004028:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800402c:	071a      	lsls	r2, r3, #28
 800402e:	bf44      	itt	mi
 8004030:	222b      	movmi	r2, #43	; 0x2b
 8004032:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004036:	782a      	ldrb	r2, [r5, #0]
 8004038:	2a2a      	cmp	r2, #42	; 0x2a
 800403a:	d02a      	beq.n	8004092 <_vfiprintf_r+0x10e>
 800403c:	46a8      	mov	r8, r5
 800403e:	2000      	movs	r0, #0
 8004040:	250a      	movs	r5, #10
 8004042:	9a07      	ldr	r2, [sp, #28]
 8004044:	4641      	mov	r1, r8
 8004046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800404a:	3b30      	subs	r3, #48	; 0x30
 800404c:	2b09      	cmp	r3, #9
 800404e:	d969      	bls.n	8004124 <_vfiprintf_r+0x1a0>
 8004050:	b360      	cbz	r0, 80040ac <_vfiprintf_r+0x128>
 8004052:	e024      	b.n	800409e <_vfiprintf_r+0x11a>
 8004054:	4b50      	ldr	r3, [pc, #320]	; (8004198 <_vfiprintf_r+0x214>)
 8004056:	429c      	cmp	r4, r3
 8004058:	d101      	bne.n	800405e <_vfiprintf_r+0xda>
 800405a:	68b4      	ldr	r4, [r6, #8]
 800405c:	e7a2      	b.n	8003fa4 <_vfiprintf_r+0x20>
 800405e:	4b4f      	ldr	r3, [pc, #316]	; (800419c <_vfiprintf_r+0x218>)
 8004060:	429c      	cmp	r4, r3
 8004062:	bf08      	it	eq
 8004064:	68f4      	ldreq	r4, [r6, #12]
 8004066:	e79d      	b.n	8003fa4 <_vfiprintf_r+0x20>
 8004068:	4621      	mov	r1, r4
 800406a:	4630      	mov	r0, r6
 800406c:	f7ff fc70 	bl	8003950 <__swsetup_r>
 8004070:	2800      	cmp	r0, #0
 8004072:	d09d      	beq.n	8003fb0 <_vfiprintf_r+0x2c>
 8004074:	f04f 30ff 	mov.w	r0, #4294967295
 8004078:	b01d      	add	sp, #116	; 0x74
 800407a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407e:	46a8      	mov	r8, r5
 8004080:	e7a2      	b.n	8003fc8 <_vfiprintf_r+0x44>
 8004082:	4a44      	ldr	r2, [pc, #272]	; (8004194 <_vfiprintf_r+0x210>)
 8004084:	4645      	mov	r5, r8
 8004086:	1a80      	subs	r0, r0, r2
 8004088:	fa0b f000 	lsl.w	r0, fp, r0
 800408c:	4318      	orrs	r0, r3
 800408e:	9004      	str	r0, [sp, #16]
 8004090:	e7be      	b.n	8004010 <_vfiprintf_r+0x8c>
 8004092:	9a03      	ldr	r2, [sp, #12]
 8004094:	1d11      	adds	r1, r2, #4
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	9103      	str	r1, [sp, #12]
 800409a:	2a00      	cmp	r2, #0
 800409c:	db01      	blt.n	80040a2 <_vfiprintf_r+0x11e>
 800409e:	9207      	str	r2, [sp, #28]
 80040a0:	e004      	b.n	80040ac <_vfiprintf_r+0x128>
 80040a2:	4252      	negs	r2, r2
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	9207      	str	r2, [sp, #28]
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	f898 3000 	ldrb.w	r3, [r8]
 80040b0:	2b2e      	cmp	r3, #46	; 0x2e
 80040b2:	d10e      	bne.n	80040d2 <_vfiprintf_r+0x14e>
 80040b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80040b8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ba:	d138      	bne.n	800412e <_vfiprintf_r+0x1aa>
 80040bc:	9b03      	ldr	r3, [sp, #12]
 80040be:	f108 0802 	add.w	r8, r8, #2
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	9203      	str	r2, [sp, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bfb8      	it	lt
 80040cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80040d0:	9305      	str	r3, [sp, #20]
 80040d2:	4d33      	ldr	r5, [pc, #204]	; (80041a0 <_vfiprintf_r+0x21c>)
 80040d4:	2203      	movs	r2, #3
 80040d6:	f898 1000 	ldrb.w	r1, [r8]
 80040da:	4628      	mov	r0, r5
 80040dc:	f000 fa9a 	bl	8004614 <memchr>
 80040e0:	b140      	cbz	r0, 80040f4 <_vfiprintf_r+0x170>
 80040e2:	2340      	movs	r3, #64	; 0x40
 80040e4:	1b40      	subs	r0, r0, r5
 80040e6:	fa03 f000 	lsl.w	r0, r3, r0
 80040ea:	9b04      	ldr	r3, [sp, #16]
 80040ec:	f108 0801 	add.w	r8, r8, #1
 80040f0:	4303      	orrs	r3, r0
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	f898 1000 	ldrb.w	r1, [r8]
 80040f8:	2206      	movs	r2, #6
 80040fa:	482a      	ldr	r0, [pc, #168]	; (80041a4 <_vfiprintf_r+0x220>)
 80040fc:	f108 0701 	add.w	r7, r8, #1
 8004100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004104:	f000 fa86 	bl	8004614 <memchr>
 8004108:	2800      	cmp	r0, #0
 800410a:	d037      	beq.n	800417c <_vfiprintf_r+0x1f8>
 800410c:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <_vfiprintf_r+0x224>)
 800410e:	bb1b      	cbnz	r3, 8004158 <_vfiprintf_r+0x1d4>
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	3307      	adds	r3, #7
 8004114:	f023 0307 	bic.w	r3, r3, #7
 8004118:	3308      	adds	r3, #8
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411e:	444b      	add	r3, r9
 8004120:	9309      	str	r3, [sp, #36]	; 0x24
 8004122:	e750      	b.n	8003fc6 <_vfiprintf_r+0x42>
 8004124:	fb05 3202 	mla	r2, r5, r2, r3
 8004128:	2001      	movs	r0, #1
 800412a:	4688      	mov	r8, r1
 800412c:	e78a      	b.n	8004044 <_vfiprintf_r+0xc0>
 800412e:	2300      	movs	r3, #0
 8004130:	250a      	movs	r5, #10
 8004132:	4619      	mov	r1, r3
 8004134:	f108 0801 	add.w	r8, r8, #1
 8004138:	9305      	str	r3, [sp, #20]
 800413a:	4640      	mov	r0, r8
 800413c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004140:	3a30      	subs	r2, #48	; 0x30
 8004142:	2a09      	cmp	r2, #9
 8004144:	d903      	bls.n	800414e <_vfiprintf_r+0x1ca>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0c3      	beq.n	80040d2 <_vfiprintf_r+0x14e>
 800414a:	9105      	str	r1, [sp, #20]
 800414c:	e7c1      	b.n	80040d2 <_vfiprintf_r+0x14e>
 800414e:	fb05 2101 	mla	r1, r5, r1, r2
 8004152:	2301      	movs	r3, #1
 8004154:	4680      	mov	r8, r0
 8004156:	e7f0      	b.n	800413a <_vfiprintf_r+0x1b6>
 8004158:	ab03      	add	r3, sp, #12
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4622      	mov	r2, r4
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <_vfiprintf_r+0x228>)
 8004160:	a904      	add	r1, sp, #16
 8004162:	4630      	mov	r0, r6
 8004164:	f3af 8000 	nop.w
 8004168:	f1b0 3fff 	cmp.w	r0, #4294967295
 800416c:	4681      	mov	r9, r0
 800416e:	d1d5      	bne.n	800411c <_vfiprintf_r+0x198>
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	065b      	lsls	r3, r3, #25
 8004174:	f53f af7e 	bmi.w	8004074 <_vfiprintf_r+0xf0>
 8004178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800417a:	e77d      	b.n	8004078 <_vfiprintf_r+0xf4>
 800417c:	ab03      	add	r3, sp, #12
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	4622      	mov	r2, r4
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <_vfiprintf_r+0x228>)
 8004184:	a904      	add	r1, sp, #16
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f888 	bl	800429c <_printf_i>
 800418c:	e7ec      	b.n	8004168 <_vfiprintf_r+0x1e4>
 800418e:	bf00      	nop
 8004190:	0800477c 	.word	0x0800477c
 8004194:	080047bc 	.word	0x080047bc
 8004198:	0800479c 	.word	0x0800479c
 800419c:	0800475c 	.word	0x0800475c
 80041a0:	080047c2 	.word	0x080047c2
 80041a4:	080047c6 	.word	0x080047c6
 80041a8:	00000000 	.word	0x00000000
 80041ac:	08003f5f 	.word	0x08003f5f

080041b0 <_printf_common>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	4691      	mov	r9, r2
 80041b6:	461f      	mov	r7, r3
 80041b8:	688a      	ldr	r2, [r1, #8]
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	4606      	mov	r6, r0
 80041be:	4293      	cmp	r3, r2
 80041c0:	bfb8      	it	lt
 80041c2:	4613      	movlt	r3, r2
 80041c4:	f8c9 3000 	str.w	r3, [r9]
 80041c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041cc:	460c      	mov	r4, r1
 80041ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d2:	b112      	cbz	r2, 80041da <_printf_common+0x2a>
 80041d4:	3301      	adds	r3, #1
 80041d6:	f8c9 3000 	str.w	r3, [r9]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	0699      	lsls	r1, r3, #26
 80041de:	bf42      	ittt	mi
 80041e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041e4:	3302      	addmi	r3, #2
 80041e6:	f8c9 3000 	strmi.w	r3, [r9]
 80041ea:	6825      	ldr	r5, [r4, #0]
 80041ec:	f015 0506 	ands.w	r5, r5, #6
 80041f0:	d107      	bne.n	8004202 <_printf_common+0x52>
 80041f2:	f104 0a19 	add.w	sl, r4, #25
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	f8d9 2000 	ldr.w	r2, [r9]
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	42ab      	cmp	r3, r5
 8004200:	dc29      	bgt.n	8004256 <_printf_common+0xa6>
 8004202:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	3300      	adds	r3, #0
 800420a:	bf18      	it	ne
 800420c:	2301      	movne	r3, #1
 800420e:	0692      	lsls	r2, r2, #26
 8004210:	d42e      	bmi.n	8004270 <_printf_common+0xc0>
 8004212:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004216:	4639      	mov	r1, r7
 8004218:	4630      	mov	r0, r6
 800421a:	47c0      	blx	r8
 800421c:	3001      	adds	r0, #1
 800421e:	d021      	beq.n	8004264 <_printf_common+0xb4>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	68e5      	ldr	r5, [r4, #12]
 8004224:	f003 0306 	and.w	r3, r3, #6
 8004228:	2b04      	cmp	r3, #4
 800422a:	bf18      	it	ne
 800422c:	2500      	movne	r5, #0
 800422e:	f8d9 2000 	ldr.w	r2, [r9]
 8004232:	f04f 0900 	mov.w	r9, #0
 8004236:	bf08      	it	eq
 8004238:	1aad      	subeq	r5, r5, r2
 800423a:	68a3      	ldr	r3, [r4, #8]
 800423c:	6922      	ldr	r2, [r4, #16]
 800423e:	bf08      	it	eq
 8004240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004244:	4293      	cmp	r3, r2
 8004246:	bfc4      	itt	gt
 8004248:	1a9b      	subgt	r3, r3, r2
 800424a:	18ed      	addgt	r5, r5, r3
 800424c:	341a      	adds	r4, #26
 800424e:	454d      	cmp	r5, r9
 8004250:	d11a      	bne.n	8004288 <_printf_common+0xd8>
 8004252:	2000      	movs	r0, #0
 8004254:	e008      	b.n	8004268 <_printf_common+0xb8>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4639      	mov	r1, r7
 800425c:	4630      	mov	r0, r6
 800425e:	47c0      	blx	r8
 8004260:	3001      	adds	r0, #1
 8004262:	d103      	bne.n	800426c <_printf_common+0xbc>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	3501      	adds	r5, #1
 800426e:	e7c2      	b.n	80041f6 <_printf_common+0x46>
 8004270:	2030      	movs	r0, #48	; 0x30
 8004272:	18e1      	adds	r1, r4, r3
 8004274:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800427e:	4422      	add	r2, r4
 8004280:	3302      	adds	r3, #2
 8004282:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004286:	e7c4      	b.n	8004212 <_printf_common+0x62>
 8004288:	2301      	movs	r3, #1
 800428a:	4622      	mov	r2, r4
 800428c:	4639      	mov	r1, r7
 800428e:	4630      	mov	r0, r6
 8004290:	47c0      	blx	r8
 8004292:	3001      	adds	r0, #1
 8004294:	d0e6      	beq.n	8004264 <_printf_common+0xb4>
 8004296:	f109 0901 	add.w	r9, r9, #1
 800429a:	e7d8      	b.n	800424e <_printf_common+0x9e>

0800429c <_printf_i>:
 800429c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042a4:	460c      	mov	r4, r1
 80042a6:	7e09      	ldrb	r1, [r1, #24]
 80042a8:	b085      	sub	sp, #20
 80042aa:	296e      	cmp	r1, #110	; 0x6e
 80042ac:	4617      	mov	r7, r2
 80042ae:	4606      	mov	r6, r0
 80042b0:	4698      	mov	r8, r3
 80042b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042b4:	f000 80b3 	beq.w	800441e <_printf_i+0x182>
 80042b8:	d822      	bhi.n	8004300 <_printf_i+0x64>
 80042ba:	2963      	cmp	r1, #99	; 0x63
 80042bc:	d036      	beq.n	800432c <_printf_i+0x90>
 80042be:	d80a      	bhi.n	80042d6 <_printf_i+0x3a>
 80042c0:	2900      	cmp	r1, #0
 80042c2:	f000 80b9 	beq.w	8004438 <_printf_i+0x19c>
 80042c6:	2958      	cmp	r1, #88	; 0x58
 80042c8:	f000 8083 	beq.w	80043d2 <_printf_i+0x136>
 80042cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80042d4:	e032      	b.n	800433c <_printf_i+0xa0>
 80042d6:	2964      	cmp	r1, #100	; 0x64
 80042d8:	d001      	beq.n	80042de <_printf_i+0x42>
 80042da:	2969      	cmp	r1, #105	; 0x69
 80042dc:	d1f6      	bne.n	80042cc <_printf_i+0x30>
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	6813      	ldr	r3, [r2, #0]
 80042e2:	0605      	lsls	r5, r0, #24
 80042e4:	f103 0104 	add.w	r1, r3, #4
 80042e8:	d52a      	bpl.n	8004340 <_printf_i+0xa4>
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da03      	bge.n	80042fa <_printf_i+0x5e>
 80042f2:	222d      	movs	r2, #45	; 0x2d
 80042f4:	425b      	negs	r3, r3
 80042f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042fa:	486f      	ldr	r0, [pc, #444]	; (80044b8 <_printf_i+0x21c>)
 80042fc:	220a      	movs	r2, #10
 80042fe:	e039      	b.n	8004374 <_printf_i+0xd8>
 8004300:	2973      	cmp	r1, #115	; 0x73
 8004302:	f000 809d 	beq.w	8004440 <_printf_i+0x1a4>
 8004306:	d808      	bhi.n	800431a <_printf_i+0x7e>
 8004308:	296f      	cmp	r1, #111	; 0x6f
 800430a:	d020      	beq.n	800434e <_printf_i+0xb2>
 800430c:	2970      	cmp	r1, #112	; 0x70
 800430e:	d1dd      	bne.n	80042cc <_printf_i+0x30>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	f043 0320 	orr.w	r3, r3, #32
 8004316:	6023      	str	r3, [r4, #0]
 8004318:	e003      	b.n	8004322 <_printf_i+0x86>
 800431a:	2975      	cmp	r1, #117	; 0x75
 800431c:	d017      	beq.n	800434e <_printf_i+0xb2>
 800431e:	2978      	cmp	r1, #120	; 0x78
 8004320:	d1d4      	bne.n	80042cc <_printf_i+0x30>
 8004322:	2378      	movs	r3, #120	; 0x78
 8004324:	4865      	ldr	r0, [pc, #404]	; (80044bc <_printf_i+0x220>)
 8004326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800432a:	e055      	b.n	80043d8 <_printf_i+0x13c>
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004332:	1d19      	adds	r1, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6011      	str	r1, [r2, #0]
 8004338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800433c:	2301      	movs	r3, #1
 800433e:	e08c      	b.n	800445a <_printf_i+0x1be>
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004346:	6011      	str	r1, [r2, #0]
 8004348:	bf18      	it	ne
 800434a:	b21b      	sxthne	r3, r3
 800434c:	e7cf      	b.n	80042ee <_printf_i+0x52>
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	6825      	ldr	r5, [r4, #0]
 8004352:	1d18      	adds	r0, r3, #4
 8004354:	6010      	str	r0, [r2, #0]
 8004356:	0628      	lsls	r0, r5, #24
 8004358:	d501      	bpl.n	800435e <_printf_i+0xc2>
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	e002      	b.n	8004364 <_printf_i+0xc8>
 800435e:	0668      	lsls	r0, r5, #25
 8004360:	d5fb      	bpl.n	800435a <_printf_i+0xbe>
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	296f      	cmp	r1, #111	; 0x6f
 8004366:	bf14      	ite	ne
 8004368:	220a      	movne	r2, #10
 800436a:	2208      	moveq	r2, #8
 800436c:	4852      	ldr	r0, [pc, #328]	; (80044b8 <_printf_i+0x21c>)
 800436e:	2100      	movs	r1, #0
 8004370:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004374:	6865      	ldr	r5, [r4, #4]
 8004376:	2d00      	cmp	r5, #0
 8004378:	60a5      	str	r5, [r4, #8]
 800437a:	f2c0 8095 	blt.w	80044a8 <_printf_i+0x20c>
 800437e:	6821      	ldr	r1, [r4, #0]
 8004380:	f021 0104 	bic.w	r1, r1, #4
 8004384:	6021      	str	r1, [r4, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d13d      	bne.n	8004406 <_printf_i+0x16a>
 800438a:	2d00      	cmp	r5, #0
 800438c:	f040 808e 	bne.w	80044ac <_printf_i+0x210>
 8004390:	4665      	mov	r5, ip
 8004392:	2a08      	cmp	r2, #8
 8004394:	d10b      	bne.n	80043ae <_printf_i+0x112>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	07db      	lsls	r3, r3, #31
 800439a:	d508      	bpl.n	80043ae <_printf_i+0x112>
 800439c:	6923      	ldr	r3, [r4, #16]
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	bfde      	ittt	le
 80043a4:	2330      	movle	r3, #48	; 0x30
 80043a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043ae:	ebac 0305 	sub.w	r3, ip, r5
 80043b2:	6123      	str	r3, [r4, #16]
 80043b4:	f8cd 8000 	str.w	r8, [sp]
 80043b8:	463b      	mov	r3, r7
 80043ba:	aa03      	add	r2, sp, #12
 80043bc:	4621      	mov	r1, r4
 80043be:	4630      	mov	r0, r6
 80043c0:	f7ff fef6 	bl	80041b0 <_printf_common>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d14d      	bne.n	8004464 <_printf_i+0x1c8>
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	b005      	add	sp, #20
 80043ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043d2:	4839      	ldr	r0, [pc, #228]	; (80044b8 <_printf_i+0x21c>)
 80043d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80043d8:	6813      	ldr	r3, [r2, #0]
 80043da:	6821      	ldr	r1, [r4, #0]
 80043dc:	1d1d      	adds	r5, r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6015      	str	r5, [r2, #0]
 80043e2:	060a      	lsls	r2, r1, #24
 80043e4:	d50b      	bpl.n	80043fe <_printf_i+0x162>
 80043e6:	07ca      	lsls	r2, r1, #31
 80043e8:	bf44      	itt	mi
 80043ea:	f041 0120 	orrmi.w	r1, r1, #32
 80043ee:	6021      	strmi	r1, [r4, #0]
 80043f0:	b91b      	cbnz	r3, 80043fa <_printf_i+0x15e>
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	f022 0220 	bic.w	r2, r2, #32
 80043f8:	6022      	str	r2, [r4, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	e7b7      	b.n	800436e <_printf_i+0xd2>
 80043fe:	064d      	lsls	r5, r1, #25
 8004400:	bf48      	it	mi
 8004402:	b29b      	uxthmi	r3, r3
 8004404:	e7ef      	b.n	80043e6 <_printf_i+0x14a>
 8004406:	4665      	mov	r5, ip
 8004408:	fbb3 f1f2 	udiv	r1, r3, r2
 800440c:	fb02 3311 	mls	r3, r2, r1, r3
 8004410:	5cc3      	ldrb	r3, [r0, r3]
 8004412:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004416:	460b      	mov	r3, r1
 8004418:	2900      	cmp	r1, #0
 800441a:	d1f5      	bne.n	8004408 <_printf_i+0x16c>
 800441c:	e7b9      	b.n	8004392 <_printf_i+0xf6>
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	1d18      	adds	r0, r3, #4
 8004424:	6961      	ldr	r1, [r4, #20]
 8004426:	6010      	str	r0, [r2, #0]
 8004428:	0628      	lsls	r0, r5, #24
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	d501      	bpl.n	8004432 <_printf_i+0x196>
 800442e:	6019      	str	r1, [r3, #0]
 8004430:	e002      	b.n	8004438 <_printf_i+0x19c>
 8004432:	066a      	lsls	r2, r5, #25
 8004434:	d5fb      	bpl.n	800442e <_printf_i+0x192>
 8004436:	8019      	strh	r1, [r3, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	4665      	mov	r5, ip
 800443c:	6123      	str	r3, [r4, #16]
 800443e:	e7b9      	b.n	80043b4 <_printf_i+0x118>
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	1d19      	adds	r1, r3, #4
 8004444:	6011      	str	r1, [r2, #0]
 8004446:	681d      	ldr	r5, [r3, #0]
 8004448:	6862      	ldr	r2, [r4, #4]
 800444a:	2100      	movs	r1, #0
 800444c:	4628      	mov	r0, r5
 800444e:	f000 f8e1 	bl	8004614 <memchr>
 8004452:	b108      	cbz	r0, 8004458 <_printf_i+0x1bc>
 8004454:	1b40      	subs	r0, r0, r5
 8004456:	6060      	str	r0, [r4, #4]
 8004458:	6863      	ldr	r3, [r4, #4]
 800445a:	6123      	str	r3, [r4, #16]
 800445c:	2300      	movs	r3, #0
 800445e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004462:	e7a7      	b.n	80043b4 <_printf_i+0x118>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	462a      	mov	r2, r5
 8004468:	4639      	mov	r1, r7
 800446a:	4630      	mov	r0, r6
 800446c:	47c0      	blx	r8
 800446e:	3001      	adds	r0, #1
 8004470:	d0aa      	beq.n	80043c8 <_printf_i+0x12c>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	079b      	lsls	r3, r3, #30
 8004476:	d413      	bmi.n	80044a0 <_printf_i+0x204>
 8004478:	68e0      	ldr	r0, [r4, #12]
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	4298      	cmp	r0, r3
 800447e:	bfb8      	it	lt
 8004480:	4618      	movlt	r0, r3
 8004482:	e7a3      	b.n	80043cc <_printf_i+0x130>
 8004484:	2301      	movs	r3, #1
 8004486:	464a      	mov	r2, r9
 8004488:	4639      	mov	r1, r7
 800448a:	4630      	mov	r0, r6
 800448c:	47c0      	blx	r8
 800448e:	3001      	adds	r0, #1
 8004490:	d09a      	beq.n	80043c8 <_printf_i+0x12c>
 8004492:	3501      	adds	r5, #1
 8004494:	68e3      	ldr	r3, [r4, #12]
 8004496:	9a03      	ldr	r2, [sp, #12]
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	42ab      	cmp	r3, r5
 800449c:	dcf2      	bgt.n	8004484 <_printf_i+0x1e8>
 800449e:	e7eb      	b.n	8004478 <_printf_i+0x1dc>
 80044a0:	2500      	movs	r5, #0
 80044a2:	f104 0919 	add.w	r9, r4, #25
 80044a6:	e7f5      	b.n	8004494 <_printf_i+0x1f8>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ac      	bne.n	8004406 <_printf_i+0x16a>
 80044ac:	7803      	ldrb	r3, [r0, #0]
 80044ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b6:	e76c      	b.n	8004392 <_printf_i+0xf6>
 80044b8:	080047cd 	.word	0x080047cd
 80044bc:	080047de 	.word	0x080047de

080044c0 <_sbrk_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	2300      	movs	r3, #0
 80044c4:	4c05      	ldr	r4, [pc, #20]	; (80044dc <_sbrk_r+0x1c>)
 80044c6:	4605      	mov	r5, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	f7fc ffa2 	bl	8001414 <_sbrk>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_sbrk_r+0x1a>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	b103      	cbz	r3, 80044da <_sbrk_r+0x1a>
 80044d8:	602b      	str	r3, [r5, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	200001ac 	.word	0x200001ac

080044e0 <__sread>:
 80044e0:	b510      	push	{r4, lr}
 80044e2:	460c      	mov	r4, r1
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	f000 f8a4 	bl	8004634 <_read_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	bfab      	itete	ge
 80044f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044f2:	89a3      	ldrhlt	r3, [r4, #12]
 80044f4:	181b      	addge	r3, r3, r0
 80044f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044fa:	bfac      	ite	ge
 80044fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044fe:	81a3      	strhlt	r3, [r4, #12]
 8004500:	bd10      	pop	{r4, pc}

08004502 <__swrite>:
 8004502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004506:	461f      	mov	r7, r3
 8004508:	898b      	ldrh	r3, [r1, #12]
 800450a:	4605      	mov	r5, r0
 800450c:	05db      	lsls	r3, r3, #23
 800450e:	460c      	mov	r4, r1
 8004510:	4616      	mov	r6, r2
 8004512:	d505      	bpl.n	8004520 <__swrite+0x1e>
 8004514:	2302      	movs	r3, #2
 8004516:	2200      	movs	r2, #0
 8004518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451c:	f000 f868 	bl	80045f0 <_lseek_r>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	4632      	mov	r2, r6
 8004524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800452e:	463b      	mov	r3, r7
 8004530:	4628      	mov	r0, r5
 8004532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	f000 b817 	b.w	8004568 <_write_r>

0800453a <__sseek>:
 800453a:	b510      	push	{r4, lr}
 800453c:	460c      	mov	r4, r1
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 f855 	bl	80045f0 <_lseek_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	bf15      	itete	ne
 800454c:	6560      	strne	r0, [r4, #84]	; 0x54
 800454e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004556:	81a3      	strheq	r3, [r4, #12]
 8004558:	bf18      	it	ne
 800455a:	81a3      	strhne	r3, [r4, #12]
 800455c:	bd10      	pop	{r4, pc}

0800455e <__sclose>:
 800455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004562:	f000 b813 	b.w	800458c <_close_r>
	...

08004568 <_write_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4605      	mov	r5, r0
 800456c:	4608      	mov	r0, r1
 800456e:	4611      	mov	r1, r2
 8004570:	2200      	movs	r2, #0
 8004572:	4c05      	ldr	r4, [pc, #20]	; (8004588 <_write_r+0x20>)
 8004574:	6022      	str	r2, [r4, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	f7fc feff 	bl	800137a <_write>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_write_r+0x1e>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	b103      	cbz	r3, 8004586 <_write_r+0x1e>
 8004584:	602b      	str	r3, [r5, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	200001ac 	.word	0x200001ac

0800458c <_close_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	2300      	movs	r3, #0
 8004590:	4c05      	ldr	r4, [pc, #20]	; (80045a8 <_close_r+0x1c>)
 8004592:	4605      	mov	r5, r0
 8004594:	4608      	mov	r0, r1
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	f7fc ff0b 	bl	80013b2 <_close>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_close_r+0x1a>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_close_r+0x1a>
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200001ac 	.word	0x200001ac

080045ac <_fstat_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	2300      	movs	r3, #0
 80045b0:	4c06      	ldr	r4, [pc, #24]	; (80045cc <_fstat_r+0x20>)
 80045b2:	4605      	mov	r5, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	f7fc ff05 	bl	80013c8 <_fstat>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d102      	bne.n	80045c8 <_fstat_r+0x1c>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	b103      	cbz	r3, 80045c8 <_fstat_r+0x1c>
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
 80045ca:	bf00      	nop
 80045cc:	200001ac 	.word	0x200001ac

080045d0 <_isatty_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	2300      	movs	r3, #0
 80045d4:	4c05      	ldr	r4, [pc, #20]	; (80045ec <_isatty_r+0x1c>)
 80045d6:	4605      	mov	r5, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	f7fc ff03 	bl	80013e6 <_isatty>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_isatty_r+0x1a>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_isatty_r+0x1a>
 80045e8:	602b      	str	r3, [r5, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	200001ac 	.word	0x200001ac

080045f0 <_lseek_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4605      	mov	r5, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	2200      	movs	r2, #0
 80045fa:	4c05      	ldr	r4, [pc, #20]	; (8004610 <_lseek_r+0x20>)
 80045fc:	6022      	str	r2, [r4, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	f7fc fefb 	bl	80013fa <_lseek>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	d102      	bne.n	800460e <_lseek_r+0x1e>
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	b103      	cbz	r3, 800460e <_lseek_r+0x1e>
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	bd38      	pop	{r3, r4, r5, pc}
 8004610:	200001ac 	.word	0x200001ac

08004614 <memchr>:
 8004614:	b510      	push	{r4, lr}
 8004616:	b2c9      	uxtb	r1, r1
 8004618:	4402      	add	r2, r0
 800461a:	4290      	cmp	r0, r2
 800461c:	4603      	mov	r3, r0
 800461e:	d101      	bne.n	8004624 <memchr+0x10>
 8004620:	2300      	movs	r3, #0
 8004622:	e003      	b.n	800462c <memchr+0x18>
 8004624:	781c      	ldrb	r4, [r3, #0]
 8004626:	3001      	adds	r0, #1
 8004628:	428c      	cmp	r4, r1
 800462a:	d1f6      	bne.n	800461a <memchr+0x6>
 800462c:	4618      	mov	r0, r3
 800462e:	bd10      	pop	{r4, pc}

08004630 <__malloc_lock>:
 8004630:	4770      	bx	lr

08004632 <__malloc_unlock>:
 8004632:	4770      	bx	lr

08004634 <_read_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4605      	mov	r5, r0
 8004638:	4608      	mov	r0, r1
 800463a:	4611      	mov	r1, r2
 800463c:	2200      	movs	r2, #0
 800463e:	4c05      	ldr	r4, [pc, #20]	; (8004654 <_read_r+0x20>)
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	f7fc fe7c 	bl	8001340 <_read>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d102      	bne.n	8004652 <_read_r+0x1e>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	b103      	cbz	r3, 8004652 <_read_r+0x1e>
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	200001ac 	.word	0x200001ac

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
