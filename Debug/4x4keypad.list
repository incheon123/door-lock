
4x4keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb8  08004fb8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004fb8  08004fb8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fb8  08004fb8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000088  08005048  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005048  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107cd  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002414  00000000  00000000  0003087e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00032c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  00033d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000197ed  00000000  00000000  00034dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc4b  00000000  00000000  0004e5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e7d4  00000000  00000000  0005b200  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e99d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e6c  00000000  00000000  000e9a50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e10 	.word	0x08004e10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004e10 	.word	0x08004e10

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <scan_Rx>:
short enable_remainTime_progress = 0;

static Pos pos;

char scan_Rx(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016a:	4890      	ldr	r0, [pc, #576]	; (80003ac <scan_Rx+0x24c>)
 800016c:	f001 fd67 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000176:	488e      	ldr	r0, [pc, #568]	; (80003b0 <scan_Rx+0x250>)
 8000178:	f001 fd61 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000182:	488b      	ldr	r0, [pc, #556]	; (80003b0 <scan_Rx+0x250>)
 8000184:	f001 fd5b 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2180      	movs	r1, #128	; 0x80
 800018c:	4889      	ldr	r0, [pc, #548]	; (80003b4 <scan_Rx+0x254>)
 800018e:	f001 fd56 	bl	8001c3e <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000192:	2110      	movs	r1, #16
 8000194:	4885      	ldr	r0, [pc, #532]	; (80003ac <scan_Rx+0x24c>)
 8000196:	f001 fd3b 	bl	8001c10 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d109      	bne.n	80001b4 <scan_Rx+0x54>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80001a0:	bf00      	nop
 80001a2:	2110      	movs	r1, #16
 80001a4:	4881      	ldr	r0, [pc, #516]	; (80003ac <scan_Rx+0x24c>)
 80001a6:	f001 fd33 	bl	8001c10 <HAL_GPIO_ReadPin>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0f8      	beq.n	80001a2 <scan_Rx+0x42>
		return '1';
 80001b0:	2331      	movs	r3, #49	; 0x31
 80001b2:	e0f8      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80001b4:	2120      	movs	r1, #32
 80001b6:	487d      	ldr	r0, [pc, #500]	; (80003ac <scan_Rx+0x24c>)
 80001b8:	f001 fd2a 	bl	8001c10 <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d109      	bne.n	80001d6 <scan_Rx+0x76>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80001c2:	bf00      	nop
 80001c4:	2120      	movs	r1, #32
 80001c6:	4879      	ldr	r0, [pc, #484]	; (80003ac <scan_Rx+0x24c>)
 80001c8:	f001 fd22 	bl	8001c10 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f8      	beq.n	80001c4 <scan_Rx+0x64>
		return '2';
 80001d2:	2332      	movs	r3, #50	; 0x32
 80001d4:	e0e7      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80001d6:	2108      	movs	r1, #8
 80001d8:	4874      	ldr	r0, [pc, #464]	; (80003ac <scan_Rx+0x24c>)
 80001da:	f001 fd19 	bl	8001c10 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d109      	bne.n	80001f8 <scan_Rx+0x98>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80001e4:	bf00      	nop
 80001e6:	2108      	movs	r1, #8
 80001e8:	4870      	ldr	r0, [pc, #448]	; (80003ac <scan_Rx+0x24c>)
 80001ea:	f001 fd11 	bl	8001c10 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f8      	beq.n	80001e6 <scan_Rx+0x86>
		return '3';
 80001f4:	2333      	movs	r3, #51	; 0x33
 80001f6:	e0d6      	b.n	80003a6 <scan_Rx+0x246>
//	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
//	{
//		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
//		return 'A';
//	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fe:	486b      	ldr	r0, [pc, #428]	; (80003ac <scan_Rx+0x24c>)
 8000200:	f001 fd1d 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800020a:	4869      	ldr	r0, [pc, #420]	; (80003b0 <scan_Rx+0x250>)
 800020c:	f001 fd17 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000216:	4866      	ldr	r0, [pc, #408]	; (80003b0 <scan_Rx+0x250>)
 8000218:	f001 fd11 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2180      	movs	r1, #128	; 0x80
 8000220:	4864      	ldr	r0, [pc, #400]	; (80003b4 <scan_Rx+0x254>)
 8000222:	f001 fd0c 	bl	8001c3e <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000226:	2110      	movs	r1, #16
 8000228:	4860      	ldr	r0, [pc, #384]	; (80003ac <scan_Rx+0x24c>)
 800022a:	f001 fcf1 	bl	8001c10 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d109      	bne.n	8000248 <scan_Rx+0xe8>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000234:	bf00      	nop
 8000236:	2110      	movs	r1, #16
 8000238:	485c      	ldr	r0, [pc, #368]	; (80003ac <scan_Rx+0x24c>)
 800023a:	f001 fce9 	bl	8001c10 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f8      	beq.n	8000236 <scan_Rx+0xd6>
		return '4';
 8000244:	2334      	movs	r3, #52	; 0x34
 8000246:	e0ae      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000248:	2120      	movs	r1, #32
 800024a:	4858      	ldr	r0, [pc, #352]	; (80003ac <scan_Rx+0x24c>)
 800024c:	f001 fce0 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d109      	bne.n	800026a <scan_Rx+0x10a>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000256:	bf00      	nop
 8000258:	2120      	movs	r1, #32
 800025a:	4854      	ldr	r0, [pc, #336]	; (80003ac <scan_Rx+0x24c>)
 800025c:	f001 fcd8 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f8      	beq.n	8000258 <scan_Rx+0xf8>
		return '5';
 8000266:	2335      	movs	r3, #53	; 0x35
 8000268:	e09d      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 800026a:	2108      	movs	r1, #8
 800026c:	484f      	ldr	r0, [pc, #316]	; (80003ac <scan_Rx+0x24c>)
 800026e:	f001 fccf 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d109      	bne.n	800028c <scan_Rx+0x12c>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000278:	bf00      	nop
 800027a:	2108      	movs	r1, #8
 800027c:	484b      	ldr	r0, [pc, #300]	; (80003ac <scan_Rx+0x24c>)
 800027e:	f001 fcc7 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f8      	beq.n	800027a <scan_Rx+0x11a>
		return '6';
 8000288:	2336      	movs	r3, #54	; 0x36
 800028a:	e08c      	b.n	80003a6 <scan_Rx+0x246>
//	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
//	{
//		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
//		return 'B';
//	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000292:	4846      	ldr	r0, [pc, #280]	; (80003ac <scan_Rx+0x24c>)
 8000294:	f001 fcd3 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029e:	4844      	ldr	r0, [pc, #272]	; (80003b0 <scan_Rx+0x250>)
 80002a0:	f001 fccd 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002aa:	4841      	ldr	r0, [pc, #260]	; (80003b0 <scan_Rx+0x250>)
 80002ac:	f001 fcc7 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	483f      	ldr	r0, [pc, #252]	; (80003b4 <scan_Rx+0x254>)
 80002b6:	f001 fcc2 	bl	8001c3e <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80002ba:	2110      	movs	r1, #16
 80002bc:	483b      	ldr	r0, [pc, #236]	; (80003ac <scan_Rx+0x24c>)
 80002be:	f001 fca7 	bl	8001c10 <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d109      	bne.n	80002dc <scan_Rx+0x17c>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80002c8:	bf00      	nop
 80002ca:	2110      	movs	r1, #16
 80002cc:	4837      	ldr	r0, [pc, #220]	; (80003ac <scan_Rx+0x24c>)
 80002ce:	f001 fc9f 	bl	8001c10 <HAL_GPIO_ReadPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f8      	beq.n	80002ca <scan_Rx+0x16a>
		return '7';
 80002d8:	2337      	movs	r3, #55	; 0x37
 80002da:	e064      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80002dc:	2120      	movs	r1, #32
 80002de:	4833      	ldr	r0, [pc, #204]	; (80003ac <scan_Rx+0x24c>)
 80002e0:	f001 fc96 	bl	8001c10 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d109      	bne.n	80002fe <scan_Rx+0x19e>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80002ea:	bf00      	nop
 80002ec:	2120      	movs	r1, #32
 80002ee:	482f      	ldr	r0, [pc, #188]	; (80003ac <scan_Rx+0x24c>)
 80002f0:	f001 fc8e 	bl	8001c10 <HAL_GPIO_ReadPin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f8      	beq.n	80002ec <scan_Rx+0x18c>
		return '8';
 80002fa:	2338      	movs	r3, #56	; 0x38
 80002fc:	e053      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80002fe:	2108      	movs	r1, #8
 8000300:	482a      	ldr	r0, [pc, #168]	; (80003ac <scan_Rx+0x24c>)
 8000302:	f001 fc85 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <scan_Rx+0x1c0>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800030c:	bf00      	nop
 800030e:	2108      	movs	r1, #8
 8000310:	4826      	ldr	r0, [pc, #152]	; (80003ac <scan_Rx+0x24c>)
 8000312:	f001 fc7d 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f8      	beq.n	800030e <scan_Rx+0x1ae>
		return '9';
 800031c:	2339      	movs	r3, #57	; 0x39
 800031e:	e042      	b.n	80003a6 <scan_Rx+0x246>
//	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
//	{
//		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
//		return 'C';
//	}
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000326:	4821      	ldr	r0, [pc, #132]	; (80003ac <scan_Rx+0x24c>)
 8000328:	f001 fc89 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000332:	481f      	ldr	r0, [pc, #124]	; (80003b0 <scan_Rx+0x250>)
 8000334:	f001 fc83 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033e:	481c      	ldr	r0, [pc, #112]	; (80003b0 <scan_Rx+0x250>)
 8000340:	f001 fc7d 	bl	8001c3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2180      	movs	r1, #128	; 0x80
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <scan_Rx+0x254>)
 800034a:	f001 fc78 	bl	8001c3e <HAL_GPIO_WritePin>
	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 800034e:	2110      	movs	r1, #16
 8000350:	4816      	ldr	r0, [pc, #88]	; (80003ac <scan_Rx+0x24c>)
 8000352:	f001 fc5d 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d109      	bne.n	8000370 <scan_Rx+0x210>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800035c:	bf00      	nop
 800035e:	2110      	movs	r1, #16
 8000360:	4812      	ldr	r0, [pc, #72]	; (80003ac <scan_Rx+0x24c>)
 8000362:	f001 fc55 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f8      	beq.n	800035e <scan_Rx+0x1fe>
		return '*';
 800036c:	232a      	movs	r3, #42	; 0x2a
 800036e:	e01a      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000370:	2120      	movs	r1, #32
 8000372:	480e      	ldr	r0, [pc, #56]	; (80003ac <scan_Rx+0x24c>)
 8000374:	f001 fc4c 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d109      	bne.n	8000392 <scan_Rx+0x232>
	{

		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800037e:	bf00      	nop
 8000380:	2120      	movs	r1, #32
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <scan_Rx+0x24c>)
 8000384:	f001 fc44 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f8      	beq.n	8000380 <scan_Rx+0x220>
		return '0';
 800038e:	2330      	movs	r3, #48	; 0x30
 8000390:	e009      	b.n	80003a6 <scan_Rx+0x246>
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000392:	2108      	movs	r1, #8
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <scan_Rx+0x24c>)
 8000396:	f001 fc3b 	bl	8001c10 <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d101      	bne.n	80003a4 <scan_Rx+0x244>
	{
//		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
		return '#';
 80003a0:	2323      	movs	r3, #35	; 0x23
 80003a2:	e000      	b.n	80003a6 <scan_Rx+0x246>
	}

	return 255;
 80003a4:	23ff      	movs	r3, #255	; 0xff
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	40010800 	.word	0x40010800
 80003b4:	40011000 	.word	0x40011000

080003b8 <checkPassword>:
/*
 * pw 		 : pw that user press
 * setted_pw : door-lock password
 */
char checkPassword(const char *pw, const char *setted_pw)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	if(!strcmp(pw, setted_pw))
 80003c2:	6839      	ldr	r1, [r7, #0]
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff fec1 	bl	800014c <strcmp>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d106      	bne.n	80003de <checkPassword+0x26>
	{
		printf("Good\n");
 80003d0:	4807      	ldr	r0, [pc, #28]	; (80003f0 <checkPassword+0x38>)
 80003d2:	f003 fe37 	bl	8004044 <puts>
		finish_system("Door Unlocked");
 80003d6:	4807      	ldr	r0, [pc, #28]	; (80003f4 <checkPassword+0x3c>)
 80003d8:	f000 f912 	bl	8000600 <finish_system>
 80003dc:	e002      	b.n	80003e4 <checkPassword+0x2c>
	}else
	{
		printf("Failed!!\n");
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <checkPassword+0x40>)
 80003e0:	f003 fe30 	bl	8004044 <puts>
	}
}
 80003e4:	bf00      	nop
 80003e6:	4618      	mov	r0, r3
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	08004e28 	.word	0x08004e28
 80003f4:	08004e30 	.word	0x08004e30
 80003f8:	08004e40 	.word	0x08004e40

080003fc <set_remain_time_progress>:

void set_remain_time_progress(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	for(int i = 0; i < remain_time; i++)
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	e009      	b.n	800041c <set_remain_time_progress+0x20>
	{
	  HD44780_SetCursor(i, 1);
 8000408:	2101      	movs	r1, #1
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 f9b2 	bl	8000774 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(0xFF);
 8000410:	20ff      	movs	r0, #255	; 0xff
 8000412:	f000 fa35 	bl	8000880 <HD44780_PrintSpecialChar>
	for(int i = 0; i < remain_time; i++)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b09      	cmp	r3, #9
 8000420:	ddf2      	ble.n	8000408 <set_remain_time_progress+0xc>
	}
	enable_remainTime_progress = 1;
 8000422:	4b03      	ldr	r3, [pc, #12]	; (8000430 <set_remain_time_progress+0x34>)
 8000424:	2201      	movs	r2, #1
 8000426:	801a      	strh	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200000a4 	.word	0x200000a4

08000434 <decrease_remainTime>:

void decrease_remainTime(short rt)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	80fb      	strh	r3, [r7, #6]
  HD44780_SetCursor(rt, 1);
 800043e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000442:	2101      	movs	r1, #1
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f995 	bl	8000774 <HD44780_SetCursor>
  HD44780_PrintSpecialChar(0x20);
 800044a:	2020      	movs	r0, #32
 800044c:	f000 fa18 	bl	8000880 <HD44780_PrintSpecialChar>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <set_cursor_pos>:
{
	HD44780_SetCursor(col, row);
	HD44780_PrintSpecialChar(0x20);
}
void set_cursor_pos(short col, short row)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	460a      	mov	r2, r1
 8000462:	80fb      	strh	r3, [r7, #6]
 8000464:	4613      	mov	r3, r2
 8000466:	80bb      	strh	r3, [r7, #4]
	pos.col = col;
 8000468:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <set_cursor_pos+0x4c>)
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	8013      	strh	r3, [r2, #0]
	pos.row = row;
 800046e:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <set_cursor_pos+0x4c>)
 8000470:	88bb      	ldrh	r3, [r7, #4]
 8000472:	8053      	strh	r3, [r2, #2]
	HD44780_SetCursor(col, row);
 8000474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000478:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f978 	bl	8000774 <HD44780_SetCursor>
	printf("col : %d row : %d\n", pos.col, pos.row);
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <set_cursor_pos+0x4c>)
 8000486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800048a:	4619      	mov	r1, r3
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <set_cursor_pos+0x4c>)
 800048e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000492:	461a      	mov	r2, r3
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <set_cursor_pos+0x50>)
 8000496:	f003 fd61 	bl	8003f5c <iprintf>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000a8 	.word	0x200000a8
 80004a8:	08004e4c 	.word	0x08004e4c

080004ac <check_change_pw_key_pressed>:
{
	return pos;
}

short check_change_pw_key_pressed(short* long_press_cnt, short* gp_timer)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 80004b6:	e017      	b.n	80004e8 <check_change_pw_key_pressed+0x3c>
		   !HAL_GPIO_ReadPin(R4_GPIO_Port, R4_Pin) )
	{
		if(*long_press_cnt == 0)	// 0s
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d105      	bne.n	80004ce <check_change_pw_key_pressed+0x22>
		{
			*long_press_cnt = *gp_timer;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	801a      	strh	r2, [r3, #0]
 80004cc:	e00c      	b.n	80004e8 <check_change_pw_key_pressed+0x3c>
		}else if(*gp_timer >= *long_press_cnt + 2000)	// 2s
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004d4:	461a      	mov	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80004e0:	429a      	cmp	r2, r3
 80004e2:	db01      	blt.n	80004e8 <check_change_pw_key_pressed+0x3c>
		{

			return 1;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e011      	b.n	800050c <check_change_pw_key_pressed+0x60>
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 80004e8:	2108      	movs	r1, #8
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <check_change_pw_key_pressed+0x68>)
 80004ec:	f001 fb90 	bl	8001c10 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d106      	bne.n	8000504 <check_change_pw_key_pressed+0x58>
		   !HAL_GPIO_ReadPin(R4_GPIO_Port, R4_Pin) )
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <check_change_pw_key_pressed+0x6c>)
 80004fa:	f001 fb89 	bl	8001c10 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
	while( !HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) &&
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <check_change_pw_key_pressed+0xc>
		}
	}

	*long_press_cnt = 0;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	801a      	strh	r2, [r3, #0]
	return 0;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40010c00 	.word	0x40010c00
 8000518:	40011000 	.word	0x40011000

0800051c <changePassword>:
short changePassword(char original_password[], short size)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	807b      	strh	r3, [r7, #2]
	HD44780_Clear();
 8000528:	f000 f90e 	bl	8000748 <HD44780_Clear>
	HD44780_PrintStr("Change Password");
 800052c:	482b      	ldr	r0, [pc, #172]	; (80005dc <changePassword+0xc0>)
 800052e:	f000 f9b4 	bl	800089a <HD44780_PrintStr>

	char key;
	short pw_idx = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	83fb      	strh	r3, [r7, #30]
	char pw[10] = "\0";
 8000536:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <changePassword+0xc4>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	81bb      	strh	r3, [r7, #12]
 800053c:	f107 030e 	add.w	r3, r7, #14
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
	while(1)
	{
		while((key = scan_Rx()) == 255) ;
 8000546:	bf00      	nop
 8000548:	f7ff fe0a 	bl	8000160 <scan_Rx>
 800054c:	4603      	mov	r3, r0
 800054e:	75fb      	strb	r3, [r7, #23]
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	2bff      	cmp	r3, #255	; 0xff
 8000554:	d0f8      	beq.n	8000548 <changePassword+0x2c>

		if( key == '#')
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	2b23      	cmp	r3, #35	; 0x23
 800055a:	d039      	beq.n	80005d0 <changePassword+0xb4>
		{
			continue;
		}else if(key != '*' && key != 255 && pw_idx < MAX_SIZE)
 800055c:	7dfb      	ldrb	r3, [r7, #23]
 800055e:	2b2a      	cmp	r3, #42	; 0x2a
 8000560:	d01b      	beq.n	800059a <changePassword+0x7e>
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d018      	beq.n	800059a <changePassword+0x7e>
 8000568:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800056c:	2b05      	cmp	r3, #5
 800056e:	dc14      	bgt.n	800059a <changePassword+0x7e>
		{
			HD44780_Clear();
 8000570:	f000 f8ea 	bl	8000748 <HD44780_Clear>
			pw[pw_idx++] = key;
 8000574:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000578:	b293      	uxth	r3, r2
 800057a:	3301      	adds	r3, #1
 800057c:	b29b      	uxth	r3, r3
 800057e:	83fb      	strh	r3, [r7, #30]
 8000580:	4613      	mov	r3, r2
 8000582:	f107 0220 	add.w	r2, r7, #32
 8000586:	4413      	add	r3, r2
 8000588:	7dfa      	ldrb	r2, [r7, #23]
 800058a:	f803 2c14 	strb.w	r2, [r3, #-20]
			HD44780_PrintStr(pw);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f981 	bl	800089a <HD44780_PrintStr>
 8000598:	e01b      	b.n	80005d2 <changePassword+0xb6>
		}else if(key == '*')
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	2b2a      	cmp	r3, #42	; 0x2a
 800059e:	d1d3      	bne.n	8000548 <changePassword+0x2c>
		{
			for(int i = 0 ; i < 6; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	e00b      	b.n	80005be <changePassword+0xa2>
				original_password[i] = pw[i];
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	440a      	add	r2, r1
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
			for(int i = 0 ; i < 6; i++)
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	3301      	adds	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	ddf0      	ble.n	80005a6 <changePassword+0x8a>
			original_password[6] = '\0';
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3306      	adds	r3, #6
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
			return 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e001      	b.n	80005d4 <changePassword+0xb8>
			continue;
 80005d0:	bf00      	nop
		while((key = scan_Rx()) == 255) ;
 80005d2:	e7b9      	b.n	8000548 <changePassword+0x2c>
		}
	}

	return 0;
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	08004e60 	.word	0x08004e60
 80005e0:	08004e70 	.word	0x08004e70

080005e4 <home>:
void home(char* str)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HD44780_Init(2);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 f821 	bl	8000634 <HD44780_Init>
	HD44780_PrintStr(str);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f951 	bl	800089a <HD44780_PrintStr>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <finish_system>:
void finish_system(char* msg)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HD44780_Clear();
 8000608:	f000 f89e 	bl	8000748 <HD44780_Clear>
	HD44780_PrintStr(msg);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f944 	bl	800089a <HD44780_PrintStr>
	HAL_Delay(2000);
 8000612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000616:	f000 ffc1 	bl	800159c <HAL_Delay>
	HD44780_Clear();
 800061a:	f000 f895 	bl	8000748 <HD44780_Clear>
	HD44780_Home();
 800061e:	f000 f89e 	bl	800075e <HD44780_Home>
	HD44780_NoBacklight();
 8000622:	f000 f94f 	bl	80008c4 <HD44780_NoBacklight>
	HD44780_NoDisplay();
 8000626:	f000 f8d7 	bl	80007d8 <HD44780_NoDisplay>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]

  dpRows = rows;
 800063e:	4a3b      	ldr	r2, [pc, #236]	; (800072c <HD44780_Init+0xf8>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000644:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <HD44780_Init+0xfc>)
 8000646:	2208      	movs	r2, #8
 8000648:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <HD44780_Init+0x100>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000650:	4b36      	ldr	r3, [pc, #216]	; (800072c <HD44780_Init+0xf8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d907      	bls.n	8000668 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <HD44780_Init+0x100>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <HD44780_Init+0x100>)
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e006      	b.n	8000676 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HD44780_Init+0x100>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <HD44780_Init+0x100>)
 8000674:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000676:	f000 f9b9 	bl	80009ec <DelayInit>
  HAL_Delay(50);
 800067a:	2032      	movs	r0, #50	; 0x32
 800067c:	f000 ff8e 	bl	800159c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HD44780_Init+0xfc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f977 	bl	8000978 <ExpanderWrite>
  HAL_Delay(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068e:	f000 ff85 	bl	800159c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000692:	2030      	movs	r0, #48	; 0x30
 8000694:	f000 f95f 	bl	8000956 <Write4Bits>
  DelayUS(4500);
 8000698:	f241 1094 	movw	r0, #4500	; 0x1194
 800069c:	f000 f9ce 	bl	8000a3c <DelayUS>

  Write4Bits(0x03 << 4);
 80006a0:	2030      	movs	r0, #48	; 0x30
 80006a2:	f000 f958 	bl	8000956 <Write4Bits>
  DelayUS(4500);
 80006a6:	f241 1094 	movw	r0, #4500	; 0x1194
 80006aa:	f000 f9c7 	bl	8000a3c <DelayUS>

  Write4Bits(0x03 << 4);
 80006ae:	2030      	movs	r0, #48	; 0x30
 80006b0:	f000 f951 	bl	8000956 <Write4Bits>
  DelayUS(4500);
 80006b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80006b8:	f000 f9c0 	bl	8000a3c <DelayUS>

  Write4Bits(0x02 << 4);
 80006bc:	2020      	movs	r0, #32
 80006be:	f000 f94a 	bl	8000956 <Write4Bits>
  DelayUS(100);
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f000 f9ba 	bl	8000a3c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <HD44780_Init+0x100>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f902 	bl	80008dc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HD44780_Init+0x104>)
 80006da:	2204      	movs	r2, #4
 80006dc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80006de:	f000 f891 	bl	8000804 <HD44780_Display>
  HD44780_Clear();
 80006e2:	f000 f831 	bl	8000748 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <HD44780_Init+0x108>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HD44780_Init+0x108>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f8f0 	bl	80008dc <SendCommand>
  DelayUS(4500);
 80006fc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000700:	f000 f99c 	bl	8000a3c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000704:	490e      	ldr	r1, [pc, #56]	; (8000740 <HD44780_Init+0x10c>)
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f892 	bl	8000830 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800070c:	490d      	ldr	r1, [pc, #52]	; (8000744 <HD44780_Init+0x110>)
 800070e:	2001      	movs	r0, #1
 8000710:	f000 f88e 	bl	8000830 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000714:	f000 f823 	bl	800075e <HD44780_Home>
  set_cursor_pos(-1, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	f7ff fe9b 	bl	8000458 <set_cursor_pos>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c2 	.word	0x200000c2
 8000730:	200000c4 	.word	0x200000c4
 8000734:	200000c0 	.word	0x200000c0
 8000738:	200000c3 	.word	0x200000c3
 800073c:	200000c1 	.word	0x200000c1
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008

08000748 <HD44780_Clear>:

void HD44780_Clear()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);	// LCD_CLEARDISPLAY = 0x01
 800074c:	2001      	movs	r0, #1
 800074e:	f000 f8c5 	bl	80008dc <SendCommand>
  DelayUS(2000);
 8000752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000756:	f000 f971 	bl	8000a3c <DelayUS>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <HD44780_Home>:

void HD44780_Home()
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000762:	2002      	movs	r0, #2
 8000764:	f000 f8ba 	bl	80008dc <SendCommand>
  DelayUS(2000);
 8000768:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800076c:	f000 f966 	bl	8000a3c <DelayUS>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HD44780_SetCursor+0x5c>)
 8000786:	f107 0408 	add.w	r4, r7, #8
 800078a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800078c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HD44780_SetCursor+0x60>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d303      	bcc.n	80007a2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HD44780_SetCursor+0x60>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	f107 0218 	add.w	r2, r7, #24
 80007aa:	4413      	add	r3, r2
 80007ac:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f88a 	bl	80008dc <SendCommand>
}
 80007c8:	bf00      	nop
 80007ca:	371c      	adds	r7, #28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	08004e7c 	.word	0x08004e7c
 80007d4:	200000c2 	.word	0x200000c2

080007d8 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HD44780_NoDisplay+0x28>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	f023 0304 	bic.w	r3, r3, #4
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HD44780_NoDisplay+0x28>)
 80007e8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HD44780_NoDisplay+0x28>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	f043 0308 	orr.w	r3, r3, #8
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f871 	bl	80008dc <SendCommand>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000c3 	.word	0x200000c3

08000804 <HD44780_Display>:

void HD44780_Display()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HD44780_Display+0x28>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HD44780_Display+0x28>)
 8000814:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HD44780_Display+0x28>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f85b 	bl	80008dc <SendCommand>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000c3 	.word	0x200000c3

08000830 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	b25b      	sxtb	r3, r3
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	b25b      	sxtb	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f842 	bl	80008dc <SendCommand>
  for (int i=0; i<8; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e009      	b.n	8000872 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f846 	bl	80008f8 <SendChar>
  for (int i=0; i<8; i++)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b07      	cmp	r3, #7
 8000876:	ddf2      	ble.n	800085e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f833 	bl	80008f8 <SendChar>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80008a2:	e006      	b.n	80008b2 <HD44780_PrintStr+0x18>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	607a      	str	r2, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f823 	bl	80008f8 <SendChar>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f4      	bne.n	80008a4 <HD44780_PrintStr+0xa>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HD44780_NoBacklight+0x14>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f852 	bl	8000978 <ExpanderWrite>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000c4 	.word	0x200000c4

080008dc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f812 	bl	8000914 <Send>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f804 	bl	8000914 <Send>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	4613      	mov	r3, r2
 8000922:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;		// 0
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;	// decimal : 16, hexadecimal : 0x20 = 20H
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	4313      	orrs	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f80b 	bl	8000956 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000940:	7bba      	ldrb	r2, [r7, #14]
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	4313      	orrs	r3, r2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f804 	bl	8000956 <Write4Bits>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f808 	bl	8000978 <ExpanderWrite>
  PulseEnable(value);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f820 	bl	80009b0 <PulseEnable>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af02      	add	r7, sp, #8
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight; // 0 | 0x08
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <ExpanderWrite+0x30>)
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4313      	orrs	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800098e:	f107 020f 	add.w	r2, r7, #15
 8000992:	230a      	movs	r3, #10
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	214e      	movs	r1, #78	; 0x4e
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <ExpanderWrite+0x34>)
 800099c:	f001 fac2 	bl	8001f24 <HAL_I2C_Master_Transmit>
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000c4 	.word	0x200000c4
 80009ac:	200000c8 	.word	0x200000c8

080009b0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffd8 	bl	8000978 <ExpanderWrite>
  DelayUS(20);
 80009c8:	2014      	movs	r0, #20
 80009ca:	f000 f837 	bl	8000a3c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f023 0304 	bic.w	r3, r3, #4
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffce 	bl	8000978 <ExpanderWrite>
  DelayUS(20);
 80009dc:	2014      	movs	r0, #20
 80009de:	f000 f82d 	bl	8000a3c <DelayUS>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <DelayInit>:

static void DelayInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <DelayInit+0x48>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <DelayInit+0x48>)
 80009f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009fa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <DelayInit+0x48>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <DelayInit+0x48>)
 8000a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a06:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <DelayInit+0x4c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <DelayInit+0x4c>)
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <DelayInit+0x4c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <DelayInit+0x4c>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <DelayInit+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000a26:	bf00      	nop
  __ASM volatile ("NOP");
 8000a28:	bf00      	nop
  __ASM volatile ("NOP");
 8000a2a:	bf00      	nop
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000edf0 	.word	0xe000edf0
 8000a38:	e0001000 	.word	0xe0001000

08000a3c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <DelayUS+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <DelayUS+0x44>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9a      	lsrs	r2, r3, #18
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <DelayUS+0x48>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <DelayUS+0x48>)
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f6      	bhi.n	8000a5e <DelayUS+0x22>
}
 8000a70:	bf00      	nop
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000018 	.word	0x20000018
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	e0001000 	.word	0xe0001000

08000a88 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0a      	cmp	r3, #10
 8000a94:	d106      	bne.n	8000aa4 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 8000a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__io_putchar+0x34>)
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <__io_putchar+0x38>)
 8000aa0:	f002 fd9d 	bl	80035de <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000aa4:	1d39      	adds	r1, r7, #4
 8000aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <__io_putchar+0x38>)
 8000aae:	f002 fd96 	bl	80035de <HAL_UART_Transmit>

	return ch;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08004e8c 	.word	0x08004e8c
 8000ac0:	20000164 	.word	0x20000164

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fd05 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f913 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f000 f9f9 	bl	8000ec8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ad6:	f000 f951 	bl	8000d7c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ada:	f000 f97d 	bl	8000dd8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ade:	f000 f9c9 	bl	8000e74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  char* str = "Enter Password";
 8000ae2:	4b77      	ldr	r3, [pc, #476]	; (8000cc0 <main+0x1fc>)
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  short isTextRemoved = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	86fb      	strh	r3, [r7, #54]	; 0x36
  char btn_key;									// a character that user press([1~9], [A-D])
  char input_key[2] = "\0";
 8000aea:	4b76      	ldr	r3, [pc, #472]	; (8000cc4 <main+0x200>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	843b      	strh	r3, [r7, #32]
  char pw[MAX_CHAR_SIZE] = "\0";					// password that has input_numkey
 8000af0:	4b74      	ldr	r3, [pc, #464]	; (8000cc4 <main+0x200>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	823b      	strh	r3, [r7, #16]
 8000af6:	f107 0312 	add.w	r3, r7, #18
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	819a      	strh	r2, [r3, #12]
  short long_press_cnt = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	81fb      	strh	r3, [r7, #14]
  char password[PW_MAX_SIZE] = "123456\0";		// door-lock password
 8000b08:	4a6f      	ldr	r2, [pc, #444]	; (8000cc8 <main+0x204>)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b10:	6018      	str	r0, [r3, #0]
 8000b12:	3304      	adds	r3, #4
 8000b14:	8019      	strh	r1, [r3, #0]
 8000b16:	3302      	adds	r3, #2
 8000b18:	0c0a      	lsrs	r2, r1, #16
 8000b1a:	701a      	strb	r2, [r3, #0]
//  short change_pw_key_pressed = 0;
  int timeout;
  home(str);
 8000b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b1e:	f7ff fd61 	bl	80005e4 <home>


  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000b22:	486a      	ldr	r0, [pc, #424]	; (8000ccc <main+0x208>)
 8000b24:	f002 f970 	bl	8002e08 <HAL_TIM_Base_Start_IT>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <main+0x6e>
  {
	  /* Starting Error */
	  Error_Handler();
 8000b2e:	f000 fac7 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  short pw_idx = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	86bb      	strh	r3, [r7, #52]	; 0x34
  while (1)
  {
	  /* time out */
	  timeout = ((remainTime_idx < 0) ? 0x10 : 0x00);
 8000b36:	4b66      	ldr	r3, [pc, #408]	; (8000cd0 <main+0x20c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da01      	bge.n	8000b42 <main+0x7e>
 8000b3e:	2310      	movs	r3, #16
 8000b40:	e000      	b.n	8000b44 <main+0x80>
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28

	  /* input key and check correct input key */
	  if( (btn_key = scan_Rx()) == 255)
 8000b46:	f7ff fb0b 	bl	8000160 <scan_Rx>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d105      	bne.n	8000b64 <main+0xa0>
	  {
		  /* if time is 0 */
		  if(!(timeout & 0x10))
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5a:	f003 0310 	and.w	r3, r3, #16
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d161      	bne.n	8000c26 <main+0x162>
		  {
			  continue;
 8000b62:	e0ab      	b.n	8000cbc <main+0x1f8>
			  goto checkPw;
		  }
	  }

	  // change pw mode
	  if(btn_key == '#' && !running_pw)
 8000b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b68:	2b23      	cmp	r3, #35	; 0x23
 8000b6a:	d125      	bne.n	8000bb8 <main+0xf4>
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <main+0x210>)
 8000b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d120      	bne.n	8000bb8 <main+0xf4>
	  {
		  short is_longPress = check_change_pw_key_pressed(&long_press_cnt, &gp_timer);
 8000b76:	f107 030e 	add.w	r3, r7, #14
 8000b7a:	4957      	ldr	r1, [pc, #348]	; (8000cd8 <main+0x214>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc95 	bl	80004ac <check_change_pw_key_pressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	84bb      	strh	r3, [r7, #36]	; 0x24
		  if(is_longPress)
 8000b86:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8095 	beq.w	8000cba <main+0x1f6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
		  {
			  __disable_irq();
			  if(changePassword(password, PW_MAX_SIZE))
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2107      	movs	r1, #7
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fcc0 	bl	800051c <changePassword>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <main+0xea>
			  {
				  printf("success password %s\n", password);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	484d      	ldr	r0, [pc, #308]	; (8000cdc <main+0x218>)
 8000ba8:	f003 f9d8 	bl	8003f5c <iprintf>
 8000bac:	e002      	b.n	8000bb4 <main+0xf0>
			  }else
			  {
				  printf("failed password\n");
 8000bae:	484c      	ldr	r0, [pc, #304]	; (8000ce0 <main+0x21c>)
 8000bb0:	f003 fa48 	bl	8004044 <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bb4:	b662      	cpsie	i
			  }
			  __enable_irq();
		  }
		  continue;
 8000bb6:	e080      	b.n	8000cba <main+0x1f6>
	  }

	  /* set isTextRemoved when condition is true */
	  if( (btn_key != 255 && btn_key != '-') && (isTextRemoved == 0x00) ) // nothing pressed and not '-' key and text is not removed
 8000bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bbc:	2bff      	cmp	r3, #255	; 0xff
 8000bbe:	d009      	beq.n	8000bd4 <main+0x110>
 8000bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc4:	2b2d      	cmp	r3, #45	; 0x2d
 8000bc6:	d005      	beq.n	8000bd4 <main+0x110>
 8000bc8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <main+0x110>
	  {
		  isTextRemoved = 0x01;	// the 'text' means "Enter Password".
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	86fb      	strh	r3, [r7, #54]	; 0x36
	  }

	  /* if "Enter Password" string is removed */
	  if(isTextRemoved == 0x01)
 8000bd4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d10d      	bne.n	8000bf8 <main+0x134>
	  {
		  HD44780_Clear();
 8000bdc:	f7ff fdb4 	bl	8000748 <HD44780_Clear>
		  isTextRemoved = -1;
 8000be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be4:	86fb      	strh	r3, [r7, #54]	; 0x36
		  enable_inputPw = 0x01;
 8000be6:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <main+0x220>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	801a      	strh	r2, [r3, #0]

		  set_remain_time_progress();
 8000bec:	f7ff fc06 	bl	80003fc <set_remain_time_progress>
		  gTimerCnt = 999;
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <main+0x224>)
 8000bf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf6:	601a      	str	r2, [r3, #0]
	  }

	  /* ready for receive pw */
	  if(enable_inputPw)
 8000bf8:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <main+0x220>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d054      	beq.n	8000cac <main+0x1e8>
	  {
		  input_key[0] = btn_key; //user input num key
 8000c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c06:	f887 3020 	strb.w	r3, [r7, #32]

		  /* check time out */
		  // if input key is *(for confirm) checkPw = 1 or 0
		  int checkPw = (((!strcmp(input_key, "*")) == 1) ? 0x01 : 0x00);
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4937      	ldr	r1, [pc, #220]	; (8000cec <main+0x228>)
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fa9b 	bl	800014c <strcmp>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf0c      	ite	eq
 8000c1c:	2301      	moveq	r3, #1
 8000c1e:	2300      	movne	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
 8000c24:	e000      	b.n	8000c28 <main+0x164>
			  goto checkPw;
 8000c26:	bf00      	nop
	  checkPw:
		  if(checkPw || timeout)
 8000c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <main+0x170>
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d01a      	beq.n	8000c6a <main+0x1a6>
		  {

			  checkPassword(pw, password);
 8000c34:	1d3a      	adds	r2, r7, #4
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fbbb 	bl	80003b8 <checkPassword>


			  HD44780_Clear();
 8000c42:	f7ff fd81 	bl	8000748 <HD44780_Clear>
			  enable_remainTime_progress = 0;
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <main+0x22c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
			  set_remain_time_progress();
 8000c4c:	f7ff fbd6 	bl	80003fc <set_remain_time_progress>
			  remainTime_idx = 10;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <main+0x20c>)
 8000c52:	220a      	movs	r2, #10
 8000c54:	601a      	str	r2, [r3, #0]
			  pw_idx = -1;
 8000c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5a:	86bb      	strh	r3, [r7, #52]	; 0x34

			  sprintf(pw, "%s", '\0');
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 f9f6 	bl	8004054 <strcpy>
 8000c68:	e020      	b.n	8000cac <main+0x1e8>
		  }else
		  {
			  /* ready for write num key that is pressed by user */
			  if(pw_idx < MAX_CHAR_SIZE && strcmp(input_key,"#"))
 8000c6a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	dc1c      	bgt.n	8000cac <main+0x1e8>
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	491f      	ldr	r1, [pc, #124]	; (8000cf4 <main+0x230>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fa67 	bl	800014c <strcmp>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d013      	beq.n	8000cac <main+0x1e8>
			  {
				  pw[pw_idx] = btn_key;
 8000c84:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000c88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c92:	f803 2c28 	strb.w	r2, [r3, #-40]
				  set_cursor_pos(pw_idx, 0); // column and row
 8000c96:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fbdb 	bl	8000458 <set_cursor_pos>
				  HD44780_PrintStr(input_key);
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdf7 	bl	800089a <HD44780_PrintStr>
			  }
		  }
	  }
	  pw_idx++;
 8000cac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000cb8:	e73d      	b.n	8000b36 <main+0x72>
		  continue;
 8000cba:	bf00      	nop
	  timeout = ((remainTime_idx < 0) ? 0x10 : 0x00);
 8000cbc:	e73b      	b.n	8000b36 <main+0x72>
 8000cbe:	bf00      	nop
 8000cc0:	08004e90 	.word	0x08004e90
 8000cc4:	08004ed0 	.word	0x08004ed0
 8000cc8:	08004ed4 	.word	0x08004ed4
 8000ccc:	2000011c 	.word	0x2000011c
 8000cd0:	20000014 	.word	0x20000014
 8000cd4:	200000b0 	.word	0x200000b0
 8000cd8:	200000ae 	.word	0x200000ae
 8000cdc:	08004ea0 	.word	0x08004ea0
 8000ce0:	08004eb8 	.word	0x08004eb8
 8000ce4:	200000ac 	.word	0x200000ac
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	08004ec8 	.word	0x08004ec8
 8000cf0:	200000a4 	.word	0x200000a4
 8000cf4:	08004ecc 	.word	0x08004ecc

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b090      	sub	sp, #64	; 0x40
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	2228      	movs	r2, #40	; 0x28
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 f920 	bl	8003f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d22:	2310      	movs	r3, #16
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d2e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fbf9 	bl	8002530 <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d44:	f000 f9bc 	bl	80010c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d48:	230f      	movs	r3, #15
 8000d4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2102      	movs	r1, #2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fe64 	bl	8002a30 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d6e:	f000 f9a7 	bl	80010c0 <Error_Handler>
  }
}
 8000d72:	bf00      	nop
 8000d74:	3740      	adds	r7, #64	; 0x40
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <MX_I2C1_Init+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000d88:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_I2C1_Init+0x58>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_I2C1_Init+0x50>)
 8000dba:	f000 ff7b 	bl	8001cb4 <HAL_I2C_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc4:	f000 f97c 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000c8 	.word	0x200000c8
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	000186a0 	.word	0x000186a0

08000dd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000df6:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <MX_TIM3_Init+0x98>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000dfc:	223f      	movs	r2, #63	; 0x3f
 8000dfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e1c:	f001 ffa4 	bl	8002d68 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 f94b 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e38:	f002 f940 	bl	80030bc <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f000 f93d 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e54:	f002 fb06 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e5e:	f000 f92f 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000011c 	.word	0x2000011c
 8000e70:	40000400 	.word	0x40000400

08000e74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <MX_USART2_UART_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_USART2_UART_Init+0x4c>)
 8000eac:	f002 fb4a 	bl	8003544 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f000 f903 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000164 	.word	0x20000164
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b4f      	ldr	r3, [pc, #316]	; (800101c <MX_GPIO_Init+0x154>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a4e      	ldr	r2, [pc, #312]	; (800101c <MX_GPIO_Init+0x154>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b4c      	ldr	r3, [pc, #304]	; (800101c <MX_GPIO_Init+0x154>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <MX_GPIO_Init+0x154>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a48      	ldr	r2, [pc, #288]	; (800101c <MX_GPIO_Init+0x154>)
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b46      	ldr	r3, [pc, #280]	; (800101c <MX_GPIO_Init+0x154>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <MX_GPIO_Init+0x154>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a42      	ldr	r2, [pc, #264]	; (800101c <MX_GPIO_Init+0x154>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b40      	ldr	r3, [pc, #256]	; (800101c <MX_GPIO_Init+0x154>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b3d      	ldr	r3, [pc, #244]	; (800101c <MX_GPIO_Init+0x154>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a3c      	ldr	r2, [pc, #240]	; (800101c <MX_GPIO_Init+0x154>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <MX_GPIO_Init+0x154>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|EN_Pin|R2_Pin|R3_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000f42:	4837      	ldr	r0, [pc, #220]	; (8001020 <MX_GPIO_Init+0x158>)
 8000f44:	f000 fe7b 	bl	8001c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4e:	4835      	ldr	r0, [pc, #212]	; (8001024 <MX_GPIO_Init+0x15c>)
 8000f50:	f000 fe75 	bl	8001c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	4833      	ldr	r0, [pc, #204]	; (8001028 <MX_GPIO_Init+0x160>)
 8000f5a:	f000 fe70 	bl	8001c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <MX_GPIO_Init+0x164>)
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	482d      	ldr	r0, [pc, #180]	; (8001028 <MX_GPIO_Init+0x160>)
 8000f74:	f000 fcf2 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin EN_Pin R2_Pin R3_Pin */
  GPIO_InitStruct.Pin = RST_Pin|EN_Pin|R2_Pin|R3_Pin;
 8000f78:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4823      	ldr	r0, [pc, #140]	; (8001020 <MX_GPIO_Init+0x158>)
 8000f92:	f000 fce3 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <MX_GPIO_Init+0x15c>)
 8000fb0:	f000 fcd4 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_Pin */
  GPIO_InitStruct.Pin = R4_Pin;
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R4_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <MX_GPIO_Init+0x160>)
 8000fcc:	f000 fcc6 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
 8000fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_GPIO_Init+0x158>)
 8000fe6:	f000 fcb9 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin|C2_Pin;
 8000fea:	2338      	movs	r3, #56	; 0x38
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <MX_GPIO_Init+0x15c>)
 8000ffe:	f000 fcad 	bl	800195c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	f000 fbc1 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100c:	2028      	movs	r0, #40	; 0x28
 800100e:	f000 fbda 	bl	80017c6 <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00
 8001028:	40011000 	.word	0x40011000
 800102c:	10110000 	.word	0x10110000

08001030 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	gp_timer++;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001042:	801a      	strh	r2, [r3, #0]
	if(enable_inputPw)
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b21b      	sxth	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d027      	beq.n	800109e <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		gTimerCnt++;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001056:	6013      	str	r3, [r2, #0]
		if(gTimerCnt == 1000)
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001060:	d11d      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			if(remainTime_idx >= 0 && enable_remainTime_progress)
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db16      	blt.n	8001098 <HAL_TIM_PeriodElapsedCallback+0x68>
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d011      	beq.n	8001098 <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				running_pw = 1;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001076:	2201      	movs	r2, #1
 8001078:	801a      	strh	r2, [r3, #0]
				decrease_remainTime(remainTime_idx);
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9d7 	bl	8000434 <decrease_remainTime>
				remainTime_idx--;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800108e:	6013      	str	r3, [r2, #0]
				gTimerCnt = 0;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
			}else{
				running_pw = 0;
			}
		}
	}
}
 8001096:	e002      	b.n	800109e <HAL_TIM_PeriodElapsedCallback+0x6e>
				running_pw = 0;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800109a:	2200      	movs	r2, #0
 800109c:	801a      	strh	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200000ae 	.word	0x200000ae
 80010ac:	200000ac 	.word	0x200000ac
 80010b0:	20000010 	.word	0x20000010
 80010b4:	20000014 	.word	0x20000014
 80010b8:	200000a4 	.word	0x200000a4
 80010bc:	200000b0 	.word	0x200000b0

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("HAL_UART_Init Error!\n");
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <Error_Handler+0x10>)
 80010c6:	f002 ffbd 	bl	8004044 <puts>
  /* USER CODE END Error_Handler_Debug */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08004edc 	.word	0x08004edc

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_MspInit+0x5c>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_MspInit+0x5c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6193      	str	r3, [r2, #24]
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_MspInit+0x5c>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x5c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x5c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x5c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_MspInit+0x60>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_MspInit+0x60>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_I2C_MspInit+0x90>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d132      	bne.n	80011be <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_I2C_MspInit+0x94>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_I2C_MspInit+0x94>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_I2C_MspInit+0x94>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4812      	ldr	r0, [pc, #72]	; (80011d0 <HAL_I2C_MspInit+0x98>)
 8001186:	f000 fbe9 	bl	800195c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_I2C_MspInit+0x9c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_I2C_MspInit+0x9c>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_I2C_MspInit+0x94>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_I2C_MspInit+0x94>)
 80011ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_I2C_MspInit+0x94>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	40010000 	.word	0x40010000

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d113      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201d      	movs	r0, #29
 8001208:	f000 fac1 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800120c:	201d      	movs	r0, #29
 800120e:	f000 fada 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40000400 	.word	0x40000400
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_UART_MspInit+0x98>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d137      	bne.n	80012b4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 800124a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124e:	61d3      	str	r3, [r2, #28]
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001274:	2304      	movs	r3, #4
 8001276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	480f      	ldr	r0, [pc, #60]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 8001288:	f000 fb68 	bl	800195c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800128c:	2308      	movs	r3, #8
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 80012a0:	f000 fb5c 	bl	800195c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2026      	movs	r0, #38	; 0x26
 80012aa:	f000 fa70 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ae:	2026      	movs	r0, #38	; 0x26
 80012b0:	f000 fa89 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40004400 	.word	0x40004400
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010800 	.word	0x40010800

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <HardFault_Handler+0x4>

080012da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <BusFault_Handler+0x4>

080012e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <UsageFault_Handler+0x4>

080012ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f926 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM3_IRQHandler+0x10>)
 8001322:	f001 fdc3 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000011c 	.word	0x2000011c

08001330 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <USART2_IRQHandler+0x10>)
 8001336:	f002 f9e5 	bl	8003704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000164 	.word	0x20000164

08001344 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800134c:	f000 fc90 	bl	8001c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
	}

return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fb6d 	bl	8000a88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
	}
	return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ec:	605a      	str	r2, [r3, #4]
	return 0;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <_isatty>:

int _isatty(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	return 1;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
	return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
	...

08001428 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x50>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x16>
		heap_end = &end;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <_sbrk+0x50>)
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <_sbrk+0x54>)
 800143c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <_sbrk+0x50>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <_sbrk+0x50>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	466a      	mov	r2, sp
 800144e:	4293      	cmp	r3, r2
 8001450:	d907      	bls.n	8001462 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001452:	f002 fd51 	bl	8003ef8 <__errno>
 8001456:	4602      	mov	r2, r0
 8001458:	230c      	movs	r3, #12
 800145a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	e006      	b.n	8001470 <_sbrk+0x48>
	}

	heap_end += incr;
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <_sbrk+0x50>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a03      	ldr	r2, [pc, #12]	; (8001478 <_sbrk+0x50>)
 800146c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200000b4 	.word	0x200000b4
 800147c:	200001b0 	.word	0x200001b0

08001480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014b2:	f7ff ffe5 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b6:	f002 fd25 	bl	8003f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ba:	f7ff fb03 	bl	8000ac4 <main>
  bx lr
 80014be:	4770      	bx	lr
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80014c8:	08004fc0 	.word	0x08004fc0
  ldr r2, =_sbss
 80014cc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80014d0:	200001b0 	.word	0x200001b0

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x28>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x28>)
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f945 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fdee 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f95d 	bl	80017e2 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f925 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000018 	.word	0x20000018
 800155c:	20000020 	.word	0x20000020
 8001560:	2000001c 	.word	0x2000001c

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <HAL_IncTick+0x20>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000020 	.word	0x20000020
 8001584:	200001a8 	.word	0x200001a8

08001588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	200001a8 	.word	0x200001a8

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff0 	bl	8001588 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_Delay+0x40>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffe0 	bl	8001588 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000020 	.word	0x20000020

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4906      	ldr	r1, [pc, #24]	; (8001678 <__NVIC_EnableIRQ+0x34>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff90 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff2d 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff42 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff90 	bl	80016d0 <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5f 	bl	800167c <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff35 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180c:	2b02      	cmp	r3, #2
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e020      	b.n	8001864 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 020e 	bic.w	r2, r2, #14
 8001830:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
	...

08001870 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001882:	2b02      	cmp	r3, #2
 8001884:	d005      	beq.n	8001892 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e051      	b.n	8001936 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 020e 	bic.w	r2, r2, #14
 80018a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_DMA_Abort_IT+0xd0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d029      	beq.n	8001910 <HAL_DMA_Abort_IT+0xa0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <HAL_DMA_Abort_IT+0xd4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d022      	beq.n	800190c <HAL_DMA_Abort_IT+0x9c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <HAL_DMA_Abort_IT+0xd8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d01a      	beq.n	8001906 <HAL_DMA_Abort_IT+0x96>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_DMA_Abort_IT+0xdc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d012      	beq.n	8001900 <HAL_DMA_Abort_IT+0x90>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <HAL_DMA_Abort_IT+0xe0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00a      	beq.n	80018fa <HAL_DMA_Abort_IT+0x8a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <HAL_DMA_Abort_IT+0xe4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d102      	bne.n	80018f4 <HAL_DMA_Abort_IT+0x84>
 80018ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018f2:	e00e      	b.n	8001912 <HAL_DMA_Abort_IT+0xa2>
 80018f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018f8:	e00b      	b.n	8001912 <HAL_DMA_Abort_IT+0xa2>
 80018fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fe:	e008      	b.n	8001912 <HAL_DMA_Abort_IT+0xa2>
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	e005      	b.n	8001912 <HAL_DMA_Abort_IT+0xa2>
 8001906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190a:	e002      	b.n	8001912 <HAL_DMA_Abort_IT+0xa2>
 800190c:	2310      	movs	r3, #16
 800190e:	e000      	b.n	8001912 <HAL_DMA_Abort_IT+0xa2>
 8001910:	2301      	movs	r3, #1
 8001912:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_DMA_Abort_IT+0xe8>)
 8001914:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
    } 
  }
  return status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40020008 	.word	0x40020008
 8001944:	4002001c 	.word	0x4002001c
 8001948:	40020030 	.word	0x40020030
 800194c:	40020044 	.word	0x40020044
 8001950:	40020058 	.word	0x40020058
 8001954:	4002006c 	.word	0x4002006c
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b08b      	sub	sp, #44	; 0x2c
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e127      	b.n	8001bc0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001970:	2201      	movs	r2, #1
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8116 	bne.w	8001bba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b12      	cmp	r3, #18
 8001994:	d034      	beq.n	8001a00 <HAL_GPIO_Init+0xa4>
 8001996:	2b12      	cmp	r3, #18
 8001998:	d80d      	bhi.n	80019b6 <HAL_GPIO_Init+0x5a>
 800199a:	2b02      	cmp	r3, #2
 800199c:	d02b      	beq.n	80019f6 <HAL_GPIO_Init+0x9a>
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d804      	bhi.n	80019ac <HAL_GPIO_Init+0x50>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d031      	beq.n	8001a0a <HAL_GPIO_Init+0xae>
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d01c      	beq.n	80019e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019aa:	e048      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d043      	beq.n	8001a38 <HAL_GPIO_Init+0xdc>
 80019b0:	2b11      	cmp	r3, #17
 80019b2:	d01b      	beq.n	80019ec <HAL_GPIO_Init+0x90>
          break;
 80019b4:	e043      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019b6:	4a89      	ldr	r2, [pc, #548]	; (8001bdc <HAL_GPIO_Init+0x280>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d026      	beq.n	8001a0a <HAL_GPIO_Init+0xae>
 80019bc:	4a87      	ldr	r2, [pc, #540]	; (8001bdc <HAL_GPIO_Init+0x280>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d806      	bhi.n	80019d0 <HAL_GPIO_Init+0x74>
 80019c2:	4a87      	ldr	r2, [pc, #540]	; (8001be0 <HAL_GPIO_Init+0x284>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d020      	beq.n	8001a0a <HAL_GPIO_Init+0xae>
 80019c8:	4a86      	ldr	r2, [pc, #536]	; (8001be4 <HAL_GPIO_Init+0x288>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01d      	beq.n	8001a0a <HAL_GPIO_Init+0xae>
          break;
 80019ce:	e036      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d0:	4a85      	ldr	r2, [pc, #532]	; (8001be8 <HAL_GPIO_Init+0x28c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0xae>
 80019d6:	4a85      	ldr	r2, [pc, #532]	; (8001bec <HAL_GPIO_Init+0x290>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d016      	beq.n	8001a0a <HAL_GPIO_Init+0xae>
 80019dc:	4a84      	ldr	r2, [pc, #528]	; (8001bf0 <HAL_GPIO_Init+0x294>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0xae>
          break;
 80019e2:	e02c      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e028      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	3304      	adds	r3, #4
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e023      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	3308      	adds	r3, #8
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e01e      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	330c      	adds	r3, #12
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	e019      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a12:	2304      	movs	r3, #4
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e012      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a20:	2308      	movs	r3, #8
 8001a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	611a      	str	r2, [r3, #16]
          break;
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	615a      	str	r2, [r3, #20]
          break;
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2bff      	cmp	r3, #255	; 0xff
 8001a42:	d801      	bhi.n	8001a48 <HAL_GPIO_Init+0xec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	e001      	b.n	8001a4c <HAL_GPIO_Init+0xf0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2bff      	cmp	r3, #255	; 0xff
 8001a52:	d802      	bhi.n	8001a5a <HAL_GPIO_Init+0xfe>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x104>
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3b08      	subs	r3, #8
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	210f      	movs	r1, #15
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	401a      	ands	r2, r3
 8001a72:	6a39      	ldr	r1, [r7, #32]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8096 	beq.w	8001bba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8e:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_GPIO_Init+0x298>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_GPIO_Init+0x298>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6193      	str	r3, [r2, #24]
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <HAL_GPIO_Init+0x298>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa6:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <HAL_GPIO_Init+0x29c>)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4b      	ldr	r2, [pc, #300]	; (8001bfc <HAL_GPIO_Init+0x2a0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x19e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_GPIO_Init+0x2a4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x19a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <HAL_GPIO_Init+0x2a8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x196>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_GPIO_Init+0x2ac>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x192>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x1a0>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e004      	b.n	8001afc <HAL_GPIO_Init+0x1a0>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_Init+0x1a0>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x1a0>
 8001afa:	2300      	movs	r3, #0
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	f002 0203 	and.w	r2, r2, #3
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	4093      	lsls	r3, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0c:	493a      	ldr	r1, [pc, #232]	; (8001bf8 <HAL_GPIO_Init+0x29c>)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4938      	ldr	r1, [pc, #224]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
 8001b32:	e006      	b.n	8001b42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	4933      	ldr	r1, [pc, #204]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	492e      	ldr	r1, [pc, #184]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4929      	ldr	r1, [pc, #164]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	4924      	ldr	r1, [pc, #144]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	491f      	ldr	r1, [pc, #124]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	491a      	ldr	r1, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60cb      	str	r3, [r1, #12]
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4915      	ldr	r1, [pc, #84]	; (8001c0c <HAL_GPIO_Init+0x2b0>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f aed0 	bne.w	8001970 <HAL_GPIO_Init+0x14>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	372c      	adds	r7, #44	; 0x2c
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	10110000 	.word	0x10110000
 8001be4:	10120000 	.word	0x10120000
 8001be8:	10310000 	.word	0x10310000
 8001bec:	10320000 	.word	0x10320000
 8001bf0:	10220000 	.word	0x10220000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40011400 	.word	0x40011400
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e001      	b.n	8001c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	807b      	strh	r3, [r7, #2]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c4e:	787b      	ldrb	r3, [r7, #1]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c5a:	e003      	b.n	8001c64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	041a      	lsls	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	611a      	str	r2, [r3, #16]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f806 	bl	8001ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40010400 	.word	0x40010400

08001ca0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e11f      	b.n	8001f06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fa2c 	bl	8001138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2224      	movs	r2, #36	; 0x24
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d18:	f000 ffe0 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8001d1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <HAL_I2C_Init+0x25c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d807      	bhi.n	8001d38 <HAL_I2C_Init+0x84>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a7a      	ldr	r2, [pc, #488]	; (8001f14 <HAL_I2C_Init+0x260>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e006      	b.n	8001d46 <HAL_I2C_Init+0x92>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4a77      	ldr	r2, [pc, #476]	; (8001f18 <HAL_I2C_Init+0x264>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	bf94      	ite	ls
 8001d40:	2301      	movls	r3, #1
 8001d42:	2300      	movhi	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0db      	b.n	8001f06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <HAL_I2C_Init+0x268>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0c9b      	lsrs	r3, r3, #18
 8001d58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a64      	ldr	r2, [pc, #400]	; (8001f10 <HAL_I2C_Init+0x25c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d802      	bhi.n	8001d88 <HAL_I2C_Init+0xd4>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	e009      	b.n	8001d9c <HAL_I2C_Init+0xe8>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	4a63      	ldr	r2, [pc, #396]	; (8001f20 <HAL_I2C_Init+0x26c>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	099b      	lsrs	r3, r3, #6
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4956      	ldr	r1, [pc, #344]	; (8001f10 <HAL_I2C_Init+0x25c>)
 8001db8:	428b      	cmp	r3, r1
 8001dba:	d80d      	bhi.n	8001dd8 <HAL_I2C_Init+0x124>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e59      	subs	r1, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	bf38      	it	cc
 8001dd4:	2304      	movcc	r3, #4
 8001dd6:	e04f      	b.n	8001e78 <HAL_I2C_Init+0x1c4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d111      	bne.n	8001e04 <HAL_I2C_Init+0x150>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	440b      	add	r3, r1
 8001dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e012      	b.n	8001e2a <HAL_I2C_Init+0x176>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Init+0x17e>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e022      	b.n	8001e78 <HAL_I2C_Init+0x1c4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10e      	bne.n	8001e58 <HAL_I2C_Init+0x1a4>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1e58      	subs	r0, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	440b      	add	r3, r1
 8001e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e56:	e00f      	b.n	8001e78 <HAL_I2C_Init+0x1c4>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6911      	ldr	r1, [r2, #16]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68d2      	ldr	r2, [r2, #12]
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	000186a0 	.word	0x000186a0
 8001f14:	001e847f 	.word	0x001e847f
 8001f18:	003d08ff 	.word	0x003d08ff
 8001f1c:	431bde83 	.word	0x431bde83
 8001f20:	10624dd3 	.word	0x10624dd3

08001f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	460b      	mov	r3, r1
 8001f32:	817b      	strh	r3, [r7, #10]
 8001f34:	4613      	mov	r3, r2
 8001f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff fb26 	bl	8001588 <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	f040 80e0 	bne.w	800210c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2319      	movs	r3, #25
 8001f52:	2201      	movs	r2, #1
 8001f54:	4970      	ldr	r1, [pc, #448]	; (8002118 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f964 	bl	8002224 <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
 8001f64:	e0d3      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_I2C_Master_Transmit+0x50>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0cc      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d007      	beq.n	8001f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	893a      	ldrh	r2, [r7, #8]
 8001fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a50      	ldr	r2, [pc, #320]	; (800211c <HAL_I2C_Master_Transmit+0x1f8>)
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fdc:	8979      	ldrh	r1, [r7, #10]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f89c 	bl	8002120 <I2C_MasterRequestWrite>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e08d      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002008:	e066      	b.n	80020d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9de 	bl	80023d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b04      	cmp	r3, #4
 8002020:	d107      	bne.n	8002032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06b      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11b      	bne.n	80020ac <HAL_I2C_Master_Transmit+0x188>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d017      	beq.n	80020ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f9ce 	bl	8002452 <I2C_WaitOnBTFFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e01a      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d194      	bne.n	800200a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	00100002 	.word	0x00100002
 800211c:	ffff0000 	.word	0xffff0000

08002120 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d006      	beq.n	800214a <I2C_MasterRequestWrite+0x2a>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d003      	beq.n	800214a <I2C_MasterRequestWrite+0x2a>
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002148:	d108      	bne.n	800215c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00b      	b.n	8002174 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	2b12      	cmp	r3, #18
 8002162:	d107      	bne.n	8002174 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002172:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f84f 	bl	8002224 <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219a:	d103      	bne.n	80021a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e035      	b.n	8002214 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b0:	d108      	bne.n	80021c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021c0:	611a      	str	r2, [r3, #16]
 80021c2:	e01b      	b.n	80021fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	11db      	asrs	r3, r3, #7
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f003 0306 	and.w	r3, r3, #6
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f063 030f 	orn	r3, r3, #15
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <I2C_MasterRequestWrite+0xfc>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f875 	bl	80022d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e010      	b.n	8002214 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021f2:	897b      	ldrh	r3, [r7, #10]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <I2C_MasterRequestWrite+0x100>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f865 	bl	80022d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	00010008 	.word	0x00010008
 8002220:	00010002 	.word	0x00010002

08002224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002234:	e025      	b.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d021      	beq.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223e:	f7ff f9a3 	bl	8001588 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d116      	bne.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e023      	b.n	80022ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10d      	bne.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4013      	ands	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	e00c      	b.n	80022c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d0b6      	beq.n	8002236 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e0:	e051      	b.n	8002386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f0:	d123      	bne.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002300:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800230a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0204 	orr.w	r2, r3, #4
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e046      	b.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d021      	beq.n	8002386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002342:	f7ff f921 	bl	8001588 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d302      	bcc.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d116      	bne.n	8002386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f043 0220 	orr.w	r2, r3, #32
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e020      	b.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10c      	bne.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	e00b      	b.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	43da      	mvns	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4013      	ands	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d18d      	bne.n	80022e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	e02d      	b.n	800243a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f878 	bl	80024d4 <I2C_IsAcknowledgeFailed>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e02d      	b.n	800244a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d021      	beq.n	800243a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f6:	f7ff f8c7 	bl	8001588 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d116      	bne.n	800243a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0220 	orr.w	r2, r3, #32
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e007      	b.n	800244a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d1ca      	bne.n	80023de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800245e:	e02d      	b.n	80024bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f837 	bl	80024d4 <I2C_IsAcknowledgeFailed>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e02d      	b.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d021      	beq.n	80024bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002478:	f7ff f886 	bl	8001588 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	429a      	cmp	r2, r3
 8002486:	d302      	bcc.n	800248e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e007      	b.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d1ca      	bne.n	8002460 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d11b      	bne.n	8002524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e26c      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8087 	beq.w	800265e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002550:	4b92      	ldr	r3, [pc, #584]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b04      	cmp	r3, #4
 800255a:	d00c      	beq.n	8002576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800255c:	4b8f      	ldr	r3, [pc, #572]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d112      	bne.n	800258e <HAL_RCC_OscConfig+0x5e>
 8002568:	4b8c      	ldr	r3, [pc, #560]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d10b      	bne.n	800258e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	4b89      	ldr	r3, [pc, #548]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d06c      	beq.n	800265c <HAL_RCC_OscConfig+0x12c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d168      	bne.n	800265c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e246      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x76>
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a7f      	ldr	r2, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e02e      	b.n	8002604 <HAL_RCC_OscConfig+0xd4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x98>
 80025ae:	4b7b      	ldr	r3, [pc, #492]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a7a      	ldr	r2, [pc, #488]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b78      	ldr	r3, [pc, #480]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a77      	ldr	r2, [pc, #476]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e01d      	b.n	8002604 <HAL_RCC_OscConfig+0xd4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0xbc>
 80025d2:	4b72      	ldr	r3, [pc, #456]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a71      	ldr	r2, [pc, #452]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6e      	ldr	r2, [pc, #440]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0xd4>
 80025ec:	4b6b      	ldr	r3, [pc, #428]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6a      	ldr	r2, [pc, #424]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b68      	ldr	r3, [pc, #416]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a67      	ldr	r2, [pc, #412]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe ffbc 	bl	8001588 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe ffb8 	bl	8001588 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1fa      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0xe4>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe ffa8 	bl	8001588 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe ffa4 	bl	8001588 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1e6      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	4b53      	ldr	r3, [pc, #332]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x10c>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d063      	beq.n	8002732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002676:	4b49      	ldr	r3, [pc, #292]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	d11c      	bne.n	80026bc <HAL_RCC_OscConfig+0x18c>
 8002682:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x176>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1ba      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b3d      	ldr	r3, [pc, #244]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4939      	ldr	r1, [pc, #228]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	e03a      	b.n	8002732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe ff5d 	bl	8001588 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d2:	f7fe ff59 	bl	8001588 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e19b      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4927      	ldr	r1, [pc, #156]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe ff3c 	bl	8001588 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe ff38 	bl	8001588 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e17a      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d03a      	beq.n	80027b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d019      	beq.n	800277a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe ff1c 	bl	8001588 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe ff18 	bl	8001588 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e15a      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_RCC_OscConfig+0x26c>)
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002772:	2001      	movs	r0, #1
 8002774:	f000 fada 	bl	8002d2c <RCC_Delay>
 8002778:	e01c      	b.n	80027b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002780:	f7fe ff02 	bl	8001588 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002786:	e00f      	b.n	80027a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7fe fefe 	bl	8001588 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d908      	bls.n	80027a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e140      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	42420000 	.word	0x42420000
 80027a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	4b9e      	ldr	r3, [pc, #632]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e9      	bne.n	8002788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a6 	beq.w	800290e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b97      	ldr	r3, [pc, #604]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4b94      	ldr	r3, [pc, #592]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a93      	ldr	r2, [pc, #588]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b91      	ldr	r3, [pc, #580]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b8e      	ldr	r3, [pc, #568]	; (8002a28 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b8b      	ldr	r3, [pc, #556]	; (8002a28 <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a8a      	ldr	r2, [pc, #552]	; (8002a28 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7fe febf 	bl	8001588 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe febb 	bl	8001588 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0fd      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x4f8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x312>
 8002834:	4b7b      	ldr	r3, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a7a      	ldr	r2, [pc, #488]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	e02d      	b.n	800289e <HAL_RCC_OscConfig+0x36e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x334>
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a75      	ldr	r2, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a72      	ldr	r2, [pc, #456]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	6213      	str	r3, [r2, #32]
 8002862:	e01c      	b.n	800289e <HAL_RCC_OscConfig+0x36e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b05      	cmp	r3, #5
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_OscConfig+0x356>
 800286c:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4a6c      	ldr	r2, [pc, #432]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6213      	str	r3, [r2, #32]
 8002878:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4a69      	ldr	r2, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6213      	str	r3, [r2, #32]
 8002884:	e00b      	b.n	800289e <HAL_RCC_OscConfig+0x36e>
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a66      	ldr	r2, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6213      	str	r3, [r2, #32]
 8002892:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	f023 0304 	bic.w	r3, r3, #4
 800289c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d015      	beq.n	80028d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fe fe6f 	bl	8001588 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe fe6b 	bl	8001588 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0ab      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ee      	beq.n	80028ae <HAL_RCC_OscConfig+0x37e>
 80028d0:	e014      	b.n	80028fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7fe fe59 	bl	8001588 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe fe55 	bl	8001588 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e095      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ee      	bne.n	80028da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8081 	beq.w	8002a1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d061      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d146      	bne.n	80029ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292c:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <HAL_RCC_OscConfig+0x4fc>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe fe29 	bl	8001588 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fe25 	bl	8001588 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e067      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002960:	d108      	bne.n	8002974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	492d      	ldr	r1, [pc, #180]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a19      	ldr	r1, [r3, #32]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	430b      	orrs	r3, r1
 8002986:	4927      	ldr	r1, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_RCC_OscConfig+0x4fc>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe fdf9 	bl	8001588 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299a:	f7fe fdf5 	bl	8001588 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e037      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x46a>
 80029b8:	e02f      	b.n	8002a1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_RCC_OscConfig+0x4fc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fde2 	bl	8001588 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fdde 	bl	8001588 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e020      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x498>
 80029e6:	e018      	b.n	8002a1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e013      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	42420060 	.word	0x42420060

08002a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d0      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b67      	ldr	r3, [pc, #412]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4965      	ldr	r1, [pc, #404]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d040      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e073      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4936      	ldr	r1, [pc, #216]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b20:	f7fe fd32 	bl	8001588 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe fd2e 	bl	8001588 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e053      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d210      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	4922      	ldr	r1, [pc, #136]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	5cd3      	ldrb	r3, [r2, r3]
 8002bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1cc>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x1d0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fc90 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08004f08 	.word	0x08004f08
 8002bfc:	20000018 	.word	0x20000018
 8002c00:	2000001c 	.word	0x2000001c

08002c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b490      	push	{r4, r7}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c0a:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c0c:	1d3c      	adds	r4, r7, #4
 8002c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x40>
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x46>
 8002c42:	e02d      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c46:	623b      	str	r3, [r7, #32]
      break;
 8002c48:	e02d      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	0c9b      	lsrs	r3, r3, #18
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c56:	4413      	add	r3, r2
 8002c58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	0c5b      	lsrs	r3, r3, #17
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c76:	4413      	add	r3, r2
 8002c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c82:	fb02 f203 	mul.w	r2, r2, r3
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	e004      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	623b      	str	r3, [r7, #32]
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ca2:	623b      	str	r3, [r7, #32]
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3728      	adds	r7, #40	; 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc90      	pop	{r4, r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	08004ef4 	.word	0x08004ef4
 8002cb8:	08004f04 	.word	0x08004f04
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	007a1200 	.word	0x007a1200
 8002cc4:	003d0900 	.word	0x003d0900

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000018 	.word	0x20000018

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff2 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08004f18 	.word	0x08004f18

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0adb      	lsrs	r3, r3, #11
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08004f18 	.word	0x08004f18

08002d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <RCC_Delay+0x34>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <RCC_Delay+0x38>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d48:	bf00      	nop
  }
  while (Delay --);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f9      	bne.n	8002d48 <RCC_Delay+0x1c>
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000018 	.word	0x20000018
 8002d64:	10624dd3 	.word	0x10624dd3

08002d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e041      	b.n	8002dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe fa22 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f000 fa64 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e03a      	b.n	8002e96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <HAL_TIM_Base_Start_IT+0x98>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00e      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x58>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x58>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x58>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d010      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e82:	e007      	b.n	8002e94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800

08002eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0202 	mvn.w	r2, #2
 8002ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f9a4 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f997 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f9a6 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0204 	mvn.w	r2, #4
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f97a 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f96d 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f97c 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d122      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d11b      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0208 	mvn.w	r2, #8
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f950 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f943 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f952 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0210 	mvn.w	r2, #16
 8002fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f926 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f919 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f928 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0201 	mvn.w	r2, #1
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe f800 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b80      	cmp	r3, #128	; 0x80
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa6b 	bl	8003532 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8ec 	bl	8003260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b20      	cmp	r3, #32
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0220 	mvn.w	r2, #32
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa36 	bl	8003520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIM_ConfigClockSource+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0a6      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x166>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d067      	beq.n	80031dc <HAL_TIM_ConfigClockSource+0x120>
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d80b      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x6c>
 8003110:	2b10      	cmp	r3, #16
 8003112:	d073      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x140>
 8003114:	2b10      	cmp	r3, #16
 8003116:	d802      	bhi.n	800311e <HAL_TIM_ConfigClockSource+0x62>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d06f      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800311c:	e078      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800311e:	2b20      	cmp	r3, #32
 8003120:	d06c      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x140>
 8003122:	2b30      	cmp	r3, #48	; 0x30
 8003124:	d06a      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003126:	e073      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003128:	2b70      	cmp	r3, #112	; 0x70
 800312a:	d00d      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0x8c>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d804      	bhi.n	800313a <HAL_TIM_ConfigClockSource+0x7e>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d033      	beq.n	800319c <HAL_TIM_ConfigClockSource+0xe0>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d041      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003138:	e06a      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313e:	d066      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x152>
 8003140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003144:	d017      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003146:	e063      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f000 f965 	bl	8003426 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800316a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
      break;
 8003174:	e04c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f000 f94e 	bl	8003426 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003198:	609a      	str	r2, [r3, #8]
      break;
 800319a:	e039      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 f8c5 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2150      	movs	r1, #80	; 0x50
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f91c 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031ba:	e029      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f000 f8e3 	bl	8003394 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2160      	movs	r1, #96	; 0x60
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f90c 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031da:	e019      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f000 f8a5 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2140      	movs	r1, #64	; 0x40
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f8fc 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031fa:	e009      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 f8f3 	bl	80033f2 <TIM_ITRx_SetConfig>
        break;
 800320c:	e000      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800320e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a29      	ldr	r2, [pc, #164]	; (800332c <TIM_Base_SetConfig+0xb8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00b      	beq.n	80032a4 <TIM_Base_SetConfig+0x30>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d007      	beq.n	80032a4 <TIM_Base_SetConfig+0x30>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a26      	ldr	r2, [pc, #152]	; (8003330 <TIM_Base_SetConfig+0xbc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_Base_SetConfig+0x30>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a25      	ldr	r2, [pc, #148]	; (8003334 <TIM_Base_SetConfig+0xc0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d108      	bne.n	80032b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1c      	ldr	r2, [pc, #112]	; (800332c <TIM_Base_SetConfig+0xb8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <TIM_Base_SetConfig+0x62>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0x62>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <TIM_Base_SetConfig+0xbc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0x62>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TIM_Base_SetConfig+0xc0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <TIM_Base_SetConfig+0xb8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	615a      	str	r2, [r3, #20]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 030a 	bic.w	r3, r3, #10
 8003374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f023 0210 	bic.w	r2, r3, #16
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	031b      	lsls	r3, r3, #12
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	f043 0307 	orr.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003426:	b480      	push	{r7}
 8003428:	b087      	sub	sp, #28
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003440:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	431a      	orrs	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4313      	orrs	r3, r2
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	609a      	str	r2, [r3, #8]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e046      	b.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d009      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10c      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800

08003520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e03f      	b.n	80035d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fe5a 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	; 0x24
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fc27 	bl	8003ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800359c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d17c      	bne.n	80036f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_UART_Transmit+0x2c>
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e075      	b.n	80036fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_UART_Transmit+0x3e>
 8003618:	2302      	movs	r3, #2
 800361a:	e06e      	b.n	80036fa <HAL_UART_Transmit+0x11c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2221      	movs	r2, #33	; 0x21
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003632:	f7fd ffa9 	bl	8001588 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	d108      	bne.n	8003660 <HAL_UART_Transmit+0x82>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	e003      	b.n	8003668 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003670:	e02a      	b.n	80036c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fa13 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e036      	b.n	80036fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3302      	adds	r3, #2
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e007      	b.n	80036ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	3301      	adds	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1cf      	bne.n	8003672 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2140      	movs	r1, #64	; 0x40
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f9e3 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e006      	b.n	80036fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_UART_IRQHandler+0x52>
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa9b 	bl	8003c8a <UART_Receive_IT>
      return;
 8003754:	e17c      	b.n	8003a50 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80b1 	beq.w	80038c0 <HAL_UART_IRQHandler+0x1bc>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_UART_IRQHandler+0x70>
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80a6 	beq.w	80038c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_UART_IRQHandler+0x90>
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_UART_IRQHandler+0xb0>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0202 	orr.w	r2, r3, #2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_UART_IRQHandler+0xd0>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f043 0204 	orr.w	r2, r3, #4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00f      	beq.n	80037fe <HAL_UART_IRQHandler+0xfa>
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_UART_IRQHandler+0xee>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0208 	orr.w	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 811f 	beq.w	8003a46 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_UART_IRQHandler+0x11e>
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa34 	bl	8003c8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_UART_IRQHandler+0x146>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d031      	beq.n	80038ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f976 	bl	8003b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d023      	beq.n	80038a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	2b00      	cmp	r3, #0
 8003874:	d013      	beq.n	800389e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	4a77      	ldr	r2, [pc, #476]	; (8003a58 <HAL_UART_IRQHandler+0x354>)
 800387c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fff4 	bl	8001870 <HAL_DMA_Abort_IT>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d016      	beq.n	80038bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003898:	4610      	mov	r0, r2
 800389a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e00e      	b.n	80038bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8ee 	bl	8003a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e00a      	b.n	80038bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8ea 	bl	8003a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	e006      	b.n	80038bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8e6 	bl	8003a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038ba:	e0c4      	b.n	8003a46 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	bf00      	nop
    return;
 80038be:	e0c2      	b.n	8003a46 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 80a1 	bne.w	8003a0c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 809b 	beq.w	8003a0c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8095 	beq.w	8003a0c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d04e      	beq.n	80039a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003910:	8a3b      	ldrh	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8099 	beq.w	8003a4a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800391c:	8a3a      	ldrh	r2, [r7, #16]
 800391e:	429a      	cmp	r2, r3
 8003920:	f080 8093 	bcs.w	8003a4a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8a3a      	ldrh	r2, [r7, #16]
 8003928:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b20      	cmp	r3, #32
 8003932:	d02b      	beq.n	800398c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003942:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0210 	bic.w	r2, r2, #16
 8003980:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd ff37 	bl	80017fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003994:	b29b      	uxth	r3, r3
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	4619      	mov	r1, r3
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f878 	bl	8003a92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039a2:	e052      	b.n	8003a4a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d048      	beq.n	8003a4e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80039bc:	8a7b      	ldrh	r3, [r7, #18]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d045      	beq.n	8003a4e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0210 	bic.w	r2, r2, #16
 80039fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a00:	8a7b      	ldrh	r3, [r7, #18]
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f844 	bl	8003a92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a0a:	e020      	b.n	8003a4e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_UART_IRQHandler+0x324>
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8cb 	bl	8003bbc <UART_Transmit_IT>
    return;
 8003a26:	e013      	b.n	8003a50 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <HAL_UART_IRQHandler+0x34c>
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f90c 	bl	8003c5a <UART_EndTransmit_IT>
    return;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <HAL_UART_IRQHandler+0x34c>
    return;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_UART_IRQHandler+0x34c>
      return;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_IRQHandler+0x34c>
      return;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	3728      	adds	r7, #40	; 0x28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	08003b95 	.word	0x08003b95

08003a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	e02c      	b.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d028      	beq.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac8:	f7fd fd5e 	bl	8001588 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d21d      	bcs.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ae6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e00f      	b.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d0c3      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0210 	bic.w	r2, r2, #16
 8003b7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff66 	bl	8003a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b21      	cmp	r3, #33	; 0x21
 8003bce:	d13e      	bne.n	8003c4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d114      	bne.n	8003c04 <UART_Transmit_IT+0x48>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d110      	bne.n	8003c04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]
 8003c02:	e008      	b.n	8003c16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	1c59      	adds	r1, r3, #1
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6211      	str	r1, [r2, #32]
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4619      	mov	r1, r3
 8003c24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e000      	b.n	8003c50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff feee 	bl	8003a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b22      	cmp	r3, #34	; 0x22
 8003c9c:	f040 8099 	bne.w	8003dd2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d117      	bne.n	8003cda <UART_Receive_IT+0x50>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d113      	bne.n	8003cda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	1c9a      	adds	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd8:	e026      	b.n	8003d28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d007      	beq.n	8003cfe <UART_Receive_IT+0x74>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <UART_Receive_IT+0x82>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e008      	b.n	8003d1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4619      	mov	r1, r3
 8003d36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d148      	bne.n	8003dce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0220 	bic.w	r2, r2, #32
 8003d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d123      	bne.n	8003dc4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0210 	bic.w	r2, r2, #16
 8003d90:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d10a      	bne.n	8003db6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fe68 	bl	8003a92 <HAL_UARTEx_RxEventCallback>
 8003dc2:	e002      	b.n	8003dca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fe52 	bl	8003a6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e002      	b.n	8003dd4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e16:	f023 030c 	bic.w	r3, r3, #12
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <UART_SetConfig+0x114>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7fe ff5e 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	e002      	b.n	8003e52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7fe ff46 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8003e50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <UART_SetConfig+0x118>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	0119      	lsls	r1, r3, #4
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <UART_SetConfig+0x118>)
 8003e8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2064      	movs	r0, #100	; 0x64
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	; 0x32
 8003e9c:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <UART_SetConfig+0x118>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea8:	4419      	add	r1, r3
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009a      	lsls	r2, r3, #2
 8003eb4:	441a      	add	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <UART_SetConfig+0x118>)
 8003ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2064      	movs	r0, #100	; 0x64
 8003eca:	fb00 f303 	mul.w	r3, r0, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <UART_SetConfig+0x118>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	51eb851f 	.word	0x51eb851f

08003ef8 <__errno>:
 8003ef8:	4b01      	ldr	r3, [pc, #4]	; (8003f00 <__errno+0x8>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000024 	.word	0x20000024

08003f04 <__libc_init_array>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	2500      	movs	r5, #0
 8003f08:	4e0c      	ldr	r6, [pc, #48]	; (8003f3c <__libc_init_array+0x38>)
 8003f0a:	4c0d      	ldr	r4, [pc, #52]	; (8003f40 <__libc_init_array+0x3c>)
 8003f0c:	1ba4      	subs	r4, r4, r6
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	42a5      	cmp	r5, r4
 8003f12:	d109      	bne.n	8003f28 <__libc_init_array+0x24>
 8003f14:	f000 ff7c 	bl	8004e10 <_init>
 8003f18:	2500      	movs	r5, #0
 8003f1a:	4e0a      	ldr	r6, [pc, #40]	; (8003f44 <__libc_init_array+0x40>)
 8003f1c:	4c0a      	ldr	r4, [pc, #40]	; (8003f48 <__libc_init_array+0x44>)
 8003f1e:	1ba4      	subs	r4, r4, r6
 8003f20:	10a4      	asrs	r4, r4, #2
 8003f22:	42a5      	cmp	r5, r4
 8003f24:	d105      	bne.n	8003f32 <__libc_init_array+0x2e>
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f2c:	4798      	blx	r3
 8003f2e:	3501      	adds	r5, #1
 8003f30:	e7ee      	b.n	8003f10 <__libc_init_array+0xc>
 8003f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f36:	4798      	blx	r3
 8003f38:	3501      	adds	r5, #1
 8003f3a:	e7f2      	b.n	8003f22 <__libc_init_array+0x1e>
 8003f3c:	08004fb8 	.word	0x08004fb8
 8003f40:	08004fb8 	.word	0x08004fb8
 8003f44:	08004fb8 	.word	0x08004fb8
 8003f48:	08004fbc 	.word	0x08004fbc

08003f4c <memset>:
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4402      	add	r2, r0
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d100      	bne.n	8003f56 <memset+0xa>
 8003f54:	4770      	bx	lr
 8003f56:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5a:	e7f9      	b.n	8003f50 <memset+0x4>

08003f5c <iprintf>:
 8003f5c:	b40f      	push	{r0, r1, r2, r3}
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <iprintf+0x2c>)
 8003f60:	b513      	push	{r0, r1, r4, lr}
 8003f62:	681c      	ldr	r4, [r3, #0]
 8003f64:	b124      	cbz	r4, 8003f70 <iprintf+0x14>
 8003f66:	69a3      	ldr	r3, [r4, #24]
 8003f68:	b913      	cbnz	r3, 8003f70 <iprintf+0x14>
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 fa2a 	bl	80043c4 <__sinit>
 8003f70:	ab05      	add	r3, sp, #20
 8003f72:	9a04      	ldr	r2, [sp, #16]
 8003f74:	68a1      	ldr	r1, [r4, #8]
 8003f76:	4620      	mov	r0, r4
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	f000 fbdf 	bl	800473c <_vfiprintf_r>
 8003f7e:	b002      	add	sp, #8
 8003f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f84:	b004      	add	sp, #16
 8003f86:	4770      	bx	lr
 8003f88:	20000024 	.word	0x20000024

08003f8c <_puts_r>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	460e      	mov	r6, r1
 8003f90:	4605      	mov	r5, r0
 8003f92:	b118      	cbz	r0, 8003f9c <_puts_r+0x10>
 8003f94:	6983      	ldr	r3, [r0, #24]
 8003f96:	b90b      	cbnz	r3, 8003f9c <_puts_r+0x10>
 8003f98:	f000 fa14 	bl	80043c4 <__sinit>
 8003f9c:	69ab      	ldr	r3, [r5, #24]
 8003f9e:	68ac      	ldr	r4, [r5, #8]
 8003fa0:	b913      	cbnz	r3, 8003fa8 <_puts_r+0x1c>
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	f000 fa0e 	bl	80043c4 <__sinit>
 8003fa8:	4b23      	ldr	r3, [pc, #140]	; (8004038 <_puts_r+0xac>)
 8003faa:	429c      	cmp	r4, r3
 8003fac:	d117      	bne.n	8003fde <_puts_r+0x52>
 8003fae:	686c      	ldr	r4, [r5, #4]
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	071b      	lsls	r3, r3, #28
 8003fb4:	d51d      	bpl.n	8003ff2 <_puts_r+0x66>
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	b1db      	cbz	r3, 8003ff2 <_puts_r+0x66>
 8003fba:	3e01      	subs	r6, #1
 8003fbc:	68a3      	ldr	r3, [r4, #8]
 8003fbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	60a3      	str	r3, [r4, #8]
 8003fc6:	b9e9      	cbnz	r1, 8004004 <_puts_r+0x78>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	da2e      	bge.n	800402a <_puts_r+0x9e>
 8003fcc:	4622      	mov	r2, r4
 8003fce:	210a      	movs	r1, #10
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 f847 	bl	8004064 <__swbuf_r>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d011      	beq.n	8003ffe <_puts_r+0x72>
 8003fda:	200a      	movs	r0, #10
 8003fdc:	e011      	b.n	8004002 <_puts_r+0x76>
 8003fde:	4b17      	ldr	r3, [pc, #92]	; (800403c <_puts_r+0xb0>)
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	d101      	bne.n	8003fe8 <_puts_r+0x5c>
 8003fe4:	68ac      	ldr	r4, [r5, #8]
 8003fe6:	e7e3      	b.n	8003fb0 <_puts_r+0x24>
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <_puts_r+0xb4>)
 8003fea:	429c      	cmp	r4, r3
 8003fec:	bf08      	it	eq
 8003fee:	68ec      	ldreq	r4, [r5, #12]
 8003ff0:	e7de      	b.n	8003fb0 <_puts_r+0x24>
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 f887 	bl	8004108 <__swsetup_r>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d0dd      	beq.n	8003fba <_puts_r+0x2e>
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	2b00      	cmp	r3, #0
 8004006:	da04      	bge.n	8004012 <_puts_r+0x86>
 8004008:	69a2      	ldr	r2, [r4, #24]
 800400a:	429a      	cmp	r2, r3
 800400c:	dc06      	bgt.n	800401c <_puts_r+0x90>
 800400e:	290a      	cmp	r1, #10
 8004010:	d004      	beq.n	800401c <_puts_r+0x90>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	6022      	str	r2, [r4, #0]
 8004018:	7019      	strb	r1, [r3, #0]
 800401a:	e7cf      	b.n	8003fbc <_puts_r+0x30>
 800401c:	4622      	mov	r2, r4
 800401e:	4628      	mov	r0, r5
 8004020:	f000 f820 	bl	8004064 <__swbuf_r>
 8004024:	3001      	adds	r0, #1
 8004026:	d1c9      	bne.n	8003fbc <_puts_r+0x30>
 8004028:	e7e9      	b.n	8003ffe <_puts_r+0x72>
 800402a:	200a      	movs	r0, #10
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	6022      	str	r2, [r4, #0]
 8004032:	7018      	strb	r0, [r3, #0]
 8004034:	e7e5      	b.n	8004002 <_puts_r+0x76>
 8004036:	bf00      	nop
 8004038:	08004f44 	.word	0x08004f44
 800403c:	08004f64 	.word	0x08004f64
 8004040:	08004f24 	.word	0x08004f24

08004044 <puts>:
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <puts+0xc>)
 8004046:	4601      	mov	r1, r0
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	f7ff bf9f 	b.w	8003f8c <_puts_r>
 800404e:	bf00      	nop
 8004050:	20000024 	.word	0x20000024

08004054 <strcpy>:
 8004054:	4603      	mov	r3, r0
 8004056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800405a:	f803 2b01 	strb.w	r2, [r3], #1
 800405e:	2a00      	cmp	r2, #0
 8004060:	d1f9      	bne.n	8004056 <strcpy+0x2>
 8004062:	4770      	bx	lr

08004064 <__swbuf_r>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	460e      	mov	r6, r1
 8004068:	4614      	mov	r4, r2
 800406a:	4605      	mov	r5, r0
 800406c:	b118      	cbz	r0, 8004076 <__swbuf_r+0x12>
 800406e:	6983      	ldr	r3, [r0, #24]
 8004070:	b90b      	cbnz	r3, 8004076 <__swbuf_r+0x12>
 8004072:	f000 f9a7 	bl	80043c4 <__sinit>
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <__swbuf_r+0x98>)
 8004078:	429c      	cmp	r4, r3
 800407a:	d12a      	bne.n	80040d2 <__swbuf_r+0x6e>
 800407c:	686c      	ldr	r4, [r5, #4]
 800407e:	69a3      	ldr	r3, [r4, #24]
 8004080:	60a3      	str	r3, [r4, #8]
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	071a      	lsls	r2, r3, #28
 8004086:	d52e      	bpl.n	80040e6 <__swbuf_r+0x82>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	b363      	cbz	r3, 80040e6 <__swbuf_r+0x82>
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	b2f6      	uxtb	r6, r6
 8004092:	1ac0      	subs	r0, r0, r3
 8004094:	6963      	ldr	r3, [r4, #20]
 8004096:	4637      	mov	r7, r6
 8004098:	4283      	cmp	r3, r0
 800409a:	dc04      	bgt.n	80040a6 <__swbuf_r+0x42>
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f926 	bl	80042f0 <_fflush_r>
 80040a4:	bb28      	cbnz	r0, 80040f2 <__swbuf_r+0x8e>
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	3001      	adds	r0, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60a3      	str	r3, [r4, #8]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	6022      	str	r2, [r4, #0]
 80040b4:	701e      	strb	r6, [r3, #0]
 80040b6:	6963      	ldr	r3, [r4, #20]
 80040b8:	4283      	cmp	r3, r0
 80040ba:	d004      	beq.n	80040c6 <__swbuf_r+0x62>
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	07db      	lsls	r3, r3, #31
 80040c0:	d519      	bpl.n	80040f6 <__swbuf_r+0x92>
 80040c2:	2e0a      	cmp	r6, #10
 80040c4:	d117      	bne.n	80040f6 <__swbuf_r+0x92>
 80040c6:	4621      	mov	r1, r4
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f911 	bl	80042f0 <_fflush_r>
 80040ce:	b190      	cbz	r0, 80040f6 <__swbuf_r+0x92>
 80040d0:	e00f      	b.n	80040f2 <__swbuf_r+0x8e>
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <__swbuf_r+0x9c>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	d101      	bne.n	80040dc <__swbuf_r+0x78>
 80040d8:	68ac      	ldr	r4, [r5, #8]
 80040da:	e7d0      	b.n	800407e <__swbuf_r+0x1a>
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <__swbuf_r+0xa0>)
 80040de:	429c      	cmp	r4, r3
 80040e0:	bf08      	it	eq
 80040e2:	68ec      	ldreq	r4, [r5, #12]
 80040e4:	e7cb      	b.n	800407e <__swbuf_r+0x1a>
 80040e6:	4621      	mov	r1, r4
 80040e8:	4628      	mov	r0, r5
 80040ea:	f000 f80d 	bl	8004108 <__swsetup_r>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d0cc      	beq.n	800408c <__swbuf_r+0x28>
 80040f2:	f04f 37ff 	mov.w	r7, #4294967295
 80040f6:	4638      	mov	r0, r7
 80040f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fa:	bf00      	nop
 80040fc:	08004f44 	.word	0x08004f44
 8004100:	08004f64 	.word	0x08004f64
 8004104:	08004f24 	.word	0x08004f24

08004108 <__swsetup_r>:
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <__swsetup_r+0xcc>)
 800410a:	b570      	push	{r4, r5, r6, lr}
 800410c:	681d      	ldr	r5, [r3, #0]
 800410e:	4606      	mov	r6, r0
 8004110:	460c      	mov	r4, r1
 8004112:	b125      	cbz	r5, 800411e <__swsetup_r+0x16>
 8004114:	69ab      	ldr	r3, [r5, #24]
 8004116:	b913      	cbnz	r3, 800411e <__swsetup_r+0x16>
 8004118:	4628      	mov	r0, r5
 800411a:	f000 f953 	bl	80043c4 <__sinit>
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <__swsetup_r+0xd0>)
 8004120:	429c      	cmp	r4, r3
 8004122:	d10f      	bne.n	8004144 <__swsetup_r+0x3c>
 8004124:	686c      	ldr	r4, [r5, #4]
 8004126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412a:	b29a      	uxth	r2, r3
 800412c:	0715      	lsls	r5, r2, #28
 800412e:	d42c      	bmi.n	800418a <__swsetup_r+0x82>
 8004130:	06d0      	lsls	r0, r2, #27
 8004132:	d411      	bmi.n	8004158 <__swsetup_r+0x50>
 8004134:	2209      	movs	r2, #9
 8004136:	6032      	str	r2, [r6, #0]
 8004138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	f04f 30ff 	mov.w	r0, #4294967295
 8004142:	e03e      	b.n	80041c2 <__swsetup_r+0xba>
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <__swsetup_r+0xd4>)
 8004146:	429c      	cmp	r4, r3
 8004148:	d101      	bne.n	800414e <__swsetup_r+0x46>
 800414a:	68ac      	ldr	r4, [r5, #8]
 800414c:	e7eb      	b.n	8004126 <__swsetup_r+0x1e>
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <__swsetup_r+0xd8>)
 8004150:	429c      	cmp	r4, r3
 8004152:	bf08      	it	eq
 8004154:	68ec      	ldreq	r4, [r5, #12]
 8004156:	e7e6      	b.n	8004126 <__swsetup_r+0x1e>
 8004158:	0751      	lsls	r1, r2, #29
 800415a:	d512      	bpl.n	8004182 <__swsetup_r+0x7a>
 800415c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800415e:	b141      	cbz	r1, 8004172 <__swsetup_r+0x6a>
 8004160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004164:	4299      	cmp	r1, r3
 8004166:	d002      	beq.n	800416e <__swsetup_r+0x66>
 8004168:	4630      	mov	r0, r6
 800416a:	f000 fa19 	bl	80045a0 <_free_r>
 800416e:	2300      	movs	r3, #0
 8004170:	6363      	str	r3, [r4, #52]	; 0x34
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	2300      	movs	r3, #0
 800417c:	6063      	str	r3, [r4, #4]
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	f043 0308 	orr.w	r3, r3, #8
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	b94b      	cbnz	r3, 80041a2 <__swsetup_r+0x9a>
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004198:	d003      	beq.n	80041a2 <__swsetup_r+0x9a>
 800419a:	4621      	mov	r1, r4
 800419c:	4630      	mov	r0, r6
 800419e:	f000 f9bf 	bl	8004520 <__smakebuf_r>
 80041a2:	89a2      	ldrh	r2, [r4, #12]
 80041a4:	f012 0301 	ands.w	r3, r2, #1
 80041a8:	d00c      	beq.n	80041c4 <__swsetup_r+0xbc>
 80041aa:	2300      	movs	r3, #0
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	6963      	ldr	r3, [r4, #20]
 80041b0:	425b      	negs	r3, r3
 80041b2:	61a3      	str	r3, [r4, #24]
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	b953      	cbnz	r3, 80041ce <__swsetup_r+0xc6>
 80041b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80041c0:	d1ba      	bne.n	8004138 <__swsetup_r+0x30>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	0792      	lsls	r2, r2, #30
 80041c6:	bf58      	it	pl
 80041c8:	6963      	ldrpl	r3, [r4, #20]
 80041ca:	60a3      	str	r3, [r4, #8]
 80041cc:	e7f2      	b.n	80041b4 <__swsetup_r+0xac>
 80041ce:	2000      	movs	r0, #0
 80041d0:	e7f7      	b.n	80041c2 <__swsetup_r+0xba>
 80041d2:	bf00      	nop
 80041d4:	20000024 	.word	0x20000024
 80041d8:	08004f44 	.word	0x08004f44
 80041dc:	08004f64 	.word	0x08004f64
 80041e0:	08004f24 	.word	0x08004f24

080041e4 <__sflush_r>:
 80041e4:	898a      	ldrh	r2, [r1, #12]
 80041e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ea:	4605      	mov	r5, r0
 80041ec:	0710      	lsls	r0, r2, #28
 80041ee:	460c      	mov	r4, r1
 80041f0:	d458      	bmi.n	80042a4 <__sflush_r+0xc0>
 80041f2:	684b      	ldr	r3, [r1, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dc05      	bgt.n	8004204 <__sflush_r+0x20>
 80041f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	dc02      	bgt.n	8004204 <__sflush_r+0x20>
 80041fe:	2000      	movs	r0, #0
 8004200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004206:	2e00      	cmp	r6, #0
 8004208:	d0f9      	beq.n	80041fe <__sflush_r+0x1a>
 800420a:	2300      	movs	r3, #0
 800420c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004210:	682f      	ldr	r7, [r5, #0]
 8004212:	6a21      	ldr	r1, [r4, #32]
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	d032      	beq.n	800427e <__sflush_r+0x9a>
 8004218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	075a      	lsls	r2, r3, #29
 800421e:	d505      	bpl.n	800422c <__sflush_r+0x48>
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	1ac0      	subs	r0, r0, r3
 8004224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004226:	b10b      	cbz	r3, 800422c <__sflush_r+0x48>
 8004228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800422a:	1ac0      	subs	r0, r0, r3
 800422c:	2300      	movs	r3, #0
 800422e:	4602      	mov	r2, r0
 8004230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004232:	6a21      	ldr	r1, [r4, #32]
 8004234:	4628      	mov	r0, r5
 8004236:	47b0      	blx	r6
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	d106      	bne.n	800424c <__sflush_r+0x68>
 800423e:	6829      	ldr	r1, [r5, #0]
 8004240:	291d      	cmp	r1, #29
 8004242:	d848      	bhi.n	80042d6 <__sflush_r+0xf2>
 8004244:	4a29      	ldr	r2, [pc, #164]	; (80042ec <__sflush_r+0x108>)
 8004246:	40ca      	lsrs	r2, r1
 8004248:	07d6      	lsls	r6, r2, #31
 800424a:	d544      	bpl.n	80042d6 <__sflush_r+0xf2>
 800424c:	2200      	movs	r2, #0
 800424e:	6062      	str	r2, [r4, #4]
 8004250:	6922      	ldr	r2, [r4, #16]
 8004252:	04d9      	lsls	r1, r3, #19
 8004254:	6022      	str	r2, [r4, #0]
 8004256:	d504      	bpl.n	8004262 <__sflush_r+0x7e>
 8004258:	1c42      	adds	r2, r0, #1
 800425a:	d101      	bne.n	8004260 <__sflush_r+0x7c>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b903      	cbnz	r3, 8004262 <__sflush_r+0x7e>
 8004260:	6560      	str	r0, [r4, #84]	; 0x54
 8004262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004264:	602f      	str	r7, [r5, #0]
 8004266:	2900      	cmp	r1, #0
 8004268:	d0c9      	beq.n	80041fe <__sflush_r+0x1a>
 800426a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800426e:	4299      	cmp	r1, r3
 8004270:	d002      	beq.n	8004278 <__sflush_r+0x94>
 8004272:	4628      	mov	r0, r5
 8004274:	f000 f994 	bl	80045a0 <_free_r>
 8004278:	2000      	movs	r0, #0
 800427a:	6360      	str	r0, [r4, #52]	; 0x34
 800427c:	e7c0      	b.n	8004200 <__sflush_r+0x1c>
 800427e:	2301      	movs	r3, #1
 8004280:	4628      	mov	r0, r5
 8004282:	47b0      	blx	r6
 8004284:	1c41      	adds	r1, r0, #1
 8004286:	d1c8      	bne.n	800421a <__sflush_r+0x36>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0c5      	beq.n	800421a <__sflush_r+0x36>
 800428e:	2b1d      	cmp	r3, #29
 8004290:	d001      	beq.n	8004296 <__sflush_r+0xb2>
 8004292:	2b16      	cmp	r3, #22
 8004294:	d101      	bne.n	800429a <__sflush_r+0xb6>
 8004296:	602f      	str	r7, [r5, #0]
 8004298:	e7b1      	b.n	80041fe <__sflush_r+0x1a>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	e7ad      	b.n	8004200 <__sflush_r+0x1c>
 80042a4:	690f      	ldr	r7, [r1, #16]
 80042a6:	2f00      	cmp	r7, #0
 80042a8:	d0a9      	beq.n	80041fe <__sflush_r+0x1a>
 80042aa:	0793      	lsls	r3, r2, #30
 80042ac:	bf18      	it	ne
 80042ae:	2300      	movne	r3, #0
 80042b0:	680e      	ldr	r6, [r1, #0]
 80042b2:	bf08      	it	eq
 80042b4:	694b      	ldreq	r3, [r1, #20]
 80042b6:	eba6 0807 	sub.w	r8, r6, r7
 80042ba:	600f      	str	r7, [r1, #0]
 80042bc:	608b      	str	r3, [r1, #8]
 80042be:	f1b8 0f00 	cmp.w	r8, #0
 80042c2:	dd9c      	ble.n	80041fe <__sflush_r+0x1a>
 80042c4:	4643      	mov	r3, r8
 80042c6:	463a      	mov	r2, r7
 80042c8:	6a21      	ldr	r1, [r4, #32]
 80042ca:	4628      	mov	r0, r5
 80042cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042ce:	47b0      	blx	r6
 80042d0:	2800      	cmp	r0, #0
 80042d2:	dc06      	bgt.n	80042e2 <__sflush_r+0xfe>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	e78e      	b.n	8004200 <__sflush_r+0x1c>
 80042e2:	4407      	add	r7, r0
 80042e4:	eba8 0800 	sub.w	r8, r8, r0
 80042e8:	e7e9      	b.n	80042be <__sflush_r+0xda>
 80042ea:	bf00      	nop
 80042ec:	20400001 	.word	0x20400001

080042f0 <_fflush_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	690b      	ldr	r3, [r1, #16]
 80042f4:	4605      	mov	r5, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	b1db      	cbz	r3, 8004332 <_fflush_r+0x42>
 80042fa:	b118      	cbz	r0, 8004304 <_fflush_r+0x14>
 80042fc:	6983      	ldr	r3, [r0, #24]
 80042fe:	b90b      	cbnz	r3, 8004304 <_fflush_r+0x14>
 8004300:	f000 f860 	bl	80043c4 <__sinit>
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <_fflush_r+0x48>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d109      	bne.n	800431e <_fflush_r+0x2e>
 800430a:	686c      	ldr	r4, [r5, #4]
 800430c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004310:	b17b      	cbz	r3, 8004332 <_fflush_r+0x42>
 8004312:	4621      	mov	r1, r4
 8004314:	4628      	mov	r0, r5
 8004316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431a:	f7ff bf63 	b.w	80041e4 <__sflush_r>
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <_fflush_r+0x4c>)
 8004320:	429c      	cmp	r4, r3
 8004322:	d101      	bne.n	8004328 <_fflush_r+0x38>
 8004324:	68ac      	ldr	r4, [r5, #8]
 8004326:	e7f1      	b.n	800430c <_fflush_r+0x1c>
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <_fflush_r+0x50>)
 800432a:	429c      	cmp	r4, r3
 800432c:	bf08      	it	eq
 800432e:	68ec      	ldreq	r4, [r5, #12]
 8004330:	e7ec      	b.n	800430c <_fflush_r+0x1c>
 8004332:	2000      	movs	r0, #0
 8004334:	bd38      	pop	{r3, r4, r5, pc}
 8004336:	bf00      	nop
 8004338:	08004f44 	.word	0x08004f44
 800433c:	08004f64 	.word	0x08004f64
 8004340:	08004f24 	.word	0x08004f24

08004344 <std>:
 8004344:	2300      	movs	r3, #0
 8004346:	b510      	push	{r4, lr}
 8004348:	4604      	mov	r4, r0
 800434a:	e9c0 3300 	strd	r3, r3, [r0]
 800434e:	6083      	str	r3, [r0, #8]
 8004350:	8181      	strh	r1, [r0, #12]
 8004352:	6643      	str	r3, [r0, #100]	; 0x64
 8004354:	81c2      	strh	r2, [r0, #14]
 8004356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800435a:	6183      	str	r3, [r0, #24]
 800435c:	4619      	mov	r1, r3
 800435e:	2208      	movs	r2, #8
 8004360:	305c      	adds	r0, #92	; 0x5c
 8004362:	f7ff fdf3 	bl	8003f4c <memset>
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <std+0x38>)
 8004368:	6224      	str	r4, [r4, #32]
 800436a:	6263      	str	r3, [r4, #36]	; 0x24
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <std+0x3c>)
 800436e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <std+0x40>)
 8004372:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <std+0x44>)
 8004376:	6323      	str	r3, [r4, #48]	; 0x30
 8004378:	bd10      	pop	{r4, pc}
 800437a:	bf00      	nop
 800437c:	08004c99 	.word	0x08004c99
 8004380:	08004cbb 	.word	0x08004cbb
 8004384:	08004cf3 	.word	0x08004cf3
 8004388:	08004d17 	.word	0x08004d17

0800438c <_cleanup_r>:
 800438c:	4901      	ldr	r1, [pc, #4]	; (8004394 <_cleanup_r+0x8>)
 800438e:	f000 b885 	b.w	800449c <_fwalk_reent>
 8004392:	bf00      	nop
 8004394:	080042f1 	.word	0x080042f1

08004398 <__sfmoreglue>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	2568      	movs	r5, #104	; 0x68
 800439c:	1e4a      	subs	r2, r1, #1
 800439e:	4355      	muls	r5, r2
 80043a0:	460e      	mov	r6, r1
 80043a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043a6:	f000 f947 	bl	8004638 <_malloc_r>
 80043aa:	4604      	mov	r4, r0
 80043ac:	b140      	cbz	r0, 80043c0 <__sfmoreglue+0x28>
 80043ae:	2100      	movs	r1, #0
 80043b0:	e9c0 1600 	strd	r1, r6, [r0]
 80043b4:	300c      	adds	r0, #12
 80043b6:	60a0      	str	r0, [r4, #8]
 80043b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043bc:	f7ff fdc6 	bl	8003f4c <memset>
 80043c0:	4620      	mov	r0, r4
 80043c2:	bd70      	pop	{r4, r5, r6, pc}

080043c4 <__sinit>:
 80043c4:	6983      	ldr	r3, [r0, #24]
 80043c6:	b510      	push	{r4, lr}
 80043c8:	4604      	mov	r4, r0
 80043ca:	bb33      	cbnz	r3, 800441a <__sinit+0x56>
 80043cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80043d0:	6503      	str	r3, [r0, #80]	; 0x50
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <__sinit+0x58>)
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <__sinit+0x5c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6282      	str	r2, [r0, #40]	; 0x28
 80043da:	4298      	cmp	r0, r3
 80043dc:	bf04      	itt	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	6183      	streq	r3, [r0, #24]
 80043e2:	f000 f81f 	bl	8004424 <__sfp>
 80043e6:	6060      	str	r0, [r4, #4]
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 f81b 	bl	8004424 <__sfp>
 80043ee:	60a0      	str	r0, [r4, #8]
 80043f0:	4620      	mov	r0, r4
 80043f2:	f000 f817 	bl	8004424 <__sfp>
 80043f6:	2200      	movs	r2, #0
 80043f8:	60e0      	str	r0, [r4, #12]
 80043fa:	2104      	movs	r1, #4
 80043fc:	6860      	ldr	r0, [r4, #4]
 80043fe:	f7ff ffa1 	bl	8004344 <std>
 8004402:	2201      	movs	r2, #1
 8004404:	2109      	movs	r1, #9
 8004406:	68a0      	ldr	r0, [r4, #8]
 8004408:	f7ff ff9c 	bl	8004344 <std>
 800440c:	2202      	movs	r2, #2
 800440e:	2112      	movs	r1, #18
 8004410:	68e0      	ldr	r0, [r4, #12]
 8004412:	f7ff ff97 	bl	8004344 <std>
 8004416:	2301      	movs	r3, #1
 8004418:	61a3      	str	r3, [r4, #24]
 800441a:	bd10      	pop	{r4, pc}
 800441c:	08004f20 	.word	0x08004f20
 8004420:	0800438d 	.word	0x0800438d

08004424 <__sfp>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <__sfp+0x70>)
 8004428:	4607      	mov	r7, r0
 800442a:	681e      	ldr	r6, [r3, #0]
 800442c:	69b3      	ldr	r3, [r6, #24]
 800442e:	b913      	cbnz	r3, 8004436 <__sfp+0x12>
 8004430:	4630      	mov	r0, r6
 8004432:	f7ff ffc7 	bl	80043c4 <__sinit>
 8004436:	3648      	adds	r6, #72	; 0x48
 8004438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800443c:	3b01      	subs	r3, #1
 800443e:	d503      	bpl.n	8004448 <__sfp+0x24>
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	b133      	cbz	r3, 8004452 <__sfp+0x2e>
 8004444:	6836      	ldr	r6, [r6, #0]
 8004446:	e7f7      	b.n	8004438 <__sfp+0x14>
 8004448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800444c:	b16d      	cbz	r5, 800446a <__sfp+0x46>
 800444e:	3468      	adds	r4, #104	; 0x68
 8004450:	e7f4      	b.n	800443c <__sfp+0x18>
 8004452:	2104      	movs	r1, #4
 8004454:	4638      	mov	r0, r7
 8004456:	f7ff ff9f 	bl	8004398 <__sfmoreglue>
 800445a:	6030      	str	r0, [r6, #0]
 800445c:	2800      	cmp	r0, #0
 800445e:	d1f1      	bne.n	8004444 <__sfp+0x20>
 8004460:	230c      	movs	r3, #12
 8004462:	4604      	mov	r4, r0
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	4620      	mov	r0, r4
 8004468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <__sfp+0x74>)
 800446c:	6665      	str	r5, [r4, #100]	; 0x64
 800446e:	e9c4 5500 	strd	r5, r5, [r4]
 8004472:	60a5      	str	r5, [r4, #8]
 8004474:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004478:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800447c:	2208      	movs	r2, #8
 800447e:	4629      	mov	r1, r5
 8004480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004484:	f7ff fd62 	bl	8003f4c <memset>
 8004488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800448c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004490:	e7e9      	b.n	8004466 <__sfp+0x42>
 8004492:	bf00      	nop
 8004494:	08004f20 	.word	0x08004f20
 8004498:	ffff0001 	.word	0xffff0001

0800449c <_fwalk_reent>:
 800449c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a0:	4680      	mov	r8, r0
 80044a2:	4689      	mov	r9, r1
 80044a4:	2600      	movs	r6, #0
 80044a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044aa:	b914      	cbnz	r4, 80044b2 <_fwalk_reent+0x16>
 80044ac:	4630      	mov	r0, r6
 80044ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044b6:	3f01      	subs	r7, #1
 80044b8:	d501      	bpl.n	80044be <_fwalk_reent+0x22>
 80044ba:	6824      	ldr	r4, [r4, #0]
 80044bc:	e7f5      	b.n	80044aa <_fwalk_reent+0xe>
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d907      	bls.n	80044d4 <_fwalk_reent+0x38>
 80044c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044c8:	3301      	adds	r3, #1
 80044ca:	d003      	beq.n	80044d4 <_fwalk_reent+0x38>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4640      	mov	r0, r8
 80044d0:	47c8      	blx	r9
 80044d2:	4306      	orrs	r6, r0
 80044d4:	3568      	adds	r5, #104	; 0x68
 80044d6:	e7ee      	b.n	80044b6 <_fwalk_reent+0x1a>

080044d8 <__swhatbuf_r>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	460e      	mov	r6, r1
 80044dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e0:	b096      	sub	sp, #88	; 0x58
 80044e2:	2900      	cmp	r1, #0
 80044e4:	4614      	mov	r4, r2
 80044e6:	461d      	mov	r5, r3
 80044e8:	da07      	bge.n	80044fa <__swhatbuf_r+0x22>
 80044ea:	2300      	movs	r3, #0
 80044ec:	602b      	str	r3, [r5, #0]
 80044ee:	89b3      	ldrh	r3, [r6, #12]
 80044f0:	061a      	lsls	r2, r3, #24
 80044f2:	d410      	bmi.n	8004516 <__swhatbuf_r+0x3e>
 80044f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f8:	e00e      	b.n	8004518 <__swhatbuf_r+0x40>
 80044fa:	466a      	mov	r2, sp
 80044fc:	f000 fc32 	bl	8004d64 <_fstat_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	dbf2      	blt.n	80044ea <__swhatbuf_r+0x12>
 8004504:	9a01      	ldr	r2, [sp, #4]
 8004506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800450a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800450e:	425a      	negs	r2, r3
 8004510:	415a      	adcs	r2, r3
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	e7ee      	b.n	80044f4 <__swhatbuf_r+0x1c>
 8004516:	2340      	movs	r3, #64	; 0x40
 8004518:	2000      	movs	r0, #0
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	b016      	add	sp, #88	; 0x58
 800451e:	bd70      	pop	{r4, r5, r6, pc}

08004520 <__smakebuf_r>:
 8004520:	898b      	ldrh	r3, [r1, #12]
 8004522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004524:	079d      	lsls	r5, r3, #30
 8004526:	4606      	mov	r6, r0
 8004528:	460c      	mov	r4, r1
 800452a:	d507      	bpl.n	800453c <__smakebuf_r+0x1c>
 800452c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	6123      	str	r3, [r4, #16]
 8004534:	2301      	movs	r3, #1
 8004536:	6163      	str	r3, [r4, #20]
 8004538:	b002      	add	sp, #8
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	ab01      	add	r3, sp, #4
 800453e:	466a      	mov	r2, sp
 8004540:	f7ff ffca 	bl	80044d8 <__swhatbuf_r>
 8004544:	9900      	ldr	r1, [sp, #0]
 8004546:	4605      	mov	r5, r0
 8004548:	4630      	mov	r0, r6
 800454a:	f000 f875 	bl	8004638 <_malloc_r>
 800454e:	b948      	cbnz	r0, 8004564 <__smakebuf_r+0x44>
 8004550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004554:	059a      	lsls	r2, r3, #22
 8004556:	d4ef      	bmi.n	8004538 <__smakebuf_r+0x18>
 8004558:	f023 0303 	bic.w	r3, r3, #3
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	81a3      	strh	r3, [r4, #12]
 8004562:	e7e3      	b.n	800452c <__smakebuf_r+0xc>
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <__smakebuf_r+0x7c>)
 8004566:	62b3      	str	r3, [r6, #40]	; 0x28
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	6020      	str	r0, [r4, #0]
 800456c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	9b00      	ldr	r3, [sp, #0]
 8004574:	6120      	str	r0, [r4, #16]
 8004576:	6163      	str	r3, [r4, #20]
 8004578:	9b01      	ldr	r3, [sp, #4]
 800457a:	b15b      	cbz	r3, 8004594 <__smakebuf_r+0x74>
 800457c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 fc01 	bl	8004d88 <_isatty_r>
 8004586:	b128      	cbz	r0, 8004594 <__smakebuf_r+0x74>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	431d      	orrs	r5, r3
 8004598:	81a5      	strh	r5, [r4, #12]
 800459a:	e7cd      	b.n	8004538 <__smakebuf_r+0x18>
 800459c:	0800438d 	.word	0x0800438d

080045a0 <_free_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4605      	mov	r5, r0
 80045a4:	2900      	cmp	r1, #0
 80045a6:	d043      	beq.n	8004630 <_free_r+0x90>
 80045a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ac:	1f0c      	subs	r4, r1, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfb8      	it	lt
 80045b2:	18e4      	addlt	r4, r4, r3
 80045b4:	f000 fc18 	bl	8004de8 <__malloc_lock>
 80045b8:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <_free_r+0x94>)
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	4610      	mov	r0, r2
 80045be:	b933      	cbnz	r3, 80045ce <_free_r+0x2e>
 80045c0:	6063      	str	r3, [r4, #4]
 80045c2:	6014      	str	r4, [r2, #0]
 80045c4:	4628      	mov	r0, r5
 80045c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ca:	f000 bc0e 	b.w	8004dea <__malloc_unlock>
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	d90b      	bls.n	80045ea <_free_r+0x4a>
 80045d2:	6821      	ldr	r1, [r4, #0]
 80045d4:	1862      	adds	r2, r4, r1
 80045d6:	4293      	cmp	r3, r2
 80045d8:	bf01      	itttt	eq
 80045da:	681a      	ldreq	r2, [r3, #0]
 80045dc:	685b      	ldreq	r3, [r3, #4]
 80045de:	1852      	addeq	r2, r2, r1
 80045e0:	6022      	streq	r2, [r4, #0]
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	6004      	str	r4, [r0, #0]
 80045e6:	e7ed      	b.n	80045c4 <_free_r+0x24>
 80045e8:	4613      	mov	r3, r2
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	b10a      	cbz	r2, 80045f2 <_free_r+0x52>
 80045ee:	42a2      	cmp	r2, r4
 80045f0:	d9fa      	bls.n	80045e8 <_free_r+0x48>
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	1858      	adds	r0, r3, r1
 80045f6:	42a0      	cmp	r0, r4
 80045f8:	d10b      	bne.n	8004612 <_free_r+0x72>
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	4401      	add	r1, r0
 80045fe:	1858      	adds	r0, r3, r1
 8004600:	4282      	cmp	r2, r0
 8004602:	6019      	str	r1, [r3, #0]
 8004604:	d1de      	bne.n	80045c4 <_free_r+0x24>
 8004606:	6810      	ldr	r0, [r2, #0]
 8004608:	6852      	ldr	r2, [r2, #4]
 800460a:	4401      	add	r1, r0
 800460c:	6019      	str	r1, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	e7d8      	b.n	80045c4 <_free_r+0x24>
 8004612:	d902      	bls.n	800461a <_free_r+0x7a>
 8004614:	230c      	movs	r3, #12
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	e7d4      	b.n	80045c4 <_free_r+0x24>
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	1821      	adds	r1, r4, r0
 800461e:	428a      	cmp	r2, r1
 8004620:	bf01      	itttt	eq
 8004622:	6811      	ldreq	r1, [r2, #0]
 8004624:	6852      	ldreq	r2, [r2, #4]
 8004626:	1809      	addeq	r1, r1, r0
 8004628:	6021      	streq	r1, [r4, #0]
 800462a:	6062      	str	r2, [r4, #4]
 800462c:	605c      	str	r4, [r3, #4]
 800462e:	e7c9      	b.n	80045c4 <_free_r+0x24>
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	bf00      	nop
 8004634:	200000b8 	.word	0x200000b8

08004638 <_malloc_r>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	1ccd      	adds	r5, r1, #3
 800463c:	f025 0503 	bic.w	r5, r5, #3
 8004640:	3508      	adds	r5, #8
 8004642:	2d0c      	cmp	r5, #12
 8004644:	bf38      	it	cc
 8004646:	250c      	movcc	r5, #12
 8004648:	2d00      	cmp	r5, #0
 800464a:	4606      	mov	r6, r0
 800464c:	db01      	blt.n	8004652 <_malloc_r+0x1a>
 800464e:	42a9      	cmp	r1, r5
 8004650:	d903      	bls.n	800465a <_malloc_r+0x22>
 8004652:	230c      	movs	r3, #12
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	2000      	movs	r0, #0
 8004658:	bd70      	pop	{r4, r5, r6, pc}
 800465a:	f000 fbc5 	bl	8004de8 <__malloc_lock>
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <_malloc_r+0xac>)
 8004660:	6814      	ldr	r4, [r2, #0]
 8004662:	4621      	mov	r1, r4
 8004664:	b991      	cbnz	r1, 800468c <_malloc_r+0x54>
 8004666:	4c20      	ldr	r4, [pc, #128]	; (80046e8 <_malloc_r+0xb0>)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	b91b      	cbnz	r3, 8004674 <_malloc_r+0x3c>
 800466c:	4630      	mov	r0, r6
 800466e:	f000 fb03 	bl	8004c78 <_sbrk_r>
 8004672:	6020      	str	r0, [r4, #0]
 8004674:	4629      	mov	r1, r5
 8004676:	4630      	mov	r0, r6
 8004678:	f000 fafe 	bl	8004c78 <_sbrk_r>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d124      	bne.n	80046ca <_malloc_r+0x92>
 8004680:	230c      	movs	r3, #12
 8004682:	4630      	mov	r0, r6
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	f000 fbb0 	bl	8004dea <__malloc_unlock>
 800468a:	e7e4      	b.n	8004656 <_malloc_r+0x1e>
 800468c:	680b      	ldr	r3, [r1, #0]
 800468e:	1b5b      	subs	r3, r3, r5
 8004690:	d418      	bmi.n	80046c4 <_malloc_r+0x8c>
 8004692:	2b0b      	cmp	r3, #11
 8004694:	d90f      	bls.n	80046b6 <_malloc_r+0x7e>
 8004696:	600b      	str	r3, [r1, #0]
 8004698:	18cc      	adds	r4, r1, r3
 800469a:	50cd      	str	r5, [r1, r3]
 800469c:	4630      	mov	r0, r6
 800469e:	f000 fba4 	bl	8004dea <__malloc_unlock>
 80046a2:	f104 000b 	add.w	r0, r4, #11
 80046a6:	1d23      	adds	r3, r4, #4
 80046a8:	f020 0007 	bic.w	r0, r0, #7
 80046ac:	1ac3      	subs	r3, r0, r3
 80046ae:	d0d3      	beq.n	8004658 <_malloc_r+0x20>
 80046b0:	425a      	negs	r2, r3
 80046b2:	50e2      	str	r2, [r4, r3]
 80046b4:	e7d0      	b.n	8004658 <_malloc_r+0x20>
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	428c      	cmp	r4, r1
 80046ba:	bf16      	itet	ne
 80046bc:	6063      	strne	r3, [r4, #4]
 80046be:	6013      	streq	r3, [r2, #0]
 80046c0:	460c      	movne	r4, r1
 80046c2:	e7eb      	b.n	800469c <_malloc_r+0x64>
 80046c4:	460c      	mov	r4, r1
 80046c6:	6849      	ldr	r1, [r1, #4]
 80046c8:	e7cc      	b.n	8004664 <_malloc_r+0x2c>
 80046ca:	1cc4      	adds	r4, r0, #3
 80046cc:	f024 0403 	bic.w	r4, r4, #3
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d005      	beq.n	80046e0 <_malloc_r+0xa8>
 80046d4:	1a21      	subs	r1, r4, r0
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 face 	bl	8004c78 <_sbrk_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	d0cf      	beq.n	8004680 <_malloc_r+0x48>
 80046e0:	6025      	str	r5, [r4, #0]
 80046e2:	e7db      	b.n	800469c <_malloc_r+0x64>
 80046e4:	200000b8 	.word	0x200000b8
 80046e8:	200000bc 	.word	0x200000bc

080046ec <__sfputc_r>:
 80046ec:	6893      	ldr	r3, [r2, #8]
 80046ee:	b410      	push	{r4}
 80046f0:	3b01      	subs	r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	6093      	str	r3, [r2, #8]
 80046f6:	da07      	bge.n	8004708 <__sfputc_r+0x1c>
 80046f8:	6994      	ldr	r4, [r2, #24]
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	db01      	blt.n	8004702 <__sfputc_r+0x16>
 80046fe:	290a      	cmp	r1, #10
 8004700:	d102      	bne.n	8004708 <__sfputc_r+0x1c>
 8004702:	bc10      	pop	{r4}
 8004704:	f7ff bcae 	b.w	8004064 <__swbuf_r>
 8004708:	6813      	ldr	r3, [r2, #0]
 800470a:	1c58      	adds	r0, r3, #1
 800470c:	6010      	str	r0, [r2, #0]
 800470e:	7019      	strb	r1, [r3, #0]
 8004710:	4608      	mov	r0, r1
 8004712:	bc10      	pop	{r4}
 8004714:	4770      	bx	lr

08004716 <__sfputs_r>:
 8004716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004718:	4606      	mov	r6, r0
 800471a:	460f      	mov	r7, r1
 800471c:	4614      	mov	r4, r2
 800471e:	18d5      	adds	r5, r2, r3
 8004720:	42ac      	cmp	r4, r5
 8004722:	d101      	bne.n	8004728 <__sfputs_r+0x12>
 8004724:	2000      	movs	r0, #0
 8004726:	e007      	b.n	8004738 <__sfputs_r+0x22>
 8004728:	463a      	mov	r2, r7
 800472a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800472e:	4630      	mov	r0, r6
 8004730:	f7ff ffdc 	bl	80046ec <__sfputc_r>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d1f3      	bne.n	8004720 <__sfputs_r+0xa>
 8004738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800473c <_vfiprintf_r>:
 800473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	460c      	mov	r4, r1
 8004742:	b09d      	sub	sp, #116	; 0x74
 8004744:	4617      	mov	r7, r2
 8004746:	461d      	mov	r5, r3
 8004748:	4606      	mov	r6, r0
 800474a:	b118      	cbz	r0, 8004754 <_vfiprintf_r+0x18>
 800474c:	6983      	ldr	r3, [r0, #24]
 800474e:	b90b      	cbnz	r3, 8004754 <_vfiprintf_r+0x18>
 8004750:	f7ff fe38 	bl	80043c4 <__sinit>
 8004754:	4b7c      	ldr	r3, [pc, #496]	; (8004948 <_vfiprintf_r+0x20c>)
 8004756:	429c      	cmp	r4, r3
 8004758:	d158      	bne.n	800480c <_vfiprintf_r+0xd0>
 800475a:	6874      	ldr	r4, [r6, #4]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	0718      	lsls	r0, r3, #28
 8004760:	d55e      	bpl.n	8004820 <_vfiprintf_r+0xe4>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05b      	beq.n	8004820 <_vfiprintf_r+0xe4>
 8004768:	2300      	movs	r3, #0
 800476a:	9309      	str	r3, [sp, #36]	; 0x24
 800476c:	2320      	movs	r3, #32
 800476e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004772:	2330      	movs	r3, #48	; 0x30
 8004774:	f04f 0b01 	mov.w	fp, #1
 8004778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800477c:	9503      	str	r5, [sp, #12]
 800477e:	46b8      	mov	r8, r7
 8004780:	4645      	mov	r5, r8
 8004782:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004786:	b10b      	cbz	r3, 800478c <_vfiprintf_r+0x50>
 8004788:	2b25      	cmp	r3, #37	; 0x25
 800478a:	d154      	bne.n	8004836 <_vfiprintf_r+0xfa>
 800478c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004790:	d00b      	beq.n	80047aa <_vfiprintf_r+0x6e>
 8004792:	4653      	mov	r3, sl
 8004794:	463a      	mov	r2, r7
 8004796:	4621      	mov	r1, r4
 8004798:	4630      	mov	r0, r6
 800479a:	f7ff ffbc 	bl	8004716 <__sfputs_r>
 800479e:	3001      	adds	r0, #1
 80047a0:	f000 80c2 	beq.w	8004928 <_vfiprintf_r+0x1ec>
 80047a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a6:	4453      	add	r3, sl
 80047a8:	9309      	str	r3, [sp, #36]	; 0x24
 80047aa:	f898 3000 	ldrb.w	r3, [r8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80ba 	beq.w	8004928 <_vfiprintf_r+0x1ec>
 80047b4:	2300      	movs	r3, #0
 80047b6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	9307      	str	r3, [sp, #28]
 80047c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047c6:	931a      	str	r3, [sp, #104]	; 0x68
 80047c8:	46a8      	mov	r8, r5
 80047ca:	2205      	movs	r2, #5
 80047cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80047d0:	485e      	ldr	r0, [pc, #376]	; (800494c <_vfiprintf_r+0x210>)
 80047d2:	f000 fafb 	bl	8004dcc <memchr>
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	bb78      	cbnz	r0, 800483a <_vfiprintf_r+0xfe>
 80047da:	06d9      	lsls	r1, r3, #27
 80047dc:	bf44      	itt	mi
 80047de:	2220      	movmi	r2, #32
 80047e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047e4:	071a      	lsls	r2, r3, #28
 80047e6:	bf44      	itt	mi
 80047e8:	222b      	movmi	r2, #43	; 0x2b
 80047ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047ee:	782a      	ldrb	r2, [r5, #0]
 80047f0:	2a2a      	cmp	r2, #42	; 0x2a
 80047f2:	d02a      	beq.n	800484a <_vfiprintf_r+0x10e>
 80047f4:	46a8      	mov	r8, r5
 80047f6:	2000      	movs	r0, #0
 80047f8:	250a      	movs	r5, #10
 80047fa:	9a07      	ldr	r2, [sp, #28]
 80047fc:	4641      	mov	r1, r8
 80047fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004802:	3b30      	subs	r3, #48	; 0x30
 8004804:	2b09      	cmp	r3, #9
 8004806:	d969      	bls.n	80048dc <_vfiprintf_r+0x1a0>
 8004808:	b360      	cbz	r0, 8004864 <_vfiprintf_r+0x128>
 800480a:	e024      	b.n	8004856 <_vfiprintf_r+0x11a>
 800480c:	4b50      	ldr	r3, [pc, #320]	; (8004950 <_vfiprintf_r+0x214>)
 800480e:	429c      	cmp	r4, r3
 8004810:	d101      	bne.n	8004816 <_vfiprintf_r+0xda>
 8004812:	68b4      	ldr	r4, [r6, #8]
 8004814:	e7a2      	b.n	800475c <_vfiprintf_r+0x20>
 8004816:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <_vfiprintf_r+0x218>)
 8004818:	429c      	cmp	r4, r3
 800481a:	bf08      	it	eq
 800481c:	68f4      	ldreq	r4, [r6, #12]
 800481e:	e79d      	b.n	800475c <_vfiprintf_r+0x20>
 8004820:	4621      	mov	r1, r4
 8004822:	4630      	mov	r0, r6
 8004824:	f7ff fc70 	bl	8004108 <__swsetup_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	d09d      	beq.n	8004768 <_vfiprintf_r+0x2c>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	b01d      	add	sp, #116	; 0x74
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	46a8      	mov	r8, r5
 8004838:	e7a2      	b.n	8004780 <_vfiprintf_r+0x44>
 800483a:	4a44      	ldr	r2, [pc, #272]	; (800494c <_vfiprintf_r+0x210>)
 800483c:	4645      	mov	r5, r8
 800483e:	1a80      	subs	r0, r0, r2
 8004840:	fa0b f000 	lsl.w	r0, fp, r0
 8004844:	4318      	orrs	r0, r3
 8004846:	9004      	str	r0, [sp, #16]
 8004848:	e7be      	b.n	80047c8 <_vfiprintf_r+0x8c>
 800484a:	9a03      	ldr	r2, [sp, #12]
 800484c:	1d11      	adds	r1, r2, #4
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	9103      	str	r1, [sp, #12]
 8004852:	2a00      	cmp	r2, #0
 8004854:	db01      	blt.n	800485a <_vfiprintf_r+0x11e>
 8004856:	9207      	str	r2, [sp, #28]
 8004858:	e004      	b.n	8004864 <_vfiprintf_r+0x128>
 800485a:	4252      	negs	r2, r2
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	9207      	str	r2, [sp, #28]
 8004862:	9304      	str	r3, [sp, #16]
 8004864:	f898 3000 	ldrb.w	r3, [r8]
 8004868:	2b2e      	cmp	r3, #46	; 0x2e
 800486a:	d10e      	bne.n	800488a <_vfiprintf_r+0x14e>
 800486c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004870:	2b2a      	cmp	r3, #42	; 0x2a
 8004872:	d138      	bne.n	80048e6 <_vfiprintf_r+0x1aa>
 8004874:	9b03      	ldr	r3, [sp, #12]
 8004876:	f108 0802 	add.w	r8, r8, #2
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	9203      	str	r2, [sp, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	bfb8      	it	lt
 8004884:	f04f 33ff 	movlt.w	r3, #4294967295
 8004888:	9305      	str	r3, [sp, #20]
 800488a:	4d33      	ldr	r5, [pc, #204]	; (8004958 <_vfiprintf_r+0x21c>)
 800488c:	2203      	movs	r2, #3
 800488e:	f898 1000 	ldrb.w	r1, [r8]
 8004892:	4628      	mov	r0, r5
 8004894:	f000 fa9a 	bl	8004dcc <memchr>
 8004898:	b140      	cbz	r0, 80048ac <_vfiprintf_r+0x170>
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	1b40      	subs	r0, r0, r5
 800489e:	fa03 f000 	lsl.w	r0, r3, r0
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	f108 0801 	add.w	r8, r8, #1
 80048a8:	4303      	orrs	r3, r0
 80048aa:	9304      	str	r3, [sp, #16]
 80048ac:	f898 1000 	ldrb.w	r1, [r8]
 80048b0:	2206      	movs	r2, #6
 80048b2:	482a      	ldr	r0, [pc, #168]	; (800495c <_vfiprintf_r+0x220>)
 80048b4:	f108 0701 	add.w	r7, r8, #1
 80048b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048bc:	f000 fa86 	bl	8004dcc <memchr>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d037      	beq.n	8004934 <_vfiprintf_r+0x1f8>
 80048c4:	4b26      	ldr	r3, [pc, #152]	; (8004960 <_vfiprintf_r+0x224>)
 80048c6:	bb1b      	cbnz	r3, 8004910 <_vfiprintf_r+0x1d4>
 80048c8:	9b03      	ldr	r3, [sp, #12]
 80048ca:	3307      	adds	r3, #7
 80048cc:	f023 0307 	bic.w	r3, r3, #7
 80048d0:	3308      	adds	r3, #8
 80048d2:	9303      	str	r3, [sp, #12]
 80048d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d6:	444b      	add	r3, r9
 80048d8:	9309      	str	r3, [sp, #36]	; 0x24
 80048da:	e750      	b.n	800477e <_vfiprintf_r+0x42>
 80048dc:	fb05 3202 	mla	r2, r5, r2, r3
 80048e0:	2001      	movs	r0, #1
 80048e2:	4688      	mov	r8, r1
 80048e4:	e78a      	b.n	80047fc <_vfiprintf_r+0xc0>
 80048e6:	2300      	movs	r3, #0
 80048e8:	250a      	movs	r5, #10
 80048ea:	4619      	mov	r1, r3
 80048ec:	f108 0801 	add.w	r8, r8, #1
 80048f0:	9305      	str	r3, [sp, #20]
 80048f2:	4640      	mov	r0, r8
 80048f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f8:	3a30      	subs	r2, #48	; 0x30
 80048fa:	2a09      	cmp	r2, #9
 80048fc:	d903      	bls.n	8004906 <_vfiprintf_r+0x1ca>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0c3      	beq.n	800488a <_vfiprintf_r+0x14e>
 8004902:	9105      	str	r1, [sp, #20]
 8004904:	e7c1      	b.n	800488a <_vfiprintf_r+0x14e>
 8004906:	fb05 2101 	mla	r1, r5, r1, r2
 800490a:	2301      	movs	r3, #1
 800490c:	4680      	mov	r8, r0
 800490e:	e7f0      	b.n	80048f2 <_vfiprintf_r+0x1b6>
 8004910:	ab03      	add	r3, sp, #12
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4622      	mov	r2, r4
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <_vfiprintf_r+0x228>)
 8004918:	a904      	add	r1, sp, #16
 800491a:	4630      	mov	r0, r6
 800491c:	f3af 8000 	nop.w
 8004920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004924:	4681      	mov	r9, r0
 8004926:	d1d5      	bne.n	80048d4 <_vfiprintf_r+0x198>
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	065b      	lsls	r3, r3, #25
 800492c:	f53f af7e 	bmi.w	800482c <_vfiprintf_r+0xf0>
 8004930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004932:	e77d      	b.n	8004830 <_vfiprintf_r+0xf4>
 8004934:	ab03      	add	r3, sp, #12
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4622      	mov	r2, r4
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <_vfiprintf_r+0x228>)
 800493c:	a904      	add	r1, sp, #16
 800493e:	4630      	mov	r0, r6
 8004940:	f000 f888 	bl	8004a54 <_printf_i>
 8004944:	e7ec      	b.n	8004920 <_vfiprintf_r+0x1e4>
 8004946:	bf00      	nop
 8004948:	08004f44 	.word	0x08004f44
 800494c:	08004f84 	.word	0x08004f84
 8004950:	08004f64 	.word	0x08004f64
 8004954:	08004f24 	.word	0x08004f24
 8004958:	08004f8a 	.word	0x08004f8a
 800495c:	08004f8e 	.word	0x08004f8e
 8004960:	00000000 	.word	0x00000000
 8004964:	08004717 	.word	0x08004717

08004968 <_printf_common>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	4691      	mov	r9, r2
 800496e:	461f      	mov	r7, r3
 8004970:	688a      	ldr	r2, [r1, #8]
 8004972:	690b      	ldr	r3, [r1, #16]
 8004974:	4606      	mov	r6, r0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfb8      	it	lt
 800497a:	4613      	movlt	r3, r2
 800497c:	f8c9 3000 	str.w	r3, [r9]
 8004980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004984:	460c      	mov	r4, r1
 8004986:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800498a:	b112      	cbz	r2, 8004992 <_printf_common+0x2a>
 800498c:	3301      	adds	r3, #1
 800498e:	f8c9 3000 	str.w	r3, [r9]
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	0699      	lsls	r1, r3, #26
 8004996:	bf42      	ittt	mi
 8004998:	f8d9 3000 	ldrmi.w	r3, [r9]
 800499c:	3302      	addmi	r3, #2
 800499e:	f8c9 3000 	strmi.w	r3, [r9]
 80049a2:	6825      	ldr	r5, [r4, #0]
 80049a4:	f015 0506 	ands.w	r5, r5, #6
 80049a8:	d107      	bne.n	80049ba <_printf_common+0x52>
 80049aa:	f104 0a19 	add.w	sl, r4, #25
 80049ae:	68e3      	ldr	r3, [r4, #12]
 80049b0:	f8d9 2000 	ldr.w	r2, [r9]
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	42ab      	cmp	r3, r5
 80049b8:	dc29      	bgt.n	8004a0e <_printf_common+0xa6>
 80049ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049be:	6822      	ldr	r2, [r4, #0]
 80049c0:	3300      	adds	r3, #0
 80049c2:	bf18      	it	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	0692      	lsls	r2, r2, #26
 80049c8:	d42e      	bmi.n	8004a28 <_printf_common+0xc0>
 80049ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ce:	4639      	mov	r1, r7
 80049d0:	4630      	mov	r0, r6
 80049d2:	47c0      	blx	r8
 80049d4:	3001      	adds	r0, #1
 80049d6:	d021      	beq.n	8004a1c <_printf_common+0xb4>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	68e5      	ldr	r5, [r4, #12]
 80049dc:	f003 0306 	and.w	r3, r3, #6
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	bf18      	it	ne
 80049e4:	2500      	movne	r5, #0
 80049e6:	f8d9 2000 	ldr.w	r2, [r9]
 80049ea:	f04f 0900 	mov.w	r9, #0
 80049ee:	bf08      	it	eq
 80049f0:	1aad      	subeq	r5, r5, r2
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	bf08      	it	eq
 80049f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bfc4      	itt	gt
 8004a00:	1a9b      	subgt	r3, r3, r2
 8004a02:	18ed      	addgt	r5, r5, r3
 8004a04:	341a      	adds	r4, #26
 8004a06:	454d      	cmp	r5, r9
 8004a08:	d11a      	bne.n	8004a40 <_printf_common+0xd8>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e008      	b.n	8004a20 <_printf_common+0xb8>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4652      	mov	r2, sl
 8004a12:	4639      	mov	r1, r7
 8004a14:	4630      	mov	r0, r6
 8004a16:	47c0      	blx	r8
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d103      	bne.n	8004a24 <_printf_common+0xbc>
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	3501      	adds	r5, #1
 8004a26:	e7c2      	b.n	80049ae <_printf_common+0x46>
 8004a28:	2030      	movs	r0, #48	; 0x30
 8004a2a:	18e1      	adds	r1, r4, r3
 8004a2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a36:	4422      	add	r2, r4
 8004a38:	3302      	adds	r3, #2
 8004a3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a3e:	e7c4      	b.n	80049ca <_printf_common+0x62>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4622      	mov	r2, r4
 8004a44:	4639      	mov	r1, r7
 8004a46:	4630      	mov	r0, r6
 8004a48:	47c0      	blx	r8
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d0e6      	beq.n	8004a1c <_printf_common+0xb4>
 8004a4e:	f109 0901 	add.w	r9, r9, #1
 8004a52:	e7d8      	b.n	8004a06 <_printf_common+0x9e>

08004a54 <_printf_i>:
 8004a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	7e09      	ldrb	r1, [r1, #24]
 8004a60:	b085      	sub	sp, #20
 8004a62:	296e      	cmp	r1, #110	; 0x6e
 8004a64:	4617      	mov	r7, r2
 8004a66:	4606      	mov	r6, r0
 8004a68:	4698      	mov	r8, r3
 8004a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a6c:	f000 80b3 	beq.w	8004bd6 <_printf_i+0x182>
 8004a70:	d822      	bhi.n	8004ab8 <_printf_i+0x64>
 8004a72:	2963      	cmp	r1, #99	; 0x63
 8004a74:	d036      	beq.n	8004ae4 <_printf_i+0x90>
 8004a76:	d80a      	bhi.n	8004a8e <_printf_i+0x3a>
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	f000 80b9 	beq.w	8004bf0 <_printf_i+0x19c>
 8004a7e:	2958      	cmp	r1, #88	; 0x58
 8004a80:	f000 8083 	beq.w	8004b8a <_printf_i+0x136>
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a8c:	e032      	b.n	8004af4 <_printf_i+0xa0>
 8004a8e:	2964      	cmp	r1, #100	; 0x64
 8004a90:	d001      	beq.n	8004a96 <_printf_i+0x42>
 8004a92:	2969      	cmp	r1, #105	; 0x69
 8004a94:	d1f6      	bne.n	8004a84 <_printf_i+0x30>
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	6813      	ldr	r3, [r2, #0]
 8004a9a:	0605      	lsls	r5, r0, #24
 8004a9c:	f103 0104 	add.w	r1, r3, #4
 8004aa0:	d52a      	bpl.n	8004af8 <_printf_i+0xa4>
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6011      	str	r1, [r2, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da03      	bge.n	8004ab2 <_printf_i+0x5e>
 8004aaa:	222d      	movs	r2, #45	; 0x2d
 8004aac:	425b      	negs	r3, r3
 8004aae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ab2:	486f      	ldr	r0, [pc, #444]	; (8004c70 <_printf_i+0x21c>)
 8004ab4:	220a      	movs	r2, #10
 8004ab6:	e039      	b.n	8004b2c <_printf_i+0xd8>
 8004ab8:	2973      	cmp	r1, #115	; 0x73
 8004aba:	f000 809d 	beq.w	8004bf8 <_printf_i+0x1a4>
 8004abe:	d808      	bhi.n	8004ad2 <_printf_i+0x7e>
 8004ac0:	296f      	cmp	r1, #111	; 0x6f
 8004ac2:	d020      	beq.n	8004b06 <_printf_i+0xb2>
 8004ac4:	2970      	cmp	r1, #112	; 0x70
 8004ac6:	d1dd      	bne.n	8004a84 <_printf_i+0x30>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	f043 0320 	orr.w	r3, r3, #32
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	e003      	b.n	8004ada <_printf_i+0x86>
 8004ad2:	2975      	cmp	r1, #117	; 0x75
 8004ad4:	d017      	beq.n	8004b06 <_printf_i+0xb2>
 8004ad6:	2978      	cmp	r1, #120	; 0x78
 8004ad8:	d1d4      	bne.n	8004a84 <_printf_i+0x30>
 8004ada:	2378      	movs	r3, #120	; 0x78
 8004adc:	4865      	ldr	r0, [pc, #404]	; (8004c74 <_printf_i+0x220>)
 8004ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ae2:	e055      	b.n	8004b90 <_printf_i+0x13c>
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aea:	1d19      	adds	r1, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6011      	str	r1, [r2, #0]
 8004af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af4:	2301      	movs	r3, #1
 8004af6:	e08c      	b.n	8004c12 <_printf_i+0x1be>
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004afe:	6011      	str	r1, [r2, #0]
 8004b00:	bf18      	it	ne
 8004b02:	b21b      	sxthne	r3, r3
 8004b04:	e7cf      	b.n	8004aa6 <_printf_i+0x52>
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6010      	str	r0, [r2, #0]
 8004b0e:	0628      	lsls	r0, r5, #24
 8004b10:	d501      	bpl.n	8004b16 <_printf_i+0xc2>
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	e002      	b.n	8004b1c <_printf_i+0xc8>
 8004b16:	0668      	lsls	r0, r5, #25
 8004b18:	d5fb      	bpl.n	8004b12 <_printf_i+0xbe>
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	296f      	cmp	r1, #111	; 0x6f
 8004b1e:	bf14      	ite	ne
 8004b20:	220a      	movne	r2, #10
 8004b22:	2208      	moveq	r2, #8
 8004b24:	4852      	ldr	r0, [pc, #328]	; (8004c70 <_printf_i+0x21c>)
 8004b26:	2100      	movs	r1, #0
 8004b28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b2c:	6865      	ldr	r5, [r4, #4]
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	60a5      	str	r5, [r4, #8]
 8004b32:	f2c0 8095 	blt.w	8004c60 <_printf_i+0x20c>
 8004b36:	6821      	ldr	r1, [r4, #0]
 8004b38:	f021 0104 	bic.w	r1, r1, #4
 8004b3c:	6021      	str	r1, [r4, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d13d      	bne.n	8004bbe <_printf_i+0x16a>
 8004b42:	2d00      	cmp	r5, #0
 8004b44:	f040 808e 	bne.w	8004c64 <_printf_i+0x210>
 8004b48:	4665      	mov	r5, ip
 8004b4a:	2a08      	cmp	r2, #8
 8004b4c:	d10b      	bne.n	8004b66 <_printf_i+0x112>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	07db      	lsls	r3, r3, #31
 8004b52:	d508      	bpl.n	8004b66 <_printf_i+0x112>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	bfde      	ittt	le
 8004b5c:	2330      	movle	r3, #48	; 0x30
 8004b5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b66:	ebac 0305 	sub.w	r3, ip, r5
 8004b6a:	6123      	str	r3, [r4, #16]
 8004b6c:	f8cd 8000 	str.w	r8, [sp]
 8004b70:	463b      	mov	r3, r7
 8004b72:	aa03      	add	r2, sp, #12
 8004b74:	4621      	mov	r1, r4
 8004b76:	4630      	mov	r0, r6
 8004b78:	f7ff fef6 	bl	8004968 <_printf_common>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d14d      	bne.n	8004c1c <_printf_i+0x1c8>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	b005      	add	sp, #20
 8004b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b8a:	4839      	ldr	r0, [pc, #228]	; (8004c70 <_printf_i+0x21c>)
 8004b8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	1d1d      	adds	r5, r3, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6015      	str	r5, [r2, #0]
 8004b9a:	060a      	lsls	r2, r1, #24
 8004b9c:	d50b      	bpl.n	8004bb6 <_printf_i+0x162>
 8004b9e:	07ca      	lsls	r2, r1, #31
 8004ba0:	bf44      	itt	mi
 8004ba2:	f041 0120 	orrmi.w	r1, r1, #32
 8004ba6:	6021      	strmi	r1, [r4, #0]
 8004ba8:	b91b      	cbnz	r3, 8004bb2 <_printf_i+0x15e>
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	f022 0220 	bic.w	r2, r2, #32
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	e7b7      	b.n	8004b26 <_printf_i+0xd2>
 8004bb6:	064d      	lsls	r5, r1, #25
 8004bb8:	bf48      	it	mi
 8004bba:	b29b      	uxthmi	r3, r3
 8004bbc:	e7ef      	b.n	8004b9e <_printf_i+0x14a>
 8004bbe:	4665      	mov	r5, ip
 8004bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bc4:	fb02 3311 	mls	r3, r2, r1, r3
 8004bc8:	5cc3      	ldrb	r3, [r0, r3]
 8004bca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004bce:	460b      	mov	r3, r1
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d1f5      	bne.n	8004bc0 <_printf_i+0x16c>
 8004bd4:	e7b9      	b.n	8004b4a <_printf_i+0xf6>
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	6825      	ldr	r5, [r4, #0]
 8004bda:	1d18      	adds	r0, r3, #4
 8004bdc:	6961      	ldr	r1, [r4, #20]
 8004bde:	6010      	str	r0, [r2, #0]
 8004be0:	0628      	lsls	r0, r5, #24
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	d501      	bpl.n	8004bea <_printf_i+0x196>
 8004be6:	6019      	str	r1, [r3, #0]
 8004be8:	e002      	b.n	8004bf0 <_printf_i+0x19c>
 8004bea:	066a      	lsls	r2, r5, #25
 8004bec:	d5fb      	bpl.n	8004be6 <_printf_i+0x192>
 8004bee:	8019      	strh	r1, [r3, #0]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4665      	mov	r5, ip
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	e7b9      	b.n	8004b6c <_printf_i+0x118>
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	1d19      	adds	r1, r3, #4
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	681d      	ldr	r5, [r3, #0]
 8004c00:	6862      	ldr	r2, [r4, #4]
 8004c02:	2100      	movs	r1, #0
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 f8e1 	bl	8004dcc <memchr>
 8004c0a:	b108      	cbz	r0, 8004c10 <_printf_i+0x1bc>
 8004c0c:	1b40      	subs	r0, r0, r5
 8004c0e:	6060      	str	r0, [r4, #4]
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	2300      	movs	r3, #0
 8004c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1a:	e7a7      	b.n	8004b6c <_printf_i+0x118>
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	462a      	mov	r2, r5
 8004c20:	4639      	mov	r1, r7
 8004c22:	4630      	mov	r0, r6
 8004c24:	47c0      	blx	r8
 8004c26:	3001      	adds	r0, #1
 8004c28:	d0aa      	beq.n	8004b80 <_printf_i+0x12c>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	079b      	lsls	r3, r3, #30
 8004c2e:	d413      	bmi.n	8004c58 <_printf_i+0x204>
 8004c30:	68e0      	ldr	r0, [r4, #12]
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	4298      	cmp	r0, r3
 8004c36:	bfb8      	it	lt
 8004c38:	4618      	movlt	r0, r3
 8004c3a:	e7a3      	b.n	8004b84 <_printf_i+0x130>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	464a      	mov	r2, r9
 8004c40:	4639      	mov	r1, r7
 8004c42:	4630      	mov	r0, r6
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d09a      	beq.n	8004b80 <_printf_i+0x12c>
 8004c4a:	3501      	adds	r5, #1
 8004c4c:	68e3      	ldr	r3, [r4, #12]
 8004c4e:	9a03      	ldr	r2, [sp, #12]
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	42ab      	cmp	r3, r5
 8004c54:	dcf2      	bgt.n	8004c3c <_printf_i+0x1e8>
 8004c56:	e7eb      	b.n	8004c30 <_printf_i+0x1dc>
 8004c58:	2500      	movs	r5, #0
 8004c5a:	f104 0919 	add.w	r9, r4, #25
 8004c5e:	e7f5      	b.n	8004c4c <_printf_i+0x1f8>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ac      	bne.n	8004bbe <_printf_i+0x16a>
 8004c64:	7803      	ldrb	r3, [r0, #0]
 8004c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c6e:	e76c      	b.n	8004b4a <_printf_i+0xf6>
 8004c70:	08004f95 	.word	0x08004f95
 8004c74:	08004fa6 	.word	0x08004fa6

08004c78 <_sbrk_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4c05      	ldr	r4, [pc, #20]	; (8004c94 <_sbrk_r+0x1c>)
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	f7fc fbd0 	bl	8001428 <_sbrk>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_sbrk_r+0x1a>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_sbrk_r+0x1a>
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	200001ac 	.word	0x200001ac

08004c98 <__sread>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca0:	f000 f8a4 	bl	8004dec <_read_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	bfab      	itete	ge
 8004ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004caa:	89a3      	ldrhlt	r3, [r4, #12]
 8004cac:	181b      	addge	r3, r3, r0
 8004cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cb2:	bfac      	ite	ge
 8004cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cb6:	81a3      	strhlt	r3, [r4, #12]
 8004cb8:	bd10      	pop	{r4, pc}

08004cba <__swrite>:
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	898b      	ldrh	r3, [r1, #12]
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	05db      	lsls	r3, r3, #23
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4616      	mov	r6, r2
 8004cca:	d505      	bpl.n	8004cd8 <__swrite+0x1e>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd4:	f000 f868 	bl	8004da8 <_lseek_r>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	4632      	mov	r2, r6
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	4628      	mov	r0, r5
 8004cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	f000 b817 	b.w	8004d20 <_write_r>

08004cf2 <__sseek>:
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfa:	f000 f855 	bl	8004da8 <_lseek_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	bf15      	itete	ne
 8004d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d0e:	81a3      	strheq	r3, [r4, #12]
 8004d10:	bf18      	it	ne
 8004d12:	81a3      	strhne	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__sclose>:
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	f000 b813 	b.w	8004d44 <_close_r>
	...

08004d20 <_write_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4605      	mov	r5, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4c05      	ldr	r4, [pc, #20]	; (8004d40 <_write_r+0x20>)
 8004d2c:	6022      	str	r2, [r4, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f7fc fb2d 	bl	800138e <_write>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_write_r+0x1e>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_write_r+0x1e>
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	200001ac 	.word	0x200001ac

08004d44 <_close_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	2300      	movs	r3, #0
 8004d48:	4c05      	ldr	r4, [pc, #20]	; (8004d60 <_close_r+0x1c>)
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	f7fc fb39 	bl	80013c6 <_close>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_close_r+0x1a>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_close_r+0x1a>
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	200001ac 	.word	0x200001ac

08004d64 <_fstat_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	2300      	movs	r3, #0
 8004d68:	4c06      	ldr	r4, [pc, #24]	; (8004d84 <_fstat_r+0x20>)
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	f7fc fb33 	bl	80013dc <_fstat>
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	d102      	bne.n	8004d80 <_fstat_r+0x1c>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	b103      	cbz	r3, 8004d80 <_fstat_r+0x1c>
 8004d7e:	602b      	str	r3, [r5, #0]
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
 8004d82:	bf00      	nop
 8004d84:	200001ac 	.word	0x200001ac

08004d88 <_isatty_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4c05      	ldr	r4, [pc, #20]	; (8004da4 <_isatty_r+0x1c>)
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	f7fc fb31 	bl	80013fa <_isatty>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_isatty_r+0x1a>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_isatty_r+0x1a>
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	200001ac 	.word	0x200001ac

08004da8 <_lseek_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4605      	mov	r5, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	2200      	movs	r2, #0
 8004db2:	4c05      	ldr	r4, [pc, #20]	; (8004dc8 <_lseek_r+0x20>)
 8004db4:	6022      	str	r2, [r4, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fc fb29 	bl	800140e <_lseek>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_lseek_r+0x1e>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_lseek_r+0x1e>
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	200001ac 	.word	0x200001ac

08004dcc <memchr>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	b2c9      	uxtb	r1, r1
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4290      	cmp	r0, r2
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	d101      	bne.n	8004ddc <memchr+0x10>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e003      	b.n	8004de4 <memchr+0x18>
 8004ddc:	781c      	ldrb	r4, [r3, #0]
 8004dde:	3001      	adds	r0, #1
 8004de0:	428c      	cmp	r4, r1
 8004de2:	d1f6      	bne.n	8004dd2 <memchr+0x6>
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd10      	pop	{r4, pc}

08004de8 <__malloc_lock>:
 8004de8:	4770      	bx	lr

08004dea <__malloc_unlock>:
 8004dea:	4770      	bx	lr

08004dec <_read_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4605      	mov	r5, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	2200      	movs	r2, #0
 8004df6:	4c05      	ldr	r4, [pc, #20]	; (8004e0c <_read_r+0x20>)
 8004df8:	6022      	str	r2, [r4, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7fc faaa 	bl	8001354 <_read>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_read_r+0x1e>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_read_r+0x1e>
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	200001ac 	.word	0x200001ac

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
